{\rtf1\ansi\uc0\deff0{\fonttbl{\f0\fmodern\fprq1\fcharset0;}}{\colortbl;\red187\green187\blue187;\red61\green123\blue123;\red156\green101\blue0;\red0\green128\blue0;\red176\green0\blue64;\red102\green102\blue102;\red170\green34\blue255;\red0\green0\blue255;\red203\green63\blue56;\red25\green23\blue124;\red136\green0\blue0;\red118\green118\blue0;\red113\green113\blue113;\red104\green120\blue34;\red186\green33\blue33;\red164\green90\blue119;\red170\green93\blue31;\red0\green0\blue128;\red128\green0\blue128;\red160\green0\blue0;\red0\green132\blue0;\red228\green0\blue0;\red0\green68\blue221;\red255\green0\blue0;}\f0 {\cf2\i //App.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "App.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <stdlib.h>}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Base/Data.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Base/MacroSettings.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "GUI/GUI.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Base/Logger.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Networks/capture.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Win/SDK.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "ImGuiFileDialog.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <iostream>}{\cf3 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::release}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCounting{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCapturing{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}geoTerminate{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 	}{\cf4\b Logger}{\cf6 :}{\cf6 :}release();{\cf1 \par
}{\cf1 	}{\cf4\b Capture}{\cf6 :}{\cf6 :}release();{\cf1 \par
}{\cf1 	}{\cf4\b SDK}{\cf6 :}{\cf6 :}release();{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}release();{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}chosenAdapter{\cf1  }{\cf6 !}{\cf6 =}{\cf1  }{\cf4\b nullptr}){\cf1  }\{{\cf1 \par
}{\cf1 		}pcap_close({\cf4\b Data}{\cf6 :}{\cf6 :}chosenAdapter);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::init}(){\cf1  }\{{\cf1 \par
}{\cf1 	}remove({\cf15 "}{\cf15 captures/output.pcap}{\cf15 "});{\cf1 \par
}{\cf1 	}remove({\cf15 "}{\cf15 captures/output.txt}{\cf15 "});{\cf1 \par
}{\cf1 	}remove({\cf15 "}{\cf15 imgui.ini}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf2\i // make sure resources are always released\par
}{\cf1 	}atexit(App{\cf6 :}{\cf6 :}release);{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}init();{\cf1 \par
}{\cf1 	}{\cf4\b Logger}{\cf6 :}{\cf6 :}init();{\cf1 \par
}{\cf1 	}{\cf4\b Capture}{\cf6 :}{\cf6 :}init();{\cf1 \par
}{\cf1 	}{\cf4\b SDK}{\cf6 :}{\cf6 :}init();{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}init();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::adapterScreen}(){\cf1  }\{{\cf1 \par
}{\cf1 	}getAdapter();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}showLoad{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}chosenAdapter{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf4\b nullptr}){\cf1  }\{{\cf1 \par
}{\cf1 		}exit({\cf6 -1});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::captureScreen}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf2\i // jthread just because they join by default when they go out of scope\par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}captureThread{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}jthread({\cf4\b Capture}{\cf6 :}{\cf6 :}capturePackets);{\cf1 \par
}{\cf1 \par
}{\cf1 	}render();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCapturing{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}captureThread.join();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::renderAdapterMenuBar}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 regular}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginMainMenuBar()){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginMenu({\cf15 "}{\cf15 File}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}MenuItem({\cf15 "}{\cf15 Load}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b Data}{\cf6 :}{\cf6 :}showLoad{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndMenu();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndMainMenuBar();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::handleLoad}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 0},{\cf1  }{\cf6 0}));{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 1280},{\cf1  }{\cf6 720}));{\cf1 \par
}{\cf1 	}ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}OpenDialog({\cf15 "}{\cf15 ChooseFileDlgKey}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 Choose File}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 .pcapng,.pcap,}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 .}{\cf15 "});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}Display({\cf15 "}{\cf15 ChooseFileDlgKey}{\cf15 "})){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}IsOk()){\cf1 \par
}{\cf1 		}\{{\cf1 \par
}{\cf1 			}std{\cf6 :}{\cf6 :}string{\cf1  }filePathName{\cf1  }{\cf6 =}{\cf1  }ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}GetFilePathName();{\cf1 \par
}{\cf1 			}std{\cf6 :}{\cf6 :}string{\cf1  }filePath{\cf1  }{\cf6 =}{\cf1  }ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}GetCurrentPath();{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}fileAdapter{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}chosenAdapter{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}load(filePathName);{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCounting{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showLoad{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showLoad{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}Close();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::getAdapter}(){\cf1  }\{{\cf1 \par
}{\cf3 #}{\cf3 ifdef CAPTURE_LIVE}{\cf3 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}fileAdapter{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}chosenAdapter{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}createAdapter({\cf6 3});{\cf1 \par
}{\cf1 	}{\cf4\b SDK}{\cf6 :}{\cf6 :}findIP({\cf4\b Capture}{\cf6 :}{\cf6 :}getDev({\cf6 3}){\cf6 -}{\cf6 >}name);{\cf1 \par
}{\cf1 	}{\cf4\b return};{\cf1 \par
}{\cf3 #}{\cf3 endif}{\cf3 \par
}{\cf3 #}{\cf3 ifdef CAPTURE_SAMPLES}{\cf3 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}fileAdapter{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}chosenAdapter{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}load({\cf15 "}{\cf15 samples.pcapng}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b return};{\cf1 \par
}{\cf3 #}{\cf3 endif}{\cf3 \par
}{\cf3 #}{\cf3 ifdef CAPTURE_V6}{\cf3 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}fileAdapter{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}chosenAdapter{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}load({\cf15 "}{\cf15 v6.pcapng}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b return};{\cf1 \par
}{\cf3 #}{\cf3 endif}{\cf3 \par
}{\cf3 #}{\cf3 ifdef CAPTURE_ICMPV6}{\cf3 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}fileAdapter{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}chosenAdapter{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}load({\cf15 "}{\cf15 icmpv6.pcapng}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b return};{\cf1 \par
}{\cf3 #}{\cf3 endif}{\cf3 \par
}{\cf1 	}{\cf4\b using}{\cf1  }std{\cf6 :}{\cf6 :}chrono{\cf6 :}{\cf6 :}high_resolution_clock;{\cf1 \par
}{\cf1 	}{\cf4\b using}{\cf1  }std{\cf6 :}{\cf6 :}chrono{\cf6 :}{\cf6 :}duration_cast;{\cf1 \par
}{\cf1 	}{\cf4\b using}{\cf1  }std{\cf6 :}{\cf6 :}chrono{\cf6 :}{\cf6 :}duration;{\cf1 \par
}{\cf1 	}{\cf4\b using}{\cf1  }std{\cf6 :}{\cf6 :}chrono{\cf6 :}{\cf6 :}milliseconds;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }names{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}getDeviceNames();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }counts{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}vector{\cf6 <}{\cf5 int}{\cf6 >}(names.size(),{\cf1  }{\cf6 0});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }threads{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}vector{\cf6 <}std{\cf6 :}{\cf6 :}{\cf4\b thread}{\cf6 *}{\cf6 >}();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }t1{\cf1  }{\cf6 =}{\cf1  }high_resolution_clock{\cf6 :}{\cf6 :}now();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }names.size();{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 		}threads.push_back({\cf4\b new}{\cf1  }std{\cf6 :}{\cf6 :}{\cf4\b thread}({\cf4\b Capture}{\cf6 :}{\cf6 :}countPackets,{\cf1  }{\cf6 &}counts,{\cf1  }i));{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}srand(time({\cf4\b nullptr}));{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }randomNumber{\cf1  }{\cf6 =}{\cf1  }rand(){\cf1  }{\cf6 %}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}quotes.size();{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}vector{\cf6 <}{\cf5 float}{\cf6 >}{\cf1  }rates;{\cf1 \par
}{\cf1 \par
}{\cf1 	}rates.assign(names.size(),{\cf1  }{\cf6 0.0f});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }last{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }selected{\cf1  }{\cf6 =}{\cf1  }{\cf6 -1};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b while}{\cf1  }({\cf6 !}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCounting){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}startFrame();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(glfwWindowShouldClose({\cf4\b GUI}{\cf6 :}{\cf6 :}window)){\cf1  }\{{\cf1 \par
}{\cf1 			}exit({\cf6 0});{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 0},{\cf1  }{\cf6 20}));{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 1280},{\cf1  }{\cf6 700}));{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Begin({\cf15 "}{\cf15 Adapter Selection Window}{\cf15 "},{\cf1  }{\cf4 NULL},{\cf1  }ImGuiWindowFlags_NoResize{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoMove{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoCollapse{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoTitleBar);{\cf1 \par
}{\cf1 \par
}{\cf1 		}renderAdapterMenuBar();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}showLoad){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 regular}{\cf15 "});{\cf1 \par
}{\cf1 			}handleLoad();{\cf1 \par
}{\cf1 			}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPos(ImVec2({\cf6 340},{\cf1  }{\cf6 0}));{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 title}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 Welcome to RustyDolphin}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 quote}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf4\b Data}{\cf6 :}{\cf6 :}quotes.at(randomNumber));{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 adapters}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosY({\cf6 150});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 Choose the adapter you'd like to use:}{\cf15 "});{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }t2{\cf1  }{\cf6 =}{\cf1  }high_resolution_clock{\cf6 :}{\cf6 :}now();{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }ms_int{\cf1  }{\cf6 =}{\cf1  }duration_cast{\cf6 <}milliseconds{\cf6 >}(t2{\cf1  }{\cf6 -}{\cf1  }t1);{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }secs{\cf1  }{\cf6 =}{\cf1  }({\cf5 double})ms_int.count(){\cf1  }{\cf6 /}{\cf1  }{\cf6 1000};{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(secs{\cf1  }{\cf6 >}{\cf6 =}{\cf1  }(({\cf5 double})last{\cf1  }{\cf6 /}{\cf1  }{\cf6 5.0})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }rates.size();{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 				}rates.at(i){\cf1  }{\cf6 =}{\cf1  }(({\cf5 float})counts.at(i){\cf1  }{\cf6 /}{\cf1  }secs);{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}last{\cf6 +}{\cf6 +};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }names.size();{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosX({\cf6 150});{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }names.at(i){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  (Packet Rate: }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }rates.at(i){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  per second)}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(ss.str().c_str())){\cf1  }\{{\cf1 \par
}{\cf1 				}selected{\cf1  }{\cf6 =}{\cf1  }i;{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}ss.str({\cf15 "}{\cf15 "});{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(selected{\cf1  }{\cf6 !}{\cf6 =}{\cf1  }{\cf6 -1}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}OpenPopup({\cf15 "}{\cf15 AdapterSelectPopup}{\cf15 "});{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 600},{\cf1  }{\cf6 500}));{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 640}{\cf1  }{\cf6 -}{\cf1  }{\cf6 300},{\cf1  }{\cf6 360}{\cf1  }{\cf6 -}{\cf1  }{\cf6 250}));{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginPopupModal({\cf15 "}{\cf15 AdapterSelectPopup}{\cf15 "},{\cf1  }{\cf4 NULL},{\cf1  }ImGuiWindowFlags_NoResize{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoMove{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoTitleBar)){\cf1 \par
}{\cf1 			}\{{\cf1 \par
}{\cf1 				}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 Are you sure you want this adapter?}{\cf15 "});{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosY({\cf6 350});{\cf1 \par
}{\cf1 				}{\cf4\b if}{\cf1  }({\cf4\b GUI}{\cf6 :}{\cf6 :}centerButton({\cf15 "}{\cf15 Yes}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 					}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCounting{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 					}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 					}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndPopup();{\cf1 \par
}{\cf1 					}{\cf4\b ImGui}{\cf6 :}{\cf6 :}End();{\cf1 \par
}{\cf1 					}{\cf4\b GUI}{\cf6 :}{\cf6 :}endFrame();{\cf1 \par
}{\cf1 					}{\cf4\b break};{\cf1 \par
}{\cf1 				}\}{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosY({\cf6 430});{\cf1 \par
}{\cf1 				}{\cf4\b if}{\cf1  }({\cf4\b GUI}{\cf6 :}{\cf6 :}centerButton({\cf15 "}{\cf15 No}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 					}selected{\cf1  }{\cf6 =}{\cf1  }{\cf6 -1};{\cf1 \par
}{\cf1 					}{\cf4\b ImGui}{\cf6 :}{\cf6 :}CloseCurrentPopup();{\cf1 \par
}{\cf1 				}\}{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndPopup();{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}End();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}endFrame();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}ranges{\cf6 :}{\cf6 :}for_each(threads.cbegin(),{\cf1  }threads.cend(),{\cf1  }[](std{\cf6 :}{\cf6 :}{\cf4\b thread}{\cf6 *}{\cf1  }t){\cf1  }\{t{\cf6 -}{\cf6 >}join();{\cf1  }\});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}chosenAdapter{\cf1  }{\cf6 !}{\cf6 =}{\cf1  }{\cf4\b nullptr}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b return};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}fileAdapter{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(selected{\cf1  }{\cf6 !}{\cf6 =}{\cf1  }{\cf6 -1}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b Data}{\cf6 :}{\cf6 :}chosenAdapter{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}createAdapter(selected);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b SDK}{\cf6 :}{\cf6 :}findIP({\cf4\b Capture}{\cf6 :}{\cf6 :}getDev(selected){\cf6 -}{\cf6 >}name);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::handleStop}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 adapters}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}OpenPopup({\cf15 "}{\cf15 StopCapture}{\cf15 "});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 600},{\cf1  }{\cf6 500}));{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 640}{\cf1  }{\cf6 -}{\cf1  }{\cf6 300},{\cf1  }{\cf6 360}{\cf1  }{\cf6 -}{\cf1  }{\cf6 250}));{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginPopupModal({\cf15 "}{\cf15 StopCapture}{\cf15 "},{\cf1  }{\cf4 NULL},{\cf1  }ImGuiWindowFlags_NoResize{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoMove{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoTitleBar)){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 Are you sure you want stop the current capture?}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosY({\cf6 350});{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b GUI}{\cf6 :}{\cf6 :}centerButton({\cf15 "}{\cf15 Yes}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCapturing{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showStop{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosY({\cf6 430});{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b GUI}{\cf6 :}{\cf6 :}centerButton({\cf15 "}{\cf15 No}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showStop{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndPopup();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::handleStart}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 adapters}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}OpenPopup({\cf15 "}{\cf15 StartCapture}{\cf15 "});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 600},{\cf1  }{\cf6 500}));{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 340},{\cf1  }{\cf6 110}));{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginPopupModal({\cf15 "}{\cf15 StartCapture}{\cf15 "},{\cf1  }{\cf4 NULL},{\cf1  }ImGuiWindowFlags_NoResize{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoMove{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoTitleBar)){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 You have an ongoing capture.}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 do you want to start another one?}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 (the current one will be reset)}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosY({\cf6 350});{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b GUI}{\cf6 :}{\cf6 :}centerButton({\cf15 "}{\cf15 Yes}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCapturing{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}selected{\cf1  }{\cf6 =}{\cf1  }{\cf6 -1};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showStart{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}captureThread.join();{\cf1 \par
}{\cf1 			}{\cf4\b for}{\cf1  }({\cf4\b auto}{\cf1  }p{\cf1  }{\cf6 :}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}captured){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b delete}{\cf1  }p;{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}captured.clear();{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}capIdx{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCapturing{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}captureThread{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}jthread({\cf4\b Capture}{\cf6 :}{\cf6 :}capturePackets);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosY({\cf6 430});{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b GUI}{\cf6 :}{\cf6 :}centerButton({\cf15 "}{\cf15 No}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showStart{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndPopup();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::handleStartFile}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 adapters}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}OpenPopup({\cf15 "}{\cf15 StartCapture}{\cf15 "});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 600},{\cf1  }{\cf6 500}));{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 640}{\cf1  }{\cf6 -}{\cf1  }{\cf6 300},{\cf1  }{\cf6 360}{\cf1  }{\cf6 -}{\cf1  }{\cf6 250}));{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginPopupModal({\cf15 "}{\cf15 StartCapture}{\cf15 "},{\cf1  }{\cf4 NULL},{\cf1  }ImGuiWindowFlags_NoResize{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoMove{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoTitleBar)){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 Your current capture is from a file.}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 file captures cannot be re-started.}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 would you like to reset the currently captured packets?}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosY({\cf6 350});{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b GUI}{\cf6 :}{\cf6 :}centerButton({\cf15 "}{\cf15 Yes}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCapturing{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}selected{\cf1  }{\cf6 =}{\cf1  }{\cf6 -1};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showStart{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}captureThread.join();{\cf1 \par
}{\cf1 			}{\cf4\b for}{\cf1  }({\cf4\b auto}{\cf1  }p{\cf1  }{\cf6 :}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}captured){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b delete}{\cf1  }p;{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}captured.clear();{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}capIdx{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCapturing{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}captureThread{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}jthread({\cf4\b Capture}{\cf6 :}{\cf6 :}capturePackets);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosY({\cf6 430});{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b GUI}{\cf6 :}{\cf6 :}centerButton({\cf15 "}{\cf15 No}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showStart{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndPopup();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::handleSaveGoing}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 adapters}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}OpenPopup({\cf15 "}{\cf15 Save Packets}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 600},{\cf1  }{\cf6 500}));{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 640}{\cf1  }{\cf6 -}{\cf1  }{\cf6 300},{\cf1  }{\cf6 360}{\cf1  }{\cf6 -}{\cf1  }{\cf6 250}));{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginPopupModal({\cf15 "}{\cf15 Save Packets}{\cf15 "},{\cf1  }{\cf4 NULL},{\cf1  }ImGuiWindowFlags_NoResize{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoMove{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoTitleBar)){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 Your current capture is still on going.}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 Stop the current capture to save.}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosY({\cf6 350});{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b GUI}{\cf6 :}{\cf6 :}centerButton({\cf15 "}{\cf15 OK}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showSave{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndPopup();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::handleSave}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 0},{\cf1  }{\cf6 0}));{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 1280},{\cf1  }{\cf6 720}));{\cf1 \par
}{\cf1 	}ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}OpenDialog({\cf15 "}{\cf15 ChooseFileDlgKey}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 Choose File}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 .pcapng,.pcap,}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 .}{\cf15 "},{\cf1  }{\cf6 1},{\cf1  }{\cf4\b nullptr},{\cf1  }ImGuiFileDialogFlags_ConfirmOverwrite);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}Display({\cf15 "}{\cf15 ChooseFileDlgKey}{\cf15 "})){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}IsOk()){\cf1 \par
}{\cf1 		}\{{\cf1 \par
}{\cf1 			}std{\cf6 :}{\cf6 :}string{\cf1  }filePathName{\cf1  }{\cf6 =}{\cf1  }ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}GetFilePathName();{\cf1 \par
}{\cf1 			}std{\cf6 :}{\cf6 :}string{\cf1  }filePath{\cf1  }{\cf6 =}{\cf1  }ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}GetCurrentPath();{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b Capture}{\cf6 :}{\cf6 :}dumpAll(filePathName);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showSave{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showSave{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}Close();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::handleLoadCapture}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 0},{\cf1  }{\cf6 0}));{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 1280},{\cf1  }{\cf6 720}));{\cf1 \par
}{\cf1 	}ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}OpenDialog({\cf15 "}{\cf15 ChooseFileDlgKey}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 Choose File}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 .pcapng,.pcap,}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 .}{\cf15 "});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}Display({\cf15 "}{\cf15 ChooseFileDlgKey}{\cf15 "})){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}IsOk()){\cf1 \par
}{\cf1 		}\{{\cf1 \par
}{\cf1 			}std{\cf6 :}{\cf6 :}string{\cf1  }filePathName{\cf1  }{\cf6 =}{\cf1  }ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}GetFilePathName();{\cf1 \par
}{\cf1 			}std{\cf6 :}{\cf6 :}string{\cf1  }filePath{\cf1  }{\cf6 =}{\cf1  }ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}GetCurrentPath();{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCapturing{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}selected{\cf1  }{\cf6 =}{\cf1  }{\cf6 -1};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showStart{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}captureThread.join();{\cf1 \par
}{\cf1 			}{\cf4\b for}{\cf1  }({\cf4\b auto}{\cf1  }p{\cf1  }{\cf6 :}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}captured){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b delete}{\cf1  }p;{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}captured.clear();{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}capIdx{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCapturing{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}doneLoading{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}fileAdapter{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showLoad{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}chosenAdapter{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}load(filePathName);{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}captureThread{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}jthread({\cf4\b Capture}{\cf6 :}{\cf6 :}capturePackets);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showLoad{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}ImGuiFileDialog{\cf6 :}{\cf6 :}Instance(){\cf6 -}{\cf6 >}Close();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::filterHelp}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 adapters}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}OpenPopup({\cf15 "}{\cf15 Filter Help}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 1080},{\cf1  }{\cf6 520}));{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 100},{\cf1  }{\cf6 100}));{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginPopupModal({\cf15 "}{\cf15 Filter Help}{\cf15 "},{\cf1  }{\cf4 NULL},{\cf1  }ImGuiWindowFlags_NoResize{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoMove{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoTitleBar)){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 Filter Documentation}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 below are the allowed filters and the values they accept:}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 num}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 regular}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 the number of the packet in the packet stream. (this filter only shows one packet)}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 for example, if you wanted to only see packet number 68 you can type: 'num=68'}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 len}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 regular}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 the overall length of the packet in bytes (bytes on wire)}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 for example, if you wanted to only see packets containing exactly 60 bytes you can type: 'len=60'}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 ip}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 regular}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 the type of meta-protocol used in the packet itself (called ip for brevity, but this also includes arp)}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 for example, if you wanted to only see arp packets you can type: 'ip=arp'}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 proto}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 regular}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 the type of protocol used in the packet itself (such as TCP, UDP, ICMP, etc)}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 for example, if you wanted to only see packets which use the IGMP protocol you can type: 'proto=igmp'}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 saddr}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 regular}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 the address (whether it is IPv4, IPv6, or MAC depends on the packet) of the packet's source}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 for example, if you wanted to only see packets which came from 10.0.11.69 you can type: 'saddr=10.0.11.69'}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 daddr}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 regular}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 the address (whether it is IPv4, IPv6, or MAC depends on the packet) of the packet's destination}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 for example, if you wanted to only see packets which are addressed to MAC broadcast you can type: 'daddr=ff:ff:ff:ff:ff:ff'}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 sport}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 regular}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 the port from which the packet originated}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 for example, if you wanted to only see packets which came from port 443 you can type: 'sport=443'}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 dport}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 regular}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 the port to which the packet is headed}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 for example, if you wanted to only see packets headed to port 42069 you can type: 'dport=42069'}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 proc}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 regular}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 the process which sent the packet (due to the way the process detecting works, only tcp and udp connections are detected, and some mistakes may be made)}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 for example, if you wanted to only see packets sent / received by Google's Chrome you can: 'proc=chrome.exe'}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 notes}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 regular}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 -in order to chain multiple filters together, use commas to sepearte them: 'proto=tcp, proc=msedge.exe, len=42'}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 -leading and trailing spaces are trimmed from filter inputs to reduce the amount of headache :)}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 -if a bad filter is given, no packet will be presented}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 -each presented packet has to pass every filter. you cannot use filters to present both tcp and udp packets for example by using}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 'proto=tcp, proto=udp'. only udp packets will be presented as its the last filter}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf17\b \\n}{\cf17\b \\n}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b GUI}{\cf6 :}{\cf6 :}centerButton({\cf15 "}{\cf15 OK}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showFilterHelp{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndPopup();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::renderCaptureMenuBar}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginMainMenuBar()){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginMenu({\cf15 "}{\cf15 File}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}MenuItem({\cf15 "}{\cf15 Load}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b Data}{\cf6 :}{\cf6 :}showLoad{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}MenuItem({\cf15 "}{\cf15 Save}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b Data}{\cf6 :}{\cf6 :}showSave{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndMenu();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginMenu({\cf15 "}{\cf15 Capture}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}MenuItem({\cf15 "}{\cf15 Start}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b Data}{\cf6 :}{\cf6 :}showStart{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}MenuItem({\cf15 "}{\cf15 Stop}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b Data}{\cf6 :}{\cf6 :}showStop{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndMenu();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginMenu({\cf15 "}{\cf15 Help}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}MenuItem({\cf15 "}{\cf15 Filter Docs}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b Data}{\cf6 :}{\cf6 :}showFilterHelp{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndMenu();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}string{\cf1  }text{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 total packet captured: \{\} | packets displayed: \{\}}{\cf15 "},{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}capIdx,{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}displayed);{\cf1 \par
}{\cf1 		}ImVec2{\cf1  }textSize{\cf1  }{\cf6 =}{\cf1  }{\cf4\b ImGui}{\cf6 :}{\cf6 :}CalcTextSize(text.c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosX({\cf4\b ImGui}{\cf6 :}{\cf6 :}GetWindowWidth(){\cf1  }{\cf6 -}{\cf1  }textSize.x);{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(text.c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndMainMenuBar();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }columns{\cf1  }{\cf6 =}{\cf1  }{\cf6 7};{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::renderTable}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginTable({\cf15 "}{\cf15 Packet Table}{\cf15 "},{\cf1  }columns,{\cf1  }ImGuiTableFlags_ScrollY{\cf1  }{\cf6 |}{\cf1  }ImGuiTableFlags_RowBg)){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupScrollFreeze({\cf6 0},{\cf1  }{\cf6 1});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupColumn(({\cf15 "}{\cf15 No.}{\cf15 "}),{\cf1  }ImGuiTableColumnFlags_WidthFixed,{\cf1  }{\cf6 80.0f});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupColumn({\cf15 "}{\cf15 Time}{\cf15 "},{\cf1  }ImGuiTableColumnFlags_WidthFixed,{\cf1  }{\cf6 90.0f});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupColumn({\cf15 "}{\cf15 Source}{\cf15 "},{\cf1  }ImGuiTableColumnFlags_WidthFixed,{\cf1  }{\cf6 200.0f});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupColumn({\cf15 "}{\cf15 Destination}{\cf15 "},{\cf1  }ImGuiTableColumnFlags_WidthFixed,{\cf1  }{\cf6 200.0f});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupColumn({\cf15 "}{\cf15 Protocol}{\cf15 "},{\cf1  }ImGuiTableColumnFlags_WidthFixed,{\cf1  }{\cf6 100.0f});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupColumn({\cf15 "}{\cf15 Length}{\cf15 "},{\cf1  }ImGuiTableColumnFlags_WidthFixed,{\cf1  }{\cf6 50.0f});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupColumn({\cf15 "}{\cf15 Info}{\cf15 "},{\cf1  }ImGuiTableColumnFlags_WidthFixed,{\cf1  }{\cf6 560.0f});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableHeadersRow();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b Data}{\cf6 :}{\cf6 :}displayed{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }row{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }row{\cf1  }{\cf6 <}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}capIdx;{\cf1  }row{\cf6 +}{\cf6 +}){\cf1 \par
}{\cf1 		}\{{\cf1 \par
}{\cf1 			}{\cf4\b auto}{\cf1  }p{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}captured.at(row);{\cf1 \par
}{\cf1 			}\{{\cf1 \par
}{\cf1 				}std{\cf6 :}{\cf6 :}scoped_lock{\cf1  }guard({\cf4\b Data}{\cf6 :}{\cf6 :}guard);{\cf1 \par
}{\cf1 				}Renderer{\cf6 :}{\cf6 :}filterPacket(p);{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }(row{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}selected){\cf1 \par
}{\cf1 			}\{{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetBgColor(ImGuiTableBgTarget_RowBg0,{\cf1  }{\cf4\b ImGui}{\cf6 :}{\cf6 :}ColorConvertFloat4ToU32(ImVec4({\cf6 56.f}{\cf1  }{\cf6 /}{\cf1  }{\cf6 255.f},{\cf1  }{\cf6 123.f}{\cf1  }{\cf6 /}{\cf1  }{\cf6 255.f},{\cf1  }{\cf6 203.f}{\cf1  }{\cf6 /}{\cf1  }{\cf6 255.f},{\cf1  }{\cf6 0.5})));{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf2\i // after one frame the filter is no longer new\par
}{\cf1 		}{\cf4\b Data}{\cf6 :}{\cf6 :}newFilter{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndTable();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}End();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::renderExpandedPacket}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 0},{\cf1  }{\cf6 380}));{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 780},{\cf1  }{\cf6 340}));{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Begin({\cf15 "}{\cf15 Expanded Packet}{\cf15 "},{\cf1  }{\cf4 NULL},{\cf1  }ImGuiWindowFlags_NoResize{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoMove{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoCollapse{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoTitleBar);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}captured.at({\cf4\b Data}{\cf6 :}{\cf6 :}selected){\cf6 -}{\cf6 >}renderExpanded();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}End();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 780},{\cf1  }{\cf6 380}));{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 500},{\cf1  }{\cf6 340}));{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Begin({\cf15 "}{\cf15 Packet Data View}{\cf15 "},{\cf1  }{\cf4 NULL},{\cf1  }ImGuiWindowFlags_NoResize{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoMove{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoCollapse{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoTitleBar);{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }str;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 hexView}{\cf15 "});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }p{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}captured.at({\cf4\b Data}{\cf6 :}{\cf6 :}selected);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }inc{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }hexData{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}getTexts().at({\cf15 "}{\cf15 hexData}{\cf15 "});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }hexData.size();{\cf1  }i{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }{\cf6 2}){\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}string{\cf1  }byte{\cf1  }{\cf6 =}{\cf1  }hexData.substr(i,{\cf1  }{\cf6 2});{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(i{\cf1  }{\cf6 %}{\cf1  }{\cf6 32}{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 0}{\cf1  }{\cf6 &}{\cf6 &}{\cf1  }i{\cf1  }{\cf6 >}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 			}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}hex{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}setw({\cf6 4}){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}setfill({\cf15 '}{\cf15 0}{\cf15 '}){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }inc;{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosX({\cf6 10});{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text((ss.str(){\cf1  }{\cf6 +}{\cf1  }{\cf15 "}{\cf15  }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }str).c_str());{\cf1 \par
}{\cf1 			}str{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15  }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }byte;{\cf1 \par
}{\cf1 			}inc{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }{\cf6 16};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 			}str{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }{\cf15 "}{\cf15  }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }byte;{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosX({\cf6 10});{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 	}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}hex{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}setw({\cf6 4}){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}setfill({\cf15 '}{\cf15 0}{\cf15 '}){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }inc;{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text((ss.str(){\cf1  }{\cf6 +}{\cf1  }{\cf15 "}{\cf15  }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }str).c_str());{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}End();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::alertFilter}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 adapters}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}OpenPopup({\cf15 "}{\cf15 Bad Filter}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 600},{\cf1  }{\cf6 500}));{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 640}{\cf1  }{\cf6 -}{\cf1  }{\cf6 300},{\cf1  }{\cf6 360}{\cf1  }{\cf6 -}{\cf1  }{\cf6 250}));{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginPopupModal({\cf15 "}{\cf15 Bad Filter}{\cf15 "},{\cf1  }{\cf4 NULL},{\cf1  }ImGuiWindowFlags_NoResize{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoMove{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoTitleBar)){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 Your filter is not correct:}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf4\b Data}{\cf6 :}{\cf6 :}filterIssue.c_str());{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf17\b \\n}{\cf15 If you need help with filtering}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 You can use the documentation:}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 Help->Filter Docs}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosY({\cf6 350});{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b GUI}{\cf6 :}{\cf6 :}centerButton({\cf15 "}{\cf15 OK}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showBadFilter{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndPopup();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::renderFilterBox}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}InputText({\cf15 "}{\cf15 ##}{\cf15 "},{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}filterTxt,{\cf1  }IM_ARRAYSIZE({\cf4\b Data}{\cf6 :}{\cf6 :}filterTxt));{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SameLine();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button({\cf15 "}{\cf15 Apply}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b Data}{\cf6 :}{\cf6 :}processFilter();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SameLine();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button({\cf15 "}{\cf15 Clear}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b Data}{\cf6 :}{\cf6 :}filterTxt[{\cf6 0}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 '}{\cf15 \\0}{\cf15 '};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}showBadFilter){\cf1  }\{{\cf1 \par
}{\cf1 		}alertFilter();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::geoTable}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginTable({\cf15 "}{\cf15 Geo Table}{\cf15 "},{\cf1  }columns,{\cf1  }ImGuiTableFlags_ScrollY{\cf1  }{\cf6 |}{\cf1  }ImGuiTableFlags_RowBg,{\cf1  }ImVec2({\cf6 1250},{\cf1  }{\cf6 500}))){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 regular}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupScrollFreeze({\cf6 0},{\cf1  }{\cf6 1});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupColumn({\cf15 "}{\cf15 Hop Number}{\cf15 "},{\cf1  }ImGuiTableColumnFlags_WidthFixed,{\cf1  }{\cf6 90.0f});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupColumn({\cf15 "}{\cf15 Address}{\cf15 "},{\cf1  }ImGuiTableColumnFlags_WidthFixed,{\cf1  }{\cf6 120.0f});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupColumn({\cf15 "}{\cf15 reverse DNS}{\cf15 "},{\cf1  }ImGuiTableColumnFlags_WidthFixed,{\cf1  }{\cf6 320.0f});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupColumn({\cf15 "}{\cf15 ISP}{\cf15 "},{\cf1  }ImGuiTableColumnFlags_WidthFixed,{\cf1  }{\cf6 300.0f});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupColumn({\cf15 "}{\cf15 Latitude}{\cf15 "},{\cf1  }ImGuiTableColumnFlags_WidthFixed,{\cf1  }{\cf6 110.0f});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupColumn({\cf15 "}{\cf15 Longitude}{\cf15 "},{\cf1  }ImGuiTableColumnFlags_WidthFixed,{\cf1  }{\cf6 110.0f});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetupColumn({\cf15 "}{\cf15 Timezone}{\cf15 "},{\cf1  }ImGuiTableColumnFlags_WidthFixed,{\cf1  }{\cf6 180.0f});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableHeadersRow();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }row{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }row{\cf1  }{\cf6 <}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}locs.size();{\cf1  }row{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableNextRow();{\cf1 \par
}{\cf1 			}{\cf4\b auto}{\cf1  }j{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}locs.at(row);{\cf1 \par
}{\cf1 \par
}{\cf1 			}\{{\cf1 \par
}{\cf1 				}{\cf4\b auto}{\cf1  }data{\cf1  }{\cf6 =}{\cf1  }j.at({\cf15 "}{\cf15 data}{\cf15 "}).at({\cf15 "}{\cf15 geo}{\cf15 "});{\cf1 \par
}{\cf1 				}std{\cf6 :}{\cf6 :}lock_guard{\cf6 <}std{\cf6 :}{\cf6 :}mutex{\cf6 >}{\cf1  }guard({\cf4\b Data}{\cf6 :}{\cf6 :}geoGuard);{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 0});{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(std{\cf6 :}{\cf6 :}to_string(row).c_str());{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 1});{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(data.at({\cf15 "}{\cf15 ip}{\cf15 "}).dump({\cf6 0}).c_str());{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 2});{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(data.at({\cf15 "}{\cf15 rdns}{\cf15 "}).dump({\cf6 0}).c_str());{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 3});{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(data.at({\cf15 "}{\cf15 isp}{\cf15 "}).dump({\cf6 0}).c_str());{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 4});{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(data.at({\cf15 "}{\cf15 latitude}{\cf15 "}).dump({\cf6 0}).c_str());{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 5});{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(data.at({\cf15 "}{\cf15 longitude}{\cf15 "}).dump({\cf6 0}).c_str());{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 6});{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(data.at({\cf15 "}{\cf15 timezone}{\cf15 "}).dump({\cf6 0}).c_str());{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndTable();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::showHops}(){\cf1  }\{{\cf1 \par
}{\cf1 	}ImVec2{\cf1  }window_size{\cf1  }{\cf6 =}{\cf1  }{\cf4\b ImGui}{\cf6 :}{\cf6 :}GetContentRegionAvail();{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }xShift{\cf1  }{\cf6 =}{\cf1  }(window_size.x{\cf1  }{\cf6 -}{\cf1  }{\cf6 1024}){\cf1  }{\cf6 *}{\cf1  }{\cf6 0.5f};{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosX(xShift);{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Image(({\cf5 void}{\cf6 *})(intptr_t){\cf4\b GUI}{\cf6 :}{\cf6 :}earthTex,{\cf1  }ImVec2({\cf6 1024},{\cf1  }{\cf6 794}));{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}pair{\cf6 <}{\cf5 double},{\cf1  }{\cf5 double}{\cf6 >}{\cf1  }lastCoords{\cf1  }{\cf6 =}{\cf1  }\{{\cf1  }{\cf6 -1},{\cf1  }{\cf6 -1}{\cf1  }\};{\cf1 \par
}{\cf1 	}ImDrawList{\cf6 *}{\cf1  }draw_list{\cf1  }{\cf6 =}{\cf1  }{\cf4\b ImGui}{\cf6 :}{\cf6 :}GetWindowDrawList();{\cf1 \par
}{\cf1 	}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }r{\cf1  }{\cf6 =}{\cf1  }{\cf6 4};{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }row{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }row{\cf1  }{\cf6 <}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}locs.size();{\cf1  }row{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }j{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}locs.at(row);{\cf1 \par
}{\cf1 		}{\cf5 double}{\cf1  }longitude;{\cf1 \par
}{\cf1 		}{\cf5 double}{\cf1  }latitude;{\cf1 \par
}{\cf1 		}\{{\cf1 \par
}{\cf1 			}{\cf4\b auto}{\cf1  }data{\cf1  }{\cf6 =}{\cf1  }j.at({\cf15 "}{\cf15 data}{\cf15 "}).at({\cf15 "}{\cf15 geo}{\cf15 "});{\cf1 \par
}{\cf1 			}std{\cf6 :}{\cf6 :}scoped_lock{\cf1  }guard({\cf4\b Data}{\cf6 :}{\cf6 :}geoGuard);{\cf1 \par
}{\cf1 			}{\cf4\b auto}{\cf1  }longS{\cf1  }{\cf6 =}{\cf1  }data.at({\cf15 "}{\cf15 longitude}{\cf15 "}).dump({\cf6 0});{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }(longS{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf15 "}{\cf17\b \\"}{\cf17\b \\"}{\cf15 "}{\cf1  }{\cf6 |}{\cf6 |}{\cf1  }longS{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf15 "}{\cf15 null}{\cf15 "}){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b continue};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}longitude{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}stod(longS);{\cf1 \par
}{\cf1 			}{\cf4\b auto}{\cf1  }latS{\cf1  }{\cf6 =}{\cf1  }data.at({\cf15 "}{\cf15 latitude}{\cf15 "}).dump({\cf6 0});{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }(latS{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf15 "}{\cf17\b \\"}{\cf17\b \\"}{\cf15 "}{\cf1  }{\cf6 |}{\cf6 |}{\cf1  }latS{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf15 "}{\cf15 null}{\cf15 "}){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b continue};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}latitude{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}stod(latS);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }[x,{\cf1  }y]{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}mercatorProjection(longitude,{\cf1  }latitude);{\cf1 \par
}{\cf1 \par
}{\cf1 		}ImVec2{\cf1  }cursor_pos{\cf1  }{\cf6 =}{\cf1  }{\cf4\b ImGui}{\cf6 :}{\cf6 :}GetCursorScreenPos();{\cf1 \par
}{\cf1 		}ImVec2{\cf1  }circle_pos{\cf1  }{\cf6 =}{\cf1  }ImVec2(cursor_pos.x{\cf1  }{\cf6 +}{\cf1  }xShift{\cf1  }{\cf6 +}{\cf1  }x{\cf1  }{\cf6 -}{\cf1  }r,{\cf1  }cursor_pos.y{\cf1  }{\cf6 +}{\cf1  }y{\cf1  }{\cf6 -}{\cf1  }{\cf6 794}{\cf1  }{\cf6 -}{\cf1  }r);{\cf1 \par
}{\cf1 		}draw_list{\cf6 -}{\cf6 >}AddCircleFilled(circle_pos,{\cf1  }r,{\cf1  }IM_COL32({\cf6 255},{\cf1  }{\cf6 0},{\cf1  }{\cf6 0},{\cf1  }{\cf6 255}));{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(lastCoords.first{\cf1  }{\cf6 !}{\cf6 =}{\cf1  }{\cf6 -1}){\cf1  }\{{\cf1 \par
}{\cf1 			}draw_list{\cf6 -}{\cf6 >}AddLine(ImVec2(lastCoords.first,{\cf1  }lastCoords.second),{\cf1  }circle_pos,{\cf1  }IM_COL32({\cf6 255},{\cf1  }{\cf6 0},{\cf1  }{\cf6 0},{\cf1  }{\cf6 255}),{\cf1  }r{\cf1  }{\cf6 /}{\cf1  }{\cf6 2});{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}lastCoords.first{\cf1  }{\cf6 =}{\cf1  }circle_pos.x;{\cf1 \par
}{\cf1 		}lastCoords.second{\cf1  }{\cf6 =}{\cf1  }circle_pos.y;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::showGeoTrace}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 adapters}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}OpenPopup({\cf15 "}{\cf15 GeoLoc}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 1280},{\cf1  }{\cf6 720}));{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 0},{\cf1  }{\cf6 0}));{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginPopupModal({\cf15 "}{\cf15 GeoLoc}{\cf15 "},{\cf1  }{\cf4 NULL},{\cf1  }ImGuiWindowFlags_NoResize{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoMove{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoTitleBar)){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText(std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Hopping Map for address \{\}}{\cf15 "},{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}hopAddr).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}geoState{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 1}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 Querying Address...}{\cf15 "});{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}geoState{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 2}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 Processing Replies...}{\cf15 "});{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}geoState{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 3}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 No address could be reached :(}{\cf15 "});{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}geoState{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 4}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 Processing Done}{\cf15 "});{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}geoTable();{\cf1 \par
}{\cf1 		}showHops();{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b GUI}{\cf6 :}{\cf6 :}centerButton({\cf15 "}{\cf15 OK}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }({\cf6 !}{\cf4\b Data}{\cf6 :}{\cf6 :}geoDone){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b Data}{\cf6 :}{\cf6 :}geoAlert{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b Data}{\cf6 :}{\cf6 :}geoLocThread.join();{\cf1 \par
}{\cf1 				}{\cf4\b Data}{\cf6 :}{\cf6 :}showGeoTrace{\cf1  }{\cf6 =}{\cf1  }{\cf6 -1};{\cf1 \par
}{\cf1 				}{\cf4\b Data}{\cf6 :}{\cf6 :}locs.clear();{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}geoAlert){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}OpenPopup({\cf15 "}{\cf15 hotshot}{\cf15 "});{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 600},{\cf1  }{\cf6 500}));{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 640}{\cf1  }{\cf6 -}{\cf1  }{\cf6 300},{\cf1  }{\cf6 360}{\cf1  }{\cf6 -}{\cf1  }{\cf6 250}));{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}BeginPopupModal({\cf15 "}{\cf15 hotshot}{\cf15 "},{\cf1  }{\cf4 NULL},{\cf1  }ImGuiWindowFlags_NoResize{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoMove{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoTitleBar)){\cf1 \par
}{\cf1 			}\{{\cf1 \par
}{\cf1 				}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 you cannot exit just yet}{\cf15 "});{\cf1 \par
}{\cf1 				}{\cf4\b GUI}{\cf6 :}{\cf6 :}centerText({\cf15 "}{\cf15 the data caputring is not yet done}{\cf17\b \\n}{\cf15 "});{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosY({\cf6 350});{\cf1 \par
}{\cf1 				}{\cf4\b if}{\cf1  }({\cf4\b GUI}{\cf6 :}{\cf6 :}centerButton({\cf15 "}{\cf15 OK}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 					}{\cf4\b Data}{\cf6 :}{\cf6 :}geoAlert{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 				}\}{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}EndPopup();{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}End();{\cf1 \par
}{\cf1 	}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 App::render}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b const}{\cf1  }{\cf4\b auto}{\cf1  }upArrow{\cf1  }{\cf6 =}{\cf1  }{\cf4\b ImGui}{\cf6 :}{\cf6 :}GetKeyIndex(ImGuiKey_UpArrow);{\cf1 \par
}{\cf1 	}{\cf4\b const}{\cf1  }{\cf4\b auto}{\cf1  }downArrow{\cf1  }{\cf6 =}{\cf1  }{\cf4\b ImGui}{\cf6 :}{\cf6 :}GetKeyIndex(ImGuiKey_DownArrow);{\cf1 \par
}{\cf1 	}{\cf4\b while}{\cf1  }({\cf6 !}glfwWindowShouldClose({\cf4\b GUI}{\cf6 :}{\cf6 :}window)){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}startFrame();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}pushFont({\cf15 "}{\cf15 regular}{\cf15 "});{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowPos(ImVec2({\cf6 0},{\cf1  }{\cf6 20}));{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetNextWindowSize(ImVec2({\cf6 1280},{\cf1  }{\cf6 360}));{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Begin({\cf15 "}{\cf15 Packet Table Window}{\cf15 "},{\cf1  }{\cf4 NULL},{\cf1  }ImGuiWindowFlags_NoResize{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoMove{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoCollapse{\cf1  }{\cf6 |}{\cf1  }ImGuiWindowFlags_NoTitleBar);{\cf1 \par
}{\cf1 \par
}{\cf1 		}renderCaptureMenuBar();{\cf1 \par
}{\cf1 \par
}{\cf1 		}renderFilterBox();{\cf1 \par
}{\cf1 \par
}{\cf1 		}renderTable();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}showFilterHelp){\cf1  }\{{\cf1 \par
}{\cf1 			}filterHelp();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}selected{\cf1  }{\cf6 !}{\cf6 =}{\cf1  }{\cf6 -1}){\cf1  }\{{\cf1 \par
}{\cf1 			}renderExpandedPacket();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}showStop){\cf1  }\{{\cf1 \par
}{\cf1 			}handleStop();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}showStart{\cf1  }{\cf6 &}{\cf6 &}{\cf1  }{\cf6 !}{\cf4\b Data}{\cf6 :}{\cf6 :}fileAdapter){\cf1  }\{{\cf1 \par
}{\cf1 			}handleStart();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}showStart{\cf1  }{\cf6 &}{\cf6 &}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}fileAdapter){\cf1  }\{{\cf1 \par
}{\cf1 			}handleStartFile();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }({\cf6 !}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCapturing{\cf1  }{\cf6 &}{\cf6 &}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}showSave){\cf1  }\{{\cf1 \par
}{\cf1 			}handleSaveGoing();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}doneCapturing{\cf1  }{\cf6 &}{\cf6 &}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}showSave){\cf1  }\{{\cf1 \par
}{\cf1 			}handleSave();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}showLoad){\cf1  }\{{\cf1 \par
}{\cf1 			}handleLoadCapture();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}showGeoTrace{\cf1  }{\cf6 !}{\cf6 =}{\cf1  }{\cf6 -1}){\cf1  }\{{\cf1 \par
}{\cf1 			}showGeoTrace();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}popFont();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}IsKeyPressed(upArrow)){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}selected{\cf1  }{\cf6 =}{\cf1  }max({\cf4\b Data}{\cf6 :}{\cf6 :}selected{\cf1  }{\cf6 -}{\cf1  }{\cf6 1},{\cf1  }{\cf6 0});{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}IsKeyPressed(downArrow)){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}selected{\cf1  }{\cf6 =}{\cf1  }min({\cf4\b Data}{\cf6 :}{\cf6 :}selected{\cf1  }{\cf6 +}{\cf1  }{\cf6 1},{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}capIdx);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b GUI}{\cf6 :}{\cf6 :}endFrame();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //App.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b App}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }init();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 release}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 adapterScreen}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 captureScreen}();{\cf1 \par
}{\cf1 \par
}{\cf4\b private}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }handleStop();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 handleStart}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 handleStartFile}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 getAdapter}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 render}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderCaptureMenuBar}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderTable}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpandedPacket}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 handleSaveGoing}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 handleSave}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 handleLoadCapture}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 handleLoad}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderAdapterMenuBar}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderFilterBox}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 alertFilter}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 filterHelp}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 showGeoTrace}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 geoTable}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 showHops}();{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //Data.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Data.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <iostream>}{\cf3 \par
}{\cf1 \par
}{\cf2\i // define global static variables needed to manage this program\par
}std{\cf6 :}{\cf6 :}vector{\cf6 <}{\cf4 Packet}{\cf6 *}{\cf6 >}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}captured;{\cf1 \par
}{\cf5 int}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}selected{\cf1  }{\cf6 =}{\cf1  }{\cf6 -1};{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}doneCounting{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}std{\cf6 :}{\cf6 :}array{\cf6 <}{\cf4\b const}{\cf1  }{\cf5 char}{\cf6 *},{\cf1  }{\cf6 30}{\cf6 >}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}quotes{\cf1  }{\cf6 =}{\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Less Cheese = More Cheese}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 A man chooses, a slave obeys}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 *sigh* i guess you are my little pugchamp}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 compiled with <3}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 where are my pants?}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Spain but the S is silent}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 now with 5 percent more Bob Ross!}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 I hardly know 'er!}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 How you BEAN?}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 You're breathtaking!}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 The embodiment of page 2 of google search results}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Love is like frying food shirtless, you never know when it's going to hurt}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Water is just hydrogen soup}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Hey, got any grapes?}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 'Hello there, old sport!' - an aubergine colored individual}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 I don't get why circles exist. They're pointless.}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 I'm afraid for the calendar. Its days are numbered.}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 If the USA is so great why did they make a USB?}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Why are ducks always in a fowl mood?}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 it is Wednesday my dudes}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Approved by official code bros}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 'If it compiles, it's good; if it boots up, it's perfect.' - Linus Torvalds, Finnish Software Chad}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 It Just Works.}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 gotta love it when asynchronization works 60 percent out of 5 percent of the time}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 The numbers Mason! What do they mean?!?!}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 funny quote go brrrrr}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Built by a part time silly sandwich}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 do NOT tap the glass}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 The C++ giveth, and the C++ taketh away}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 this quote has been left as an exercise for the reader}{\cf15 "}{\cf1 \par
}\};{\cf1 \par
}{\cf5 long}{\cf1  }{\cf5 double}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}epochStart;{\cf1 \par
}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}{\cf5 int},{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}dscpMap;{\cf1 \par
}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}{\cf5 int},{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}ecnMap;{\cf1 \par
}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}{\cf5 int},{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}hopMap;{\cf1 \par
}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}{\cf5 unsigned}{\cf1  }{\cf5 char},{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}icmpv6Types;{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}doneCapturing{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf5 long}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}capIdx{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}showStop{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}showStart{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}doneLoading{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}showSave{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}showLoad{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}showFilterHelp{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}std{\cf6 :}{\cf6 :}jthread{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}captureThread;{\cf1 \par
}{\cf4 pcap_t}{\cf6 *}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}chosenAdapter;{\cf1 \par
}std{\cf6 :}{\cf6 :}mutex{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}guard;{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}fileAdapter;{\cf1 \par
}std{\cf6 :}{\cf6 :}array{\cf6 <}{\cf4\b const}{\cf1  }{\cf5 char}{\cf6 *},{\cf1  }{\cf6 10}{\cf6 >}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}TCPFlags{\cf1  }{\cf6 =}{\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 RES}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 ACN}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 CWR}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 ECE}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 URG}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 ACK}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 PSH}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 RST}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 SYN}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 FIN}{\cf15 "}{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf5 char}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}filterTxt[{\cf6 1024}];{\cf1 \par
}std{\cf6 :}{\cf6 :}set{\cf6 <}std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}filterKeys{\cf1  }{\cf6 =}{\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 ip}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 sport}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 dport}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 saddr}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 daddr}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 proto}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 num}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 len}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 proc}{\cf15 "}{\cf1 \par
}\};{\cf1 \par
}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}filter;{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}filterIssue;{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}showBadFilter;{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}newFilter{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf5 long}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}displayed{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf5 long}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}showGeoTrace{\cf1  }{\cf6 =}{\cf1  }{\cf6 -1};{\cf1 \par
}std{\cf6 :}{\cf6 :}vector{\cf6 <}json{\cf6 >}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}locs;{\cf1 \par
}std{\cf6 :}{\cf6 :}jthread{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}geoLocThread;{\cf1 \par
}std{\cf6 :}{\cf6 :}mutex{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}geoGuard;{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}geoDone;{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}geoAlert;{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}geoTerminate{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf5 int}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}geoState{\cf1  }{\cf6 =}{\cf1  }{\cf6 -1};{\cf1 \par
}std{\cf6 :}{\cf6 :}array{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }{\cf6 26}{\cf6 >}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}arpCodes\{{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Reserved}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 REQUEST}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 REPLY}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 request Reverse}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 reply Reverse}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 DRARP-Request}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 DRARP-Reply}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 DRARP-Error}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 InARP-Request}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 InARP-Reply}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 ARP-NAK}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MARS-Request}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MARS-Multi}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MARS-MServ}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MARS-Join}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MARS-Leave}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MARS-NAK}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MARS-Unserv}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MARS-SJoin}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MARS-SLeave}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MARS-Grouplist-Request}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MARS-Grouplist-Reply}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MARS-Redirect-Map}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MAPOS-UNARP}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 OP_EXP1}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 OP_EXP2}{\cf15 "},{\cf1 \par
}\};{\cf1 \par
}std{\cf6 :}{\cf6 :}array{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }{\cf6 39}{\cf6 >}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}arpHard\{{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Reserved}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Ethernet}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Experimental Ethernet}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Amateur Radio AX.25}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Proteon ProNET Token Ring}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Chaos}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 IEEE 802 Networks}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 ARCNET}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Hyperchannel}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Lanstar}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Autonet Short Address}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 LocalTalk}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 LocalNet (IBM PCNet or SYTEK LocalNET)}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Ultra link}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 SMDS}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Frame Relay}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Asynchronous Transmission Mode (ATM)}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 HDLC}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Fibre Channel}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Asynchronous Transmission Mode (ATM)}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Serial Line}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Asynchronous Transmission Mode (ATM)}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MIL-STD-188-220}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Metricom}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 IEEE 1394.1995}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 MAPOS}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Twinaxial}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 EUI-64}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 HIPARP}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 IP and ARP over ISO 7816-3}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 ARPSec}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 IPsec tunnel}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 InfiniBand (TM)}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 TIA-102 Project 25 Common Air Interface (CAI)}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Wiegand Interface}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Pure IP}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 HW_EXP1}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 HFI}{\cf15 "},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 Unified Bus (UB)}{\cf15 "},{\cf1 \par
}\};{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}hopAddr;{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}array{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }{\cf6 44}{\cf6 >}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}icmpTypes{\cf1  }{\cf6 =}{\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Echo (ping) Reply}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Unassigned}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Unassigned}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Destination Unreachable}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Source Quench (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Redirect}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Alternate Host Address (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Unassigned}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Echo (ping) Request}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Router Advertisement}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Router Solicitation}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Time-to-live Exceeded}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Parameter Problem}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Timestamp}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Timestamp Reply}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Information Request (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Information Reply (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Address Mask Request (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Reserved (for Security)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Reserved (for Robustness Experiment)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Reserved (for Robustness Experiment)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Reserved (for Robustness Experiment)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Reserved (for Robustness Experiment)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Reserved (for Robustness Experiment)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Reserved (for Robustness Experiment)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Reserved (for Robustness Experiment)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Reserved (for Robustness Experiment)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Reserved (for Robustness Experiment)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Reserved (for Robustness Experiment)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Reserved (for Robustness Experiment)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Traceroute (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Datagram Conversion Error (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Mobile Host Redirect (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 IPv6 Where-Are-You (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 IPv6 I-Am-Here (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Mobile Registration Request (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Mobile Registration Reply (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Domain Name Request (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Domain Name Reply (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 SKIP (Deprecated)}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Photuris}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 ICMP messages utilized by experimental mobility protocols such as Seamoby}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Extended Echo Request}{\cf15 "},{\cf1 \par
}{\cf1 	}{\cf15 "}{\cf15 Extended Echo Reply}{\cf15 "},{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Data::init}(){\cf1  }\{{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 0}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Default}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 10}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 AF11}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 12}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 AF12}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 14}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 AF13}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 18}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 AF21}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 20}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 AF22}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 22}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 AF23}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 26}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 AF31}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 28}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 AF32}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 30}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 AF33}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 34}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 AF41}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 36}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 AF42}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 38}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 AF43}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 8}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 CS1}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 16}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 CS2}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 24}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 CS3}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 32}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 CS4}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 40}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 CS5}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 48}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 CS6}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 56}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 CS7}{\cf15 "};{\cf1 \par
}{\cf1 	}dscpMap[{\cf6 46}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 EF}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 	}ecnMap[{\cf6 0}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Not-ECT}{\cf15 "};{\cf1 \par
}{\cf1 	}ecnMap[{\cf6 1}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 ECT(1)}{\cf15 "};{\cf1 \par
}{\cf1 	}ecnMap[{\cf6 2}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 ECT(0)}{\cf15 "};{\cf1 \par
}{\cf1 	}ecnMap[{\cf6 3}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 CE}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x00}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Pad1}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x01}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 PadN}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0xC2}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Jumbo Payload}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x23}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Tunnel Encapsulation Limit}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x63}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Tunnel Encapsulation Limit}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x04}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Tunnel Encapsulation Limit}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x05}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Router Alert}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x26}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Quick-Start}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x07}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 CALIPSO}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x08}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Home Address}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0xC9}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Home Address}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x8A}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 ILNP Nonce}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x8B}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 ILNP Nonce}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x8C}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Deprecated}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x4D}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Deprecated}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x6D}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 MPL Option}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0xEE}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Performance and Diagnostic Metrics (PDM)}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x0F}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Performance and Diagnostic Metrics (PDM)}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x30}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Minimum Path MTU Hop-by-Hop Option}{\cf15 "};{\cf1 \par
}{\cf1 	}hopMap[{\cf6 0x12}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 AltMark}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 1}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Destination Unreachable}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 2}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Packet Too Big}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 3}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Time Exceeded}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 4}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Parameter Problem}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 127}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Reserved for expansion of ICMPv6 error messages}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 128}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Echo Request}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 129}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Echo Reply}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 130}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Multicast Listener Query}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 131}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Multicast Listener Report}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 132}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Multicast Listener Done}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 133}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Router Solicitation}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 134}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Router Advertisement}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 135}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Neighbor Solicitation}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 136}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Neighbor Advertisement}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 137}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Redirect Message}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 138}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Router Renumbering}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 139}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 ICMP Node Information Query}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 140}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 ICMP Node Information Response}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 141}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Inverse Neighbor Discovery Solicitation Message}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 142}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Inverse Neighbor Discovery Advertisement Message}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 143}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Version 2 Multicast Listener Report}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 144}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Home Agent Address Discovery Request Message}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 145}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Home Agent Address Discovery Reply Message}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 146}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Mobile Prefix Solicitation}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 147}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Mobile Prefix Advertisement}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 148}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Certification Path Solicitation Message}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 149}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Certification Path Advertisement Message}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 150}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 ICMP messages utilized by experimental mobility protocols such as Seamoby}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 151}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Multicast Router Advertisement}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 152}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Multicast Router Solicitation}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 153}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Multicast Router Termination}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 154}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 FMIPv6 Messages}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 155}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 RPL Control Message}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 156}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 ILNPv6 Locator Update Message}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 157}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Duplicate Address Request}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 158}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Duplicate Address Confirmation}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 159}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 MPL Control Message}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 160}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Extended Echo Request}{\cf15 "};{\cf1 \par
}{\cf1 	}icmpv6Types[{\cf6 161}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Extended Echo Reply}{\cf15 "};{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Data::addPacket}({\cf4 Packet}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}captured.push_back(p);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Data::processFilter}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf2\i // set defaults to prevent filter retention\par
}{\cf1 	}filter[{\cf15 "}{\cf15 ip}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 "};{\cf1 \par
}{\cf1 	}filter[{\cf15 "}{\cf15 sport}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 "};{\cf1 \par
}{\cf1 	}filter[{\cf15 "}{\cf15 dport}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 "};{\cf1 \par
}{\cf1 	}filter[{\cf15 "}{\cf15 saddr}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 "};{\cf1 \par
}{\cf1 	}filter[{\cf15 "}{\cf15 daddr}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 "};{\cf1 \par
}{\cf1 	}filter[{\cf15 "}{\cf15 proto}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 "};{\cf1 \par
}{\cf1 	}filter[{\cf15 "}{\cf15 num}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 "};{\cf1 \par
}{\cf1 	}filter[{\cf15 "}{\cf15 len}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 "};{\cf1 \par
}{\cf1 	}filter[{\cf15 "}{\cf15 proc}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf2\i // we need to refilter every packet\par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}newFilter{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // filter is empty\par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}filterTxt[{\cf6 0}]{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf15 '}{\cf15 \\0}{\cf15 '}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b return};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}vector{\cf6 <}std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }args;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss(filterTxt);{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }current;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}size_t{\cf1  }first,{\cf1  }last;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // for every comma seperated expression\par
}{\cf1 	}{\cf4\b while}{\cf1  }(std{\cf6 :}{\cf6 :}getline(ss,{\cf1  }current,{\cf1  }{\cf15 '}{\cf15 ,}{\cf15 '})){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf2\i // find where the two values seperate\par
}{\cf1 		}{\cf4\b auto}{\cf1  }eq{\cf1  }{\cf6 =}{\cf1  }current.find_first_of({\cf15 '}{\cf15 =}{\cf15 '});{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(eq{\cf1  }{\cf6 !}{\cf6 =}{\cf1  }current.find_last_of({\cf15 '}{\cf15 =}{\cf15 '})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf2\i // there is more than one =, invalid input\par
}{\cf1 			}showBadFilter{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}filterIssue{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 \{\} is not a valid filter}{\cf15 "},{\cf1  }current);{\cf1 \par
}{\cf1 			}{\cf2\i // show no packet\par
}{\cf1 			}filter[{\cf15 "}{\cf15 num}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 -1}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b return};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf2\i // substring out the key\par
}{\cf1 		}{\cf4\b auto}{\cf1  }key{\cf1  }{\cf6 =}{\cf1  }current.substr({\cf6 0},{\cf1  }eq);{\cf1 \par
}{\cf1 		}first{\cf1  }{\cf6 =}{\cf1  }key.find_first_not_of({\cf15 '}{\cf15  }{\cf15 '});{\cf1 \par
}{\cf1 		}last{\cf1  }{\cf6 =}{\cf1  }key.find_last_not_of({\cf15 '}{\cf15  }{\cf15 '});{\cf1 \par
}{\cf1 		}{\cf2\i // removing trailing and leading spaces\par
}{\cf1 		}key{\cf1  }{\cf6 =}{\cf1  }key.substr(first,{\cf1  }last{\cf1  }{\cf6 -}{\cf1  }first{\cf1  }{\cf6 +}{\cf1  }{\cf6 1});{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf2\i // same thing for the value\par
}{\cf1 		}{\cf4\b auto}{\cf1  }value{\cf1  }{\cf6 =}{\cf1  }current.substr(eq{\cf1  }{\cf6 +}{\cf1  }{\cf6 1});{\cf1 \par
}{\cf1 		}first{\cf1  }{\cf6 =}{\cf1  }value.find_first_not_of({\cf15 '}{\cf15  }{\cf15 '});{\cf1 \par
}{\cf1 		}last{\cf1  }{\cf6 =}{\cf1  }value.find_last_not_of({\cf15 '}{\cf15  }{\cf15 '});{\cf1 \par
}{\cf1 		}value{\cf1  }{\cf6 =}{\cf1  }value.substr(first,{\cf1  }last{\cf1  }{\cf6 -}{\cf1  }first{\cf1  }{\cf6 +}{\cf1  }{\cf6 1});{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf2\i // lowercase both the key and the value\par
}{\cf1 		}std{\cf6 :}{\cf6 :}ranges{\cf6 :}{\cf6 :}transform(key.begin(),{\cf1  }key.end(),{\cf1  }key.begin(),{\cf1 \par
}{\cf1 			}[]({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }c){\cf1  }\{{\cf1  }{\cf4\b return}{\cf1  }std{\cf6 :}{\cf6 :}tolower(c);{\cf1  }\});{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}ranges{\cf6 :}{\cf6 :}transform(value.begin(),{\cf1  }value.end(),{\cf1  }value.begin(),{\cf1 \par
}{\cf1 			}[]({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }c){\cf1  }\{{\cf1  }{\cf4\b return}{\cf1  }std{\cf6 :}{\cf6 :}tolower(c);{\cf1  }\});{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf2\i // add them as arguments\par
}{\cf1 		}args.push_back(key);{\cf1 \par
}{\cf1 		}args.push_back(value);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(args.size(){\cf1  }{\cf6 %}{\cf1  }{\cf6 2}{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 1}){\cf1  }\{{\cf1 \par
}{\cf1 		}showBadFilter{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 		}filterIssue{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 the number of arguments isn't even.}{\cf15 "};{\cf1 \par
}{\cf1 		}filter[{\cf15 "}{\cf15 num}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 -1}{\cf15 "};{\cf1 \par
}{\cf1 		}{\cf4\b return};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }idx{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }idx{\cf1  }{\cf6 <}{\cf1  }args.size();{\cf1  }idx{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }{\cf6 2}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }key{\cf1  }{\cf6 =}{\cf1  }args.at(idx);{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }value{\cf1  }{\cf6 =}{\cf1  }args.at(idx{\cf1  }{\cf6 +}{\cf1  }{\cf6 1});{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf2\i // check if a valid filter was given\par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf6 !}filterKeys.contains(key)){\cf1  }\{{\cf1 \par
}{\cf1 			}showBadFilter{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}filterIssue{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 '\{\}' isn't a valid filter flag.}{\cf15 "},{\cf1  }key);{\cf1 \par
}{\cf1 			}filter[{\cf15 "}{\cf15 num}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 -1}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b return};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}filter[key]{\cf1  }{\cf6 =}{\cf1  }value;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}pair{\cf6 <}{\cf5 double},{\cf1  }{\cf5 double}{\cf6 >}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}mercatorProjection({\cf5 double}{\cf1  }longitude,{\cf1  }{\cf5 double}{\cf1  }latitude){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b constexpr}{\cf1  }{\cf5 double}{\cf1  }mapWidth{\cf1  }{\cf6 =}{\cf1  }{\cf6 1024};{\cf1 \par
}{\cf1 	}{\cf4\b constexpr}{\cf1  }{\cf5 double}{\cf1  }mapHeight{\cf1  }{\cf6 =}{\cf1  }{\cf6 794};{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 double}{\cf1  }PI{\cf1  }{\cf6 =}{\cf1  }{\cf6 2}{\cf1  }{\cf6 *}{\cf1  }std{\cf6 :}{\cf6 :}acos({\cf6 0});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // get x value\par
}{\cf1 	}{\cf5 double}{\cf1  }x{\cf1  }{\cf6 =}{\cf1  }(longitude{\cf1  }{\cf6 +}{\cf1  }{\cf6 180}){\cf1  }{\cf6 *}{\cf1  }(mapWidth{\cf1  }{\cf6 /}{\cf1  }{\cf6 360});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // convert from degrees to radians\par
}{\cf1 	}{\cf5 double}{\cf1  }latRad{\cf1  }{\cf6 =}{\cf1  }latitude{\cf1  }{\cf6 *}{\cf1  }(PI{\cf1  }{\cf6 /}{\cf1  }{\cf6 180});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // get y value\par
}{\cf1 	}{\cf5 double}{\cf1  }mercN{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}log(std{\cf6 :}{\cf6 :}tan((PI{\cf1  }{\cf6 /}{\cf1  }{\cf6 4}){\cf1  }{\cf6 +}{\cf1  }(latRad{\cf1  }{\cf6 /}{\cf1  }{\cf6 2})));{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 double}{\cf1  }y{\cf1  }{\cf6 =}{\cf1  }(mapHeight{\cf1  }{\cf6 /}{\cf1  }{\cf6 2}){\cf1  }{\cf6 -}{\cf1  }(mapWidth{\cf1  }{\cf6 *}{\cf1  }mercN{\cf1  }{\cf6 /}{\cf1  }({\cf6 2}{\cf1  }{\cf6 *}{\cf1  }PI));{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // return results as pair bc i do not want to have TWO of this function\par
}{\cf1 	}{\cf4\b return}{\cf1  }\{{\cf1  }x,{\cf1  }y{\cf1  }\};{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //Data.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../Networks/Packets/Types/Eth/Packet.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <vector>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <thread>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <mutex>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <set>}{\cf3 \par
}{\cf1 \par
}{\cf2\i // please no more global variables please i beg thee\par
}{\cf4\b class}{\cf1  }{\cf8\b Data}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf2\i // a bunch of global variables needed for the program's threads to communicate\par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}vector{\cf6 <}{\cf4 Packet}{\cf6 *}{\cf6 >}{\cf1               }captured;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 int}{\cf1                                }selected;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1                               }doneCounting;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}array{\cf6 <}{\cf4\b const}{\cf1  }{\cf5 char}{\cf6 *},{\cf1  }{\cf6 30}{\cf6 >}{\cf1        }quotes;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 long}{\cf1  }{\cf5 double}{\cf1                        }epochStart;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}{\cf5 int},{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }dscpMap;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}{\cf5 int},{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }ecnMap;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}{\cf5 int},{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }hopMap;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}{\cf5 unsigned}{\cf1  }{\cf5 char},{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }icmpv6Types;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }doneCapturing;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 long}{\cf1  }capIdx;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }showStop;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }showStart;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}jthread{\cf1  }captureThread;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf4 pcap_t}{\cf6 *}{\cf1  }chosenAdapter;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 int}{\cf1  }selectExpand;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}mutex{\cf1  }guard;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }fileAdapter;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}array{\cf6 <}{\cf4\b const}{\cf1  }{\cf5 char}{\cf6 *},{\cf1  }{\cf6 10}{\cf6 >}{\cf1  }TCPFlags;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }doneLoading;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }showSave;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }showLoad;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 char}{\cf1  }filterTxt[{\cf6 1024}];{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }showBadFilter;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }filterIssue;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}set{\cf6 <}std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }filterKeys;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }filter;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }newFilter;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }showFilterHelp;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 long}{\cf1  }displayed;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 long}{\cf1  }showGeoTrace;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}vector{\cf6 <}json{\cf6 >}{\cf1  }locs;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}jthread{\cf1  }geoLocThread;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}mutex{\cf1  }geoGuard;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }geoDone;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }geoAlert;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }geoTerminate;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 int}{\cf1  }geoState;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}array{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }{\cf6 26}{\cf6 >}{\cf1  }arpCodes;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}array{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }{\cf6 39}{\cf6 >}{\cf1  }arpHard;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }hopAddr;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}array{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }{\cf6 44}{\cf6 >}{\cf1  }icmpTypes;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 addPacket}({\cf4 Packet}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 init}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 processFilter}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}pair{\cf6 <}{\cf5 double},{\cf1  }{\cf5 double}{\cf6 >}{\cf1  }mercatorProjection({\cf5 double}{\cf1  }longitude,{\cf1  }{\cf5 double}{\cf1  }latitude);{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //Logger.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Logger.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <iostream>}{\cf3 \par
}{\cf1 \par
}{\cf2\i // average logger class\par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}ofstream{\cf1  }{\cf4\b Logger}{\cf6 :}{\cf6 :}m_file;{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Logger::init}(){\cf1  }\{{\cf1 \par
}{\cf1 	}m_file{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}ofstream({\cf15 "}{\cf15 log.txt}{\cf15 "});{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Logger::log}(std{\cf6 :}{\cf6 :}string{\cf1  }str){\cf1  }\{{\cf1 \par
}{\cf1 	}m_file{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }str{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}endl;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Logger::release}(){\cf1  }\{{\cf1 \par
}{\cf1 	}m_file.close();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //Logger.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <fstream>}{\cf3 \par
}{\cf1 \par
}{\cf2\i /// <summary>\par
}{\cf2\i /// Static logging class\par
}{\cf2\i /// </summary>\par
}{\cf4\b class}{\cf1  }{\cf8\b Logger}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf2\i // club pinguin is kil\par
}{\cf1 	}{\cf2\i // no\par
}{\cf1 	}{\cf4\b Logger}(){\cf1  }{\cf6 =}{\cf1  }{\cf4\b delete};{\cf1 \par
}{\cf1 	}{\cf2\i /// <summary>\par
}{\cf1 	}{\cf2\i /// init the logger\par
}{\cf1 	}{\cf2\i /// </summary>\par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 init}();{\cf1 \par
}{\cf1 	}{\cf2\i /// <summary>\par
}{\cf1 	}{\cf2\i /// log the string to the file and print it on the console for debugging\par
}{\cf1 	}{\cf2\i /// </summary>\par
}{\cf1 	}{\cf2\i /// <param name="str">- the string to log</param>\par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 log}(std{\cf6 :}{\cf6 :}string{\cf1  }str);{\cf1 \par
}{\cf1 	}{\cf2\i /// <summary>\par
}{\cf1 	}{\cf2\i /// free the deugger and release the log file\par
}{\cf1 	}{\cf2\i /// </summary>\par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 release}();{\cf1 \par
}{\cf4\b private}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf2\i /// <summary>\par
}{\cf1 	}{\cf2\i ///\par
}{\cf1 	}{\cf2\i /// </summary>\par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}ofstream{\cf1  }m_file;{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf1 \par
}{\cf2\i //MacroSettings.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf2\i // file used to modify the behvior of the program easily\par
}{\cf2\i // used for debug\par
}{\cf2\i // would get deleted, but compiler preprocessors are optimized away at compilation anyway\par
}{\cf1 \par
}{\cf3 #}{\cf3 define ENABLE_IN_RELEASE 0}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 ifdef NDEBUG}{\cf3 \par
}{\cf3 #}{\cf3 if ENABLE_IN_RELEASE}{\cf3 \par
}{\cf3 #}{\cf3 define FEATURES_ENABLED 1}{\cf3 \par
}{\cf3 #}{\cf3 else}{\cf3 \par
}{\cf3 #}{\cf3 define FEATURES_ENABLED 0}{\cf3 \par
}{\cf3 #}{\cf3 endif}{\cf3 \par
}{\cf3 #}{\cf3 else}{\cf3 \par
}{\cf3 #}{\cf3 define FEATURES_ENABLED 1}{\cf3 \par
}{\cf3 #}{\cf3 endif}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 if FEATURES_ENABLED}{\cf3 \par
}{\cf2\i //#define CAPTURE_LIVE\par
}{\cf2\i //#define CAPTURE_SAMPLES\par
}{\cf2\i //#define CAPTURE_V6\par
}{\cf2\i //#define CAPTURE_ICMPV6\par
}{\cf3 #}{\cf3 endif}{\cf3 \par
}{\cf1 \par
}{\cf1 \par
}{\cf2\i //GUI.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "GUI.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "ImageLoader.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <imgui_internal.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <iostream>}{\cf3 \par
}{\cf1 \par
}GLFWwindow{\cf6 *}{\cf1  }{\cf4\b GUI}{\cf6 :}{\cf6 :}window;{\cf1 \par
}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }ImFont{\cf6 *}{\cf6 >}{\cf1  }{\cf4\b GUI}{\cf6 :}{\cf6 :}fonts;{\cf1 \par
}GLuint{\cf1  }{\cf4\b GUI}{\cf6 :}{\cf6 :}earthTex;{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 GUI::init}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf6 !}glfwInit()){\cf1 \par
}{\cf1 		}exit({\cf6 -1});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // make the window non resizable\par
}{\cf1 	}glfwWindowHint(GLFW_RESIZABLE,{\cf1  }GLFW_FALSE);{\cf1 \par
}{\cf1 \par
}{\cf1 	}window{\cf1  }{\cf6 =}{\cf1  }glfwCreateWindow({\cf6 1280},{\cf1  }{\cf6 720},{\cf1  }{\cf15 "}{\cf15 RustyDolphin}{\cf15 "},{\cf1  }{\cf4 NULL},{\cf1  }{\cf4 NULL});{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf6 !}window){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}glfwTerminate();{\cf1 \par
}{\cf1 		}exit({\cf6 -1});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}glfwMakeContextCurrent(window);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // load and set the icon image\par
}{\cf1 	}GLFWimage{\cf1  }images[{\cf6 1}]\{\};{\cf1 \par
}{\cf1 	}images[{\cf6 0}].pixels{\cf1  }{\cf6 =}{\cf1  }stbi_load({\cf15 "}{\cf15 deps/assets/icon.png}{\cf15 "},{\cf1  }{\cf6 &}images[{\cf6 0}].width,{\cf1  }{\cf6 &}images[{\cf6 0}].height,{\cf1  }{\cf4\b nullptr},{\cf1  }{\cf6 4});{\cf1 \par
}{\cf1 	}glfwSetWindowIcon(window,{\cf1  }{\cf6 1},{\cf1  }images);{\cf1 \par
}{\cf1 	}stbi_image_free(images[{\cf6 0}].pixels);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // ImGui initialization\par
}{\cf1 	}IMGUI_CHECKVERSION();{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}CreateContext();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // dark mode fr fr im just like that og\par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}StyleColorsDark();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // init imgui for opengl\par
}{\cf1 	}ImGui_ImplGlfw_InitForOpenGL(window,{\cf1  }{\cf4 true});{\cf1 \par
}{\cf1 	}ImGui_ImplOpenGL3_Init();{\cf1 \par
}{\cf1 \par
}{\cf1 	}ImGuiIO{\cf6 &}{\cf1  }io{\cf1  }{\cf6 =}{\cf1  }{\cf4\b ImGui}{\cf6 :}{\cf6 :}GetIO();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // create le fonts\par
}{\cf1 	}fonts.insert(\{{\cf1  }{\cf15 "}{\cf15 title}{\cf15 "},{\cf1  }io.Fonts{\cf6 -}{\cf6 >}AddFontFromFileTTF({\cf15 "}{\cf15 deps/fonts/arial.ttf}{\cf15 "},{\cf1  }{\cf6 60}){\cf1  }\});{\cf1 \par
}{\cf1 	}fonts.insert(\{{\cf1  }{\cf15 "}{\cf15 quote}{\cf15 "},{\cf1  }io.Fonts{\cf6 -}{\cf6 >}AddFontFromFileTTF({\cf15 "}{\cf15 deps/fonts/arial.ttf}{\cf15 "},{\cf1  }{\cf6 25}){\cf1  }\});{\cf1 \par
}{\cf1 	}fonts.insert(\{{\cf1  }{\cf15 "}{\cf15 adapters}{\cf15 "},{\cf1  }io.Fonts{\cf6 -}{\cf6 >}AddFontFromFileTTF({\cf15 "}{\cf15 deps/fonts/arial.ttf}{\cf15 "},{\cf1  }{\cf6 30}){\cf1  }\});{\cf1 \par
}{\cf1 	}fonts.insert(\{{\cf1  }{\cf15 "}{\cf15 regular}{\cf15 "},{\cf1  }io.Fonts{\cf6 -}{\cf6 >}AddFontFromFileTTF({\cf15 "}{\cf15 deps/fonts/arial.ttf}{\cf15 "},{\cf1  }{\cf6 16}){\cf1  }\});{\cf1 \par
}{\cf1 	}fonts.insert(\{{\cf1  }{\cf15 "}{\cf15 hexView}{\cf15 "},{\cf1  }io.Fonts{\cf6 -}{\cf6 >}AddFontFromFileTTF({\cf15 "}{\cf15 deps/fonts/consola.ttf}{\cf15 "},{\cf1  }{\cf6 16}){\cf1  }\});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // build the font altas\par
}{\cf1 	}io.Fonts{\cf6 -}{\cf6 >}Build();{\cf1 \par
}{\cf1 \par
}{\cf1 	}glfwSwapInterval({\cf6 1});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // set button hovered colors (like on the table)\par
}{\cf1 	}ImGuiStyle{\cf6 &}{\cf1  }style{\cf1  }{\cf6 =}{\cf1  }{\cf4\b ImGui}{\cf6 :}{\cf6 :}GetStyle();{\cf1 \par
}{\cf1 	}style.Colors[ImGuiCol_Button]{\cf1  }{\cf6 =}{\cf1  }ImVec4({\cf6 0.0f},{\cf1  }{\cf6 0.0f},{\cf1  }{\cf6 0.0f},{\cf1  }{\cf6 0.0f});{\cf1 \par
}{\cf1 	}style.Colors[ImGuiCol_ButtonHovered]{\cf1  }{\cf6 =}{\cf1  }ImVec4({\cf6 0.5f},{\cf1  }{\cf6 0.5f},{\cf1  }{\cf6 0.5f},{\cf1  }{\cf6 0.5f});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // load the earth image we need for the hopping map\par
}{\cf1 	}images[{\cf6 0}].pixels{\cf1  }{\cf6 =}{\cf1  }stbi_load({\cf15 "}{\cf15 deps/assets/earth.jpeg}{\cf15 "},{\cf1  }{\cf6 &}images[{\cf6 0}].width,{\cf1  }{\cf6 &}images[{\cf6 0}].height,{\cf1  }{\cf4\b nullptr},{\cf1  }{\cf6 4});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // bind the earth image to a texture we can render\par
}{\cf1 	}glGenTextures({\cf6 1},{\cf1  }{\cf6 &}earthTex);{\cf1 \par
}{\cf1 	}glBindTexture(GL_TEXTURE_2D,{\cf1  }earthTex);{\cf1 \par
}{\cf1 	}glTexParameteri(GL_TEXTURE_2D,{\cf1  }GL_TEXTURE_MIN_FILTER,{\cf1  }GL_LINEAR);{\cf1 \par
}{\cf1 	}glTexImage2D(GL_TEXTURE_2D,{\cf1  }{\cf6 0},{\cf1  }GL_RGBA,{\cf1  }images[{\cf6 0}].width,{\cf1  }images[{\cf6 0}].height,{\cf1  }{\cf6 0},{\cf1  }GL_RGBA,{\cf1  }GL_UNSIGNED_BYTE,{\cf1  }images[{\cf6 0}].pixels);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 GUI::release}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf2\i // clean up clean up\par
}{\cf1 	}ImGui_ImplOpenGL3_Shutdown();{\cf1 \par
}{\cf1 	}ImGui_ImplGlfw_Shutdown();{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}DestroyContext();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // it always comes back\par
}{\cf1 	}glfwTerminate();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i // two wrapper functions to make using fonts a little easier and consistent\par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 GUI::pushFont}(std{\cf6 :}{\cf6 :}string{\cf1  }name){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}PushFont(fonts.at(name));{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 GUI::popFont}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}PopFont();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 GUI::centerText}({\cf4\b const}{\cf1  }{\cf5 char}{\cf6 *}{\cf1  }text){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }windowWidth{\cf1  }{\cf6 =}{\cf1  }{\cf4\b ImGui}{\cf6 :}{\cf6 :}GetWindowSize().x;{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }textWidth{\cf1  }{\cf6 =}{\cf1  }{\cf4\b ImGui}{\cf6 :}{\cf6 :}CalcTextSize(text).x;{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosX((windowWidth{\cf1  }{\cf6 -}{\cf1  }textWidth){\cf1  }{\cf6 *}{\cf1  }{\cf6 0.5f});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(text);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf8 GUI::centerButton}({\cf4\b const}{\cf1  }{\cf5 char}{\cf6 *}{\cf1  }text){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }windowWidth{\cf1  }{\cf6 =}{\cf1  }{\cf4\b ImGui}{\cf6 :}{\cf6 :}GetWindowSize().x;{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }textWidth{\cf1  }{\cf6 =}{\cf1  }{\cf4\b ImGui}{\cf6 :}{\cf6 :}CalcTextSize(text).x;{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}SetCursorPosX((windowWidth{\cf1  }{\cf6 -}{\cf1  }textWidth){\cf1  }{\cf6 *}{\cf1  }{\cf6 0.5f});{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }{\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(text);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 GUI::startFrame}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf2\i // handle events\par
}{\cf1 	}glfwPollEvents();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // actually start the frame\par
}{\cf1 	}ImGui_ImplOpenGL3_NewFrame();{\cf1 \par
}{\cf1 	}ImGui_ImplGlfw_NewFrame();{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}NewFrame();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 GUI::endFrame}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf2\i // clear the frame\par
}{\cf1 	}glClear(GL_COLOR_BUFFER_BIT);{\cf1 \par
}{\cf1 	}{\cf2\i // render the frame\par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Render();{\cf1 \par
}{\cf1 	}ImGui_ImplOpenGL3_RenderDrawData({\cf4\b ImGui}{\cf6 :}{\cf6 :}GetDrawData());{\cf1 \par
}{\cf1 	}{\cf2\i // swap le buffers\par
}{\cf1 	}glfwSwapBuffers({\cf4\b GUI}{\cf6 :}{\cf6 :}window);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //GUI.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 define IMGUI_USE_STB_SPRINTF}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <GLFW/glfw3.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <imgui.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <imgui_impl_glfw.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <imgui_impl_opengl3.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <map>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <pcap.h>}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b GUI}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }GLFWwindow{\cf6 *}{\cf1  }window;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }GLuint{\cf1  }earthTex;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 init}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 release}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 pushFont}(std{\cf6 :}{\cf6 :}string{\cf1  }name);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 popFont}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 centerText}({\cf4\b const}{\cf1  }{\cf5 char}{\cf6 *}{\cf1  }text);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }{\cf8 centerButton}({\cf4\b const}{\cf1  }{\cf5 char}{\cf6 *}{\cf1  }text);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 startFrame}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 endFrame}();{\cf1 \par
}{\cf1 \par
}{\cf4\b private}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }ImFont{\cf6 *}{\cf6 >}{\cf1  }fonts;{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //ImageLoader.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf2\i // stb said that including this header in an empty header files was recommended\par
}{\cf2\i // and here we are\par
}{\cf1 \par
}{\cf3 #}{\cf3 define STB_IMAGE_IMPLEMENTATION}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "stb_image.h"}{\cf3 \par
}{\cf1 \par
}{\cf2\i //Renderer.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Renderer.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../Base/Data.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../Networks/Packets/Types/Types.h"}{\cf3 \par
}{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf8 Renderer::filter}({\cf4 Packet}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b using}{\cf1  }{\cf4\b enum}{\cf1  }{\cf8\b FilterFlag};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // filter isn't new, we can use the flag on the packet\par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf6 !}{\cf4\b Data}{\cf6 :}{\cf6 :}newFilter){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_flag{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }Passed){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b return}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_flag{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }Failed){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b return}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // we need to filter if its either a new filter, or the packet is yet to be filtered\par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf4\b auto}{\cf1  }pair{\cf1  }{\cf6 :}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}filter){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(pair.second{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf15 "}{\cf15 "}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf2\i // filter wasn't selected\par
}{\cf1 			}{\cf4\b continue};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf6 !}p{\cf6 -}{\cf6 >}m_properties.contains(pair.first)){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf2\i // the packet doesn't contain the filter given\par
}{\cf1 			}p{\cf6 -}{\cf6 >}m_flag{\cf1  }{\cf6 =}{\cf1  }Failed;{\cf1 \par
}{\cf1 			}{\cf4\b return}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_properties.at(pair.first){\cf1  }{\cf6 !}{\cf6 =}{\cf1  }pair.second){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf2\i // the values don't match\par
}{\cf1 			}p{\cf6 -}{\cf6 >}m_flag{\cf1  }{\cf6 =}{\cf1  }Failed;{\cf1 \par
}{\cf1 			}{\cf4\b return}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}p{\cf6 -}{\cf6 >}m_flag{\cf1  }{\cf6 =}{\cf1  }Passed;{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }{\cf4 true};{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::filterPacket}({\cf4 Packet}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(filter(p)){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b Data}{\cf6 :}{\cf6 :}displayed{\cf6 +}{\cf6 +};{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableNextRow();{\cf1 \par
}{\cf1 		}p{\cf6 -}{\cf6 >}render();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::render}({\cf4 Packet}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 0});{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Selectable(p{\cf6 -}{\cf6 >}m_idxStr.c_str(),{\cf1  }{\cf4 false},{\cf1  }ImGuiSelectableFlags_SpanAllColumns)){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b Data}{\cf6 :}{\cf6 :}selected{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}m_idx;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 1});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 %f}{\cf15 "},{\cf1  }p{\cf6 -}{\cf6 >}m_epoch{\cf1  }{\cf6 -}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}epochStart);{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 2});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(p{\cf6 -}{\cf6 >}m_phySrc.c_str());{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 3});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(p{\cf6 -}{\cf6 >}m_phyDst.c_str());{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 4});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(p{\cf6 -}{\cf6 >}m_strType.c_str());{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 5});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 %d}{\cf15 "},{\cf1  }p{\cf6 -}{\cf6 >}m_len);{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 6});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(p{\cf6 -}{\cf6 >}m_description.c_str());{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::renderExpanded}({\cf4 Packet}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }{\cf4 map}{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}getTexts();{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button({\cf4 map}.at({\cf15 "}{\cf15 title}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 		}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 Packet Title}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 Packet Title}{\cf15 "});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 Packet Title}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(({\cf15 "}{\cf17\b \\t}{\cf15 Arrival time: }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }{\cf4 map}.at({\cf15 "}{\cf15 time}{\cf15 "})).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf4 map}.at({\cf15 "}{\cf15 macDest}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf4 map}.at({\cf15 "}{\cf15 macSrc}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(({\cf15 "}{\cf17\b \\t}{\cf15 Type: }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }p{\cf6 -}{\cf6 >}m_strType).c_str());{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::renderExpanded}({\cf4 ARP}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}renderExpanded(({\cf4 Packet}{\cf6 *})p);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }{\cf4 map}{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button({\cf4 map}.at({\cf15 "}{\cf15 arpTitle}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 		}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 ARP Title}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 ARP Title}{\cf15 "});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 ARP Title}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(({\cf15 "}{\cf17\b \\t}{\cf15 Hardware type: }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }{\cf4 map}.at({\cf15 "}{\cf15 hardType}{\cf15 "})).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(({\cf15 "}{\cf17\b \\t}{\cf15 Protocol type: }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }{\cf4 map}.at({\cf15 "}{\cf15 protoType}{\cf15 "})).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(({\cf15 "}{\cf17\b \\t}{\cf15 Hardware size: }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }std{\cf6 :}{\cf6 :}to_string(p{\cf6 -}{\cf6 >}m_hardSize)).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(({\cf15 "}{\cf17\b \\t}{\cf15 Protocol size: }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }std{\cf6 :}{\cf6 :}to_string(p{\cf6 -}{\cf6 >}m_protoSize)).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(({\cf15 "}{\cf17\b \\t}{\cf15 Opcode: }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }{\cf4 map}.at({\cf15 "}{\cf15 opcode}{\cf15 "})).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(({\cf15 "}{\cf17\b \\t}{\cf15 Sender MAC Address: }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }p{\cf6 -}{\cf6 >}m_sendMAC).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(({\cf15 "}{\cf17\b \\t}{\cf15 Sender IP Address: }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }p{\cf6 -}{\cf6 >}m_sendAddr).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(({\cf15 "}{\cf17\b \\t}{\cf15 Target MAC Address: }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }p{\cf6 -}{\cf6 >}m_targetMAC).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(({\cf15 "}{\cf17\b \\t}{\cf15 Target IP Address: }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }p{\cf6 -}{\cf6 >}m_targetAddr).c_str());{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::render}({\cf4 IPV4}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 0});{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Selectable(p{\cf6 -}{\cf6 >}m_idxStr.c_str(),{\cf1  }{\cf4 false},{\cf1  }ImGuiSelectableFlags_SpanAllColumns)){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b Data}{\cf6 :}{\cf6 :}selected{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}m_idx;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 1});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 %f}{\cf15 "},{\cf1  }p{\cf6 -}{\cf6 >}m_epoch{\cf1  }{\cf6 -}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}epochStart);{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 2});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(p{\cf6 -}{\cf6 >}m_srcAddr.c_str());{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 3});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(p{\cf6 -}{\cf6 >}m_destAddr.c_str());{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 4});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(p{\cf6 -}{\cf6 >}m_strType.c_str());{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 5});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 %d}{\cf15 "},{\cf1  }p{\cf6 -}{\cf6 >}m_len);{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 6});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(p{\cf6 -}{\cf6 >}m_description.c_str());{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::renderExpanded}({\cf4 IPV4}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}renderExpanded(({\cf4 Packet}{\cf6 *})p);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }m{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(m.at({\cf15 "}{\cf15 IPTitle}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 		}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 IPV4 Title}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 IPV4 Title}{\cf15 "});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 IPV4 Title}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf17\b \\t}{\cf15 0100 . . . . = Version 4}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 headerLen}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(m.at({\cf15 "}{\cf15 differServ}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 			}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 DifferServ}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 DifferServ}{\cf15 "});{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 DifferServ}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 DSCP}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 ECN}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf17\b \\t}{\cf15 Total Length: %d}{\cf15 "},{\cf1  }p{\cf6 -}{\cf6 >}m_totalLength);{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 ID}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(m.at({\cf15 "}{\cf15 IPFlags}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 			}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 Flags}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 Flags}{\cf15 "});{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 Flags}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 resBits}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 dfBits}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 mfBits}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 offset}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf17\b \\t}{\cf15 Time to Live: %d}{\cf15 "},{\cf1  }p{\cf6 -}{\cf6 >}m_ttl);{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 proto}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 IPChecksum}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 src}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 dest}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_IPoptionsCount{\cf1  }{\cf6 >}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(m.at({\cf15 "}{\cf15 optStr}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 				}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 Options General}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 Options General}{\cf15 "});{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 Options General}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }p{\cf6 -}{\cf6 >}m_ipOptTexts.size();{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 					}{\cf4\b auto}{\cf1  }b{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}m_ipOptTexts.at(i);{\cf1 \par
}{\cf1 					}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(b.c_str())){\cf1  }\{{\cf1 \par
}{\cf1 						}p{\cf6 -}{\cf6 >}m_expands.at(std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 option %d}{\cf15 "},{\cf1  }i)){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at(std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 option %d}{\cf15 "},{\cf1  }i));{\cf1 \par
}{\cf1 					}\}{\cf1 \par
}{\cf1 \par
}{\cf1 					}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at(std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 option %d}{\cf15 "},{\cf1  }i))){\cf1  }\{{\cf1 \par
}{\cf1 						}{\cf4\b for}{\cf1  }({\cf4\b auto}{\cf1  }t{\cf1  }{\cf6 :}{\cf1  }p{\cf6 -}{\cf6 >}m_opts.at(i){\cf6 -}{\cf6 >}data){\cf1  }\{{\cf1 \par
}{\cf1 							}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(t.c_str());{\cf1 \par
}{\cf1 						}\}{\cf1 \par
}{\cf1 					}\}{\cf1 \par
}{\cf1 				}\}{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button({\cf15 "}{\cf15    Geo Trace this Packet? (will open a pop up with the info)}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}showGeoTrace{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}m_idx;{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}geoLocThread{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}jthread({\cf4\b SDK}{\cf6 :}{\cf6 :}geoTrace,{\cf1  }p{\cf6 -}{\cf6 >}getAlienAddr());{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::render}({\cf4 IPV6}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 0});{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Selectable(p{\cf6 -}{\cf6 >}m_idxStr.c_str(),{\cf1  }{\cf4 false},{\cf1  }ImGuiSelectableFlags_SpanAllColumns)){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b Data}{\cf6 :}{\cf6 :}selected{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}m_idx;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 1});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 %f}{\cf15 "},{\cf1  }p{\cf6 -}{\cf6 >}m_epoch{\cf1  }{\cf6 -}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}epochStart);{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 2});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(p{\cf6 -}{\cf6 >}m_srcAddr.c_str());{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 3});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(p{\cf6 -}{\cf6 >}m_destAddr.c_str());{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 4});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(p{\cf6 -}{\cf6 >}m_strType.c_str());{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 5});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf15 %d}{\cf15 "},{\cf1  }p{\cf6 -}{\cf6 >}m_len);{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}TableSetColumnIndex({\cf6 6});{\cf1 \par
}{\cf1 	}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(p{\cf6 -}{\cf6 >}m_description.c_str());{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::renderExpanded}({\cf4 IPV6}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}renderExpanded(({\cf4 Packet}{\cf6 *})p);{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }m{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}getTexts();{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(m.at({\cf15 "}{\cf15 IPV6 Title}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 		}p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 IPV6 Title}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 IPV6 Title}{\cf15 "}];{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 IPV6 Title}{\cf15 "}]){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf15 "}{\cf17\b \\t}{\cf15 0110  . . . . = Version: 6}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(m.at({\cf15 "}{\cf15 Traffic Class}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 			}p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 Traffic Class}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 Traffic Class}{\cf15 "}];{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 Traffic Class}{\cf15 "}]){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 DSCP}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 ECN}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 Flow Label}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 Payload Length}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 Next Header}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 Hop Limit}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 IPV6 Source}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 IPV6 Destination}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_options.size(){\cf1  }{\cf6 >}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(m.at({\cf15 "}{\cf15 IPV6 Option Title}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 				}p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 IPV6 Option Title}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 IPV6 Option Title}{\cf15 "}];{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 IPV6 Option Title}{\cf15 "}]){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 IPV6 Option Next Header}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 IPV6 Option Length}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 \par
}{\cf1 				}{\cf4\b for}{\cf1  }({\cf4\b auto}{\cf1  }b{\cf1  }{\cf6 :}{\cf1  }p{\cf6 -}{\cf6 >}m_ipOptTexts){\cf1  }\{{\cf1 \par
}{\cf1 					}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(b.c_str());{\cf1 \par
}{\cf1 				}\}{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::renderExpanded}({\cf4 TCP}{\cf6 <}{\cf4 IPV4}{\cf6 >}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}renderExpanded(({\cf4 IPV4}{\cf6 *})p);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }m{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(m.at({\cf15 "}{\cf15 TCP Title}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 		}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 TCP Title}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 TCP Title}{\cf15 "});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 TCP Title}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 SPort}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 DPort}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 SeqNum}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 AckNum}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 HeaderLen}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(m.at({\cf15 "}{\cf15 TCPFlags}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 			}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 TCP Flags}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 TCP Flags}{\cf15 "});{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 TCP Flags}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b for}{\cf1  }({\cf4\b auto}{\cf1  }s{\cf1  }{\cf6 :}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}TCPFlags){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at(s).c_str());{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 TCPWindow}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 TCPChecksum}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 UrgentPtr}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(m.at({\cf15 "}{\cf15 OptionTitle}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 			}p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 TCP Options}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 TCP Options}{\cf15 "}];{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 TCP Options}{\cf15 "}]){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b for}{\cf1  }({\cf4\b auto}{\cf1  }opt{\cf1  }{\cf6 :}{\cf1  }p{\cf6 -}{\cf6 >}m_options){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }opt{\cf6 -}{\cf6 >}toString()).c_str());{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::renderExpanded}({\cf4 TCP}{\cf6 <}{\cf4 IPV6}{\cf6 >}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}renderExpanded(({\cf4 IPV6}{\cf6 *})p);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }m{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(m.at({\cf15 "}{\cf15 TCP Title}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 		}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 TCP Title}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 TCP Title}{\cf15 "});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 TCP Title}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 SPort}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 DPort}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 SeqNum}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 AckNum}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 HeaderLen}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(m.at({\cf15 "}{\cf15 TCPFlags}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 			}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 TCP Flags}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 TCP Flags}{\cf15 "});{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 TCP Flags}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b for}{\cf1  }({\cf4\b auto}{\cf1  }s{\cf1  }{\cf6 :}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}TCPFlags){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at(s).c_str());{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 TCPWindow}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 TCPChecksum}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 UrgentPtr}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(m.at({\cf15 "}{\cf15 OptionTitle}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 			}p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 TCP Options}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 TCP Options}{\cf15 "}];{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands[{\cf15 "}{\cf15 TCP Options}{\cf15 "}]){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b for}{\cf1  }({\cf4\b auto}{\cf1  }opt{\cf1  }{\cf6 :}{\cf1  }p{\cf6 -}{\cf6 >}m_options){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }opt{\cf6 -}{\cf6 >}toString()).c_str());{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::renderExpanded}({\cf4 UDP}{\cf6 <}{\cf4 IPV4}{\cf6 >}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}renderExpanded(({\cf4 IPV4}{\cf6 *})p);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }{\cf4 map}{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}getTexts();{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button({\cf4 map}.at({\cf15 "}{\cf15 UDP Title}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 		}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 UDP Title}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 UDP Title}{\cf15 "});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 UDP Title}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf4 map}.at({\cf15 "}{\cf15 UDP SPort}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf4 map}.at({\cf15 "}{\cf15 UDP DPort}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf4 map}.at({\cf15 "}{\cf15 UDP Length}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf4 map}.at({\cf15 "}{\cf15 UDP Checksum}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf4 map}.at({\cf15 "}{\cf15 UDP Payload Length}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf4 map}.at({\cf15 "}{\cf15 UDP Payload}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::renderExpanded}({\cf4 UDP}{\cf6 <}{\cf4 IPV6}{\cf6 >}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}renderExpanded(({\cf4 IPV6}{\cf6 *})p);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }{\cf4 map}{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}getTexts();{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button({\cf4 map}.at({\cf15 "}{\cf15 UDP Title}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 		}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 UDP Title}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 UDP Title}{\cf15 "});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 UDP Title}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf4 map}.at({\cf15 "}{\cf15 UDP SPort}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf4 map}.at({\cf15 "}{\cf15 UDP DPort}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf4 map}.at({\cf15 "}{\cf15 UDP Length}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf4 map}.at({\cf15 "}{\cf15 UDP Checksum}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf4 map}.at({\cf15 "}{\cf15 UDP Payload Length}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text({\cf4 map}.at({\cf15 "}{\cf15 UDP Payload}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::renderExpanded}({\cf4 ICMP}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}renderExpanded(({\cf4 IPV4}{\cf6 *})p);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }m{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button({\cf15 "}{\cf15 Internet Control Message Control}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 ICMP Title}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 ICMP Title}{\cf15 "});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 ICMP Title}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 ICMPType}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 ICMPCode}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 ICMPChecksum}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 IDBE}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 IDLE}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 SNBE}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 SNLE}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button(m.at({\cf15 "}{\cf15 ICMPDataHeader}{\cf15 "}).c_str())){\cf1  }\{{\cf1 \par
}{\cf1 			}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 ICMP Data}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 ICMP Data}{\cf15 "});{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 ICMP Data}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 ICMPData}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::renderExpanded}({\cf4 ICMPV6}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}renderExpanded(({\cf4 IPV6}{\cf6 *})p);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }m{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button({\cf15 "}{\cf15 Internet Control Message Control}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 ICMPV6 Title}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 ICMPV6 Title}{\cf15 "});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 ICMPV6 Title}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 ICMPV6Type}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 ICMPV6Code}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 ICMPV6Checksum}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 ICMPV6Length}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 ICMPV6Message}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::renderExpanded}({\cf4 IGMP}{\cf6 <}{\cf4 IPV4}{\cf6 >}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}renderExpanded(({\cf4 IPV4}{\cf6 *})p);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }m{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button({\cf15 "}{\cf15 Internet Group Management Protocol}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 IGMP Title}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 IGMP Title}{\cf15 "});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 IGMP Title}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 IGMPType}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 respTime}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 IGMPChecksum}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 multicastAddr}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Renderer::renderExpanded}({\cf4 IGMP}{\cf6 <}{\cf4 IPV6}{\cf6 >}{\cf6 *}{\cf1  }p){\cf1  }\{{\cf1 \par
}{\cf1 	}renderExpanded(({\cf4 IPV6}{\cf6 *})p);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }m{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b ImGui}{\cf6 :}{\cf6 :}Button({\cf15 "}{\cf15 Internet Group Management Protocol}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 IGMP Title}{\cf15 "}){\cf1  }{\cf6 =}{\cf1  }{\cf6 !}p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 IGMP Title}{\cf15 "});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(p{\cf6 -}{\cf6 >}m_expands.at({\cf15 "}{\cf15 IGMP Title}{\cf15 "})){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 IGMPType}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 respTime}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 IGMPChecksum}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 		}{\cf4\b ImGui}{\cf6 :}{\cf6 :}Text(m.at({\cf15 "}{\cf15 multicastAddr}{\cf15 "}).c_str());{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //Renderer.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 define IMGUI_USE_STB_SPRINTF}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "GUI.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b Packet};{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b ARP};{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b IPV4};{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b IPV6};{\cf1 \par
}{\cf4\b template}{\cf1  }{\cf6 <}{\cf4\b typename}{\cf1  }{\cf8\b T}{\cf6 >}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b TCP};{\cf1 \par
}{\cf4\b template}{\cf1  }{\cf6 <}{\cf4\b typename}{\cf1  }{\cf8\b T}{\cf6 >}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b UDP};{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b ICMP};{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b ICMPV6};{\cf1 \par
}{\cf4\b template}{\cf1  }{\cf6 <}{\cf4\b typename}{\cf1  }{\cf8\b T}{\cf6 >}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b IGMP};{\cf1 \par
}{\cf1 \par
}{\cf2\i // this class handles all of the rendering\par
}{\cf2\i // each `render` function renders a packet on the table (only the packet which need special treatment are implemented)\par
}{\cf2\i // each `renderExpanded` is specific for each type as it presents a lot more specific data\par
}{\cf2\i // renderExpanded also call the father class's renderExpanded\par
}{\cf2\i // for example, renderExpanded for tcp<IPV4> also calls renderExpanded for IPV4 which calls renderExpanded for Packet\par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b Renderer}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }filterPacket({\cf4 Packet}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 render}({\cf4 Packet}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}({\cf4 Packet}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}({\cf4 ARP}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 render}({\cf4 IPV4}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}({\cf4 IPV4}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}({\cf4 IGMP}{\cf6 <}{\cf4 IPV4}{\cf6 >}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}({\cf4 IGMP}{\cf6 <}{\cf4 IPV6}{\cf6 >}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}({\cf4 TCP}{\cf6 <}{\cf4 IPV4}{\cf6 >}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}({\cf4 TCP}{\cf6 <}{\cf4 IPV6}{\cf6 >}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}({\cf4 UDP}{\cf6 <}{\cf4 IPV4}{\cf6 >}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}({\cf4 ICMP}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}({\cf4 UDP}{\cf6 <}{\cf4 IPV6}{\cf6 >}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 render}({\cf4 IPV6}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}({\cf4 IPV6}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}({\cf4 ICMPV6}{\cf6 *}{\cf1  }p);{\cf1 \par
}{\cf1 \par
}{\cf4\b private}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }filter({\cf4 Packet}{\cf6 *}{\cf1  }p);{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //Main.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "App.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <Windows.h>}{\cf3 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 main}(){\cf1 \par
}\{{\cf1 \par
}{\cf1 	}App{\cf6 :}{\cf6 :}init();{\cf1 \par
}{\cf1 \par
}{\cf1 	}App{\cf6 :}{\cf6 :}adapterScreen();{\cf1 \par
}{\cf1 \par
}{\cf1 	}App{\cf6 :}{\cf6 :}captureScreen();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf3 #}{\cf3 ifdef NDEBUG}{\cf3 \par
}{\cf1 \par
}{\cf2\i // this entry point is needed to compile the program into a command promptless executable\par
}{\cf2\i // because nothing can ever be simple in this operating system\par
}{\cf5 int}{\cf1  }WINAPI{\cf1  }{\cf8 WinMain}(HINSTANCE{\cf1  }hInstance,{\cf1  }HINSTANCE{\cf1  }hPrevInstance,{\cf1  }LPSTR{\cf1  }lpCmdLine,{\cf1  }{\cf5 int}{\cf1  }nCmdShow){\cf1 \par
}\{{\cf1 \par
}{\cf1 	}main();{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }{\cf6 0};{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf3 #}{\cf3 endif}{\cf3 \par
}{\cf1 \par
}{\cf2\i //capture.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Capture.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <sstream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <tchar.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <vector>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <iostream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Packets/Packets.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../Base/MacroSettings.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../Base/Data.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../Base/Logger.h"}{\cf3 \par
}{\cf1 \par
}pcap_if_t{\cf6 *}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}m_alldevs;{\cf1 \par
}{\cf5 int}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}m_devs;{\cf1 \par
}std{\cf6 :}{\cf6 :}vector{\cf6 <}std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}m_devNames;{\cf1 \par
}{\cf1 \par
}{\cf5 bool}{\cf1  }{\cf8 Capture::LoadNpcapDlls}(){\cf1  }\{{\cf1 \par
}{\cf1 	}_TCHAR{\cf1  }npcap_dir[{\cf6 512}];{\cf1 \par
}{\cf1 	}UINT{\cf1  }len;{\cf1 \par
}{\cf1 	}len{\cf1  }{\cf6 =}{\cf1  }GetSystemDirectory(npcap_dir,{\cf1  }{\cf6 480});{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf6 !}len){\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }GetLastError();{\cf1 \par
}{\cf1 		}{\cf4\b Logger}{\cf6 :}{\cf6 :}log({\cf15 "}{\cf15 Error in GetSystemDirectory: }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }ss.str());{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}_tcscat_s(npcap_dir,{\cf1  }{\cf6 512},{\cf1  }_T({\cf15 "}{\cf17\b \\\\}{\cf15 Npcap}{\cf15 "}));{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(SetDllDirectory(npcap_dir){\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }GetLastError();{\cf1 \par
}{\cf1 		}{\cf4\b Logger}{\cf6 :}{\cf6 :}log({\cf15 "}{\cf15 Error in SetDllDirectory: }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }ss.str());{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }{\cf4 true};{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Capture::init}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf2\i // load the stupid dlls\par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf6 !}LoadNpcapDlls()){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b Logger}{\cf6 :}{\cf6 :}log({\cf15 "}{\cf15 Couldn't load Npcap}{\cf15 "});{\cf1 \par
}{\cf1 		}exit({\cf6 1});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 char}{\cf1  }errbuf[PCAP_ERRBUF_SIZE];{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // get the stupid devices and put them into the stupid variable\par
}{\cf1 	}{\cf4\b if}{\cf1  }(pcap_findalldevs({\cf6 &}m_alldevs,{\cf1  }errbuf){\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 -1}){\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }errbuf;{\cf1 \par
}{\cf1 		}{\cf4\b Logger}{\cf6 :}{\cf6 :}log({\cf15 "}{\cf15 Error in pcap_findalldevs: }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }ss.str());{\cf1 \par
}{\cf1 		}exit({\cf6 1});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_devs{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }(pcap_if_t{\cf6 *}{\cf1  }d{\cf1  }{\cf6 =}{\cf1  }m_alldevs;{\cf1  }d;{\cf1  }d{\cf1  }{\cf6 =}{\cf1  }d{\cf6 -}{\cf6 >}next,{\cf1  }m_devs{\cf6 +}{\cf6 +});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(m_devs{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b Logger}{\cf6 :}{\cf6 :}log({\cf15 "}{\cf15 No interfaces found! Make sure Npcap is installed.}{\cf15 "});{\cf1 \par
}{\cf1 		}exit({\cf6 1});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}WSADATA{\cf1  }wsaData;{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(WSAStartup(MAKEWORD({\cf6 2},{\cf1  }{\cf6 2}),{\cf1  }{\cf6 &}wsaData){\cf1  }{\cf6 !}{\cf6 =}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b Logger}{\cf6 :}{\cf6 :}log({\cf15 "}{\cf15 Error initializing Winsock}{\cf15 "});{\cf1 \par
}{\cf1 		}exit({\cf6 1});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 Capture::release}(){\cf1  }\{{\cf1 \par
}{\cf1 	}pcap_freealldevs(m_alldevs);{\cf1 \par
}{\cf1 	}WSACleanup();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}pcap_if_t{\cf6 *}{\cf1  }{\cf8 Capture::getDev}({\cf5 int}{\cf1  }index){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(index{\cf1  }{\cf6 <}{\cf1  }{\cf6 0}{\cf1  }{\cf6 |}{\cf6 |}{\cf1  }index{\cf1  }{\cf6 >}{\cf1  }m_devs){\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }index;{\cf1 \par
}{\cf1 		}{\cf4\b Logger}{\cf6 :}{\cf6 :}log({\cf15 "}{\cf15 device index }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }ss.str(){\cf1  }{\cf6 +}{\cf1  }{\cf15 "}{\cf15  does not exist :(}{\cf15 "});{\cf1 \par
}{\cf1 		}exit({\cf6 1});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}pcap_if_t{\cf6 *}{\cf1  }d{\cf1  }{\cf6 =}{\cf1  }m_alldevs;{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }(;{\cf1  }index{\cf1  }{\cf6 >}{\cf1  }{\cf6 0};{\cf1  }index{\cf6 -}{\cf6 -},{\cf1  }d{\cf1  }{\cf6 =}{\cf1  }d{\cf6 -}{\cf6 >}next);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }d;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}vector{\cf6 <}std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}getDeviceNames({\cf5 bool}{\cf1  }verbose){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(m_devNames.size(){\cf1  }{\cf6 !}{\cf6 =}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }m_devNames;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }d{\cf1  }{\cf6 =}{\cf1  }m_alldevs;{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }m_devs;{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(d{\cf6 -}{\cf6 >}description){\cf1  }\{{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }d{\cf6 -}{\cf6 >}description;{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 unknown interface}{\cf15 "};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(verbose){\cf1  }\{{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 (}{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }d{\cf6 -}{\cf6 >}name{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 )}{\cf15 "};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}m_devNames.push_back(ss.str());{\cf1 \par
}{\cf1 		}d{\cf1  }{\cf6 =}{\cf1  }d{\cf6 -}{\cf6 >}next;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }m_devNames;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf4 pcap_t}{\cf6 *}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}createAdapter({\cf5 int}{\cf1  }devIndex,{\cf1  }{\cf5 bool}{\cf1  }promiscuous){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }dev{\cf1  }{\cf6 =}{\cf1  }getDev(devIndex);{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }prom{\cf1  }{\cf6 =}{\cf1  }{\cf6 1};{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf6 !}promiscuous){\cf1  }\{{\cf1 \par
}{\cf1 		}prom{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 char}{\cf1  }errbuf[PCAP_ERRBUF_SIZE];{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }adhandle{\cf1  }{\cf6 =}{\cf1  }pcap_open_live(dev{\cf6 -}{\cf6 >}name,{\cf1  }{\cf6 65536},{\cf1  }prom,{\cf1  }{\cf6 20},{\cf1  }errbuf);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(adhandle{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf4\b nullptr}){\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Unable to open the adapter. }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }dev{\cf6 -}{\cf6 >}name{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  is not supported by Npcap}{\cf15 "};{\cf1 \par
}{\cf1 		}{\cf4\b Logger}{\cf6 :}{\cf6 :}log({\cf15 "}{\cf15 adapter handle is nullptr. }{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }ss.str());{\cf1 \par
}{\cf1 		}exit({\cf6 1});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }adhandle;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf4 pcap_t}{\cf6 *}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}load(std{\cf6 :}{\cf6 :}string{\cf1  }name){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf5 char}{\cf1  }errbuf[PCAP_ERRBUF_SIZE];{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }handle{\cf1  }{\cf6 =}{\cf1  }pcap_open_offline(name.c_str(),{\cf1  }errbuf);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(handle{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf4\b nullptr}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b Logger}{\cf6 :}{\cf6 :}log({\cf15 "}{\cf15 Unable to open the file.}{\cf15 "});{\cf1 \par
}{\cf1 		}exit({\cf6 1});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }handle;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}capturePackets(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }adapter{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}chosenAdapter;{\cf1 \par
}{\cf1 	}{\cf4\b struct}{\cf1  }{\cf8\b pcap_pkthdr}{\cf6 *}{\cf1  }header;{\cf1 \par
}{\cf1 	}{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data;{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }r;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}doneLoading){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b return};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // find the first good packet pls\par
}{\cf1 	}{\cf4\b while}{\cf1  }(pcap_next_ex(adapter,{\cf1  }{\cf6 &}header,{\cf1  }{\cf6 &}pkt_data){\cf1  }{\cf6 <}{\cf6 =}{\cf1  }{\cf6 0});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }p{\cf1  }{\cf6 =}{\cf1  }fromRaw(header,{\cf1  }pkt_data,{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}capIdx);{\cf1 \par
}{\cf1 	}\{{\cf1 \par
}{\cf1 		}{\cf2\i // vector is not thread safe apparently\par
}{\cf1 		}{\cf2\i // so whenever we interact with an element from it we need to do so with atomics\par
}{\cf1 		}std{\cf6 :}{\cf6 :}scoped_lock{\cf1  }{\cf8 guard}({\cf4\b Data}{\cf6 :}{\cf6 :}guard);{\cf1 \par
}{\cf1 		}{\cf4\b Data}{\cf6 :}{\cf6 :}captured.push_back(p);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}epochStart{\cf1  }{\cf6 =}{\cf1  }p{\cf6 -}{\cf6 >}m_epoch;{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}capIdx{\cf6 +}{\cf6 +};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b while}{\cf1  }({\cf4 true}){\cf1  }\{{\cf1 \par
}{\cf1 		}r{\cf1  }{\cf6 =}{\cf1  }pcap_next_ex(adapter,{\cf1  }{\cf6 &}header,{\cf1  }{\cf6 &}pkt_data);{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(r{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b continue};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(r{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 -2}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf2\i // done reading\par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}doneCapturing{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}doneLoading{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}{\cf1 			}{\cf4\b return};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}doneCapturing){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b return};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }p{\cf1  }{\cf6 =}{\cf1  }fromRaw(header,{\cf1  }pkt_data,{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}capIdx);{\cf1 \par
}{\cf1 \par
}{\cf1 		}\{{\cf1 \par
}{\cf1 			}std{\cf6 :}{\cf6 :}scoped_lock{\cf1  }{\cf8 guard}({\cf4\b Data}{\cf6 :}{\cf6 :}guard);{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}captured.push_back(p);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b Data}{\cf6 :}{\cf6 :}capIdx{\cf6 +}{\cf6 +};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}countPackets(std{\cf6 :}{\cf6 :}vector{\cf6 <}{\cf5 int}{\cf6 >}{\cf6 *}{\cf1  }counts,{\cf1  }{\cf5 int}{\cf1  }adapterIdx){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }d{\cf1  }{\cf6 =}{\cf1  }getDev(adapterIdx);{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }adhandle{\cf1  }{\cf6 =}{\cf1  }createAdapter(adapterIdx,{\cf1  }{\cf4 true});{\cf1 \par
}{\cf1 	}{\cf4\b struct}{\cf1  }{\cf8\b pcap_pkthdr}{\cf6 *}{\cf1  }header;{\cf1 \par
}{\cf1 	}{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data;{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }r;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b while}{\cf1  }((r{\cf1  }{\cf6 =}{\cf1  }pcap_next_ex(adhandle,{\cf1  }{\cf6 &}header,{\cf1  }{\cf6 &}pkt_data)){\cf1  }{\cf6 >}{\cf6 =}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}doneCounting){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(r{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b continue};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}counts{\cf6 -}{\cf6 >}at(adapterIdx){\cf1  }{\cf6 +}{\cf6 =}{\cf1  }{\cf6 1};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}pcap_close(adhandle);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf4\b Capture}{\cf6 :}{\cf6 :}dumpAll(std{\cf6 :}{\cf6 :}string{\cf1  }filename){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }dumpfile{\cf1  }{\cf6 =}{\cf1  }pcap_dump_open({\cf4\b Data}{\cf6 :}{\cf6 :}chosenAdapter,{\cf1  }filename.c_str());{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf4\b auto}{\cf1  }p{\cf1  }{\cf6 :}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}captured){\cf1  }\{{\cf1 \par
}{\cf1 		}pcap_dump((u_char{\cf6 *})dumpfile,{\cf1  }p{\cf6 -}{\cf6 >}m_header,{\cf1  }p{\cf6 -}{\cf6 >}m_pktData);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}pcap_dump_close(dumpfile);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //capture.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <pcap.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <vector>}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b Capture}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf2\i // everyone remembers where they were when they got the news\par
}{\cf1 	}{\cf4\b Capture}(){\cf1  }{\cf6 =}{\cf1  }{\cf4\b delete};{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 init}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 release}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }pcap_if_t{\cf6 *}{\cf1  }{\cf8 getDev}({\cf5 int}{\cf1  }index);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}vector{\cf6 <}std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }getDeviceNames({\cf5 bool}{\cf1  }verbose{\cf1  }{\cf6 =}{\cf1  }{\cf4 false});{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf4 pcap_t}{\cf6 *}{\cf1  }{\cf8 createAdapter}({\cf5 int}{\cf1  }devIndex,{\cf1  }{\cf5 bool}{\cf1  }promiscuous{\cf1  }{\cf6 =}{\cf1  }{\cf4 false});{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 capturePackets}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf4 pcap_t}{\cf6 *}{\cf1  }{\cf8 load}(std{\cf6 :}{\cf6 :}string{\cf1  }name);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 countPackets}(std{\cf6 :}{\cf6 :}vector{\cf6 <}{\cf5 int}{\cf6 >}{\cf6 *}{\cf1  }counts,{\cf1  }{\cf5 int}{\cf1  }adapterIdx);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 dumpAll}(std{\cf6 :}{\cf6 :}string{\cf1  }filename);{\cf1 \par
}{\cf1 \par
}{\cf4\b private}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }pcap_if_t{\cf6 *}{\cf1  }m_alldevs;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 int}{\cf1  }m_devs;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}vector{\cf6 <}std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }m_devNames;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 bool}{\cf1  }{\cf8 LoadNpcapDlls}();{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //Packets.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Packets.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <iostream>}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <ws2def.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../Base/Logger.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../capture.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }ETHERTYPE_IPV4{\cf1  }{\cf6 =}{\cf1  }{\cf6 0x0800};{\cf1 \par
}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }ETHERTYPE_ARP{\cf1  }{\cf6 =}{\cf1  }{\cf6 0x0806};{\cf1 \par
}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }ETHERTYPE_IPV6{\cf1  }{\cf6 =}{\cf1  }{\cf6 0x86DD};{\cf1 \par
}{\cf1 \par
}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }IPV4_PROTO_POS{\cf1  }{\cf6 =}{\cf1  }{\cf6 23};{\cf1 \par
}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }IPV6_PROTO_POS{\cf1  }{\cf6 =}{\cf1  }{\cf6 20};{\cf1 \par
}{\cf1 \par
}IPV4_PKT{\cf1  }{\cf8 fromIPV4}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }proto{\cf1  }{\cf6 =}{\cf1  }pkt_data[IPV4_PROTO_POS];{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b switch}{\cf1  }(proto){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_TCP}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4\b new}{\cf1  }{\cf4 TCP}{\cf6 <}{\cf4 IPV4}{\cf6 >}(header,{\cf1  }pkt_data,{\cf1  }idx);{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_UDP}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4\b new}{\cf1  }{\cf4 UDP}{\cf6 <}{\cf4 IPV4}{\cf6 >}(header,{\cf1  }pkt_data,{\cf1  }idx);{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_IGMP}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4\b new}{\cf1  }{\cf4 IGMP}{\cf6 <}{\cf4 IPV4}{\cf6 >}(header,{\cf1  }pkt_data,{\cf1  }idx);{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_ICMP}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4\b new}{\cf1  }{\cf4 ICMP}(header,{\cf1  }pkt_data,{\cf1  }idx);{\cf1 \par
}{\cf1 	}{\cf4\b default}{\cf6 :}{\cf1 \par
}{\cf3 #}{\cf3 ifdef _DEBUG}{\cf3 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 unknown v4 protocol: }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }proto;{\cf1 \par
}{\cf1 		}{\cf4\b Logger}{\cf6 :}{\cf6 :}log(ss.str());{\cf1 \par
}{\cf3 #}{\cf3 endif}{\cf3 \par
}{\cf1 		}{\cf4\b break};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }{\cf4\b new}{\cf1  }{\cf4 IPV4}(header,{\cf1  }pkt_data,{\cf1  }idx);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}IPV6_PKT{\cf1  }{\cf8 fromIPV6}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx,{\cf1  }{\cf5 int}{\cf1  }proto_pos{\cf1  }{\cf6 =}{\cf1  }IPV6_PROTO_POS){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }proto{\cf1  }{\cf6 =}{\cf1  }pkt_data[proto_pos];{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b switch}{\cf1  }(proto){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_HOPOPTS}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }fromIPV6(header,{\cf1  }pkt_data,{\cf1  }idx,{\cf1  }{\cf6 54});{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_TCP}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4\b new}{\cf1  }{\cf4 TCP}{\cf6 <}{\cf4 IPV6}{\cf6 >}(header,{\cf1  }pkt_data,{\cf1  }idx);{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_UDP}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4\b new}{\cf1  }{\cf4 UDP}{\cf6 <}{\cf4 IPV6}{\cf6 >}(header,{\cf1  }pkt_data,{\cf1  }idx);{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_ICMPV6}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4\b new}{\cf1  }{\cf4 ICMPV6}(header,{\cf1  }pkt_data,{\cf1  }idx);{\cf1 \par
}{\cf1 	}{\cf4\b default}{\cf6 :}{\cf1 \par
}{\cf3 #}{\cf3 ifdef _DEBUG}{\cf3 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 unknown v6 protocol: }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }proto;{\cf1 \par
}{\cf1 		}{\cf4\b Logger}{\cf6 :}{\cf6 :}log(ss.str());{\cf1 \par
}{\cf3 #}{\cf3 endif}{\cf3 \par
}{\cf1 		}{\cf4\b break};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }{\cf4\b new}{\cf1  }{\cf4 IPV6}(header,{\cf1  }pkt_data,{\cf1  }idx);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}PKT{\cf1  }{\cf8 fromRaw}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx){\cf1  }\{{\cf1 \par
}{\cf1 	}u_char{\cf1  }t1{\cf1  }{\cf6 =}{\cf1  }pkt_data[{\cf6 12}];{\cf1 \par
}{\cf1 	}u_char{\cf1  }t2{\cf1  }{\cf6 =}{\cf1  }pkt_data[{\cf6 13}];{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }type{\cf1  }{\cf6 =}{\cf1  }(t1{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf6 8}){\cf1  }{\cf6 |}{\cf1  }t2;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b switch}{\cf1  }(type){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf11 ETHERTYPE_IPV4}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }fromIPV4(header,{\cf1  }pkt_data,{\cf1  }idx);{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf11 ETHERTYPE_IPV6}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }fromIPV6(header,{\cf1  }pkt_data,{\cf1  }idx);{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf11 ETHERTYPE_ARP}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4\b new}{\cf1  }{\cf4 ARP}(header,{\cf1  }pkt_data,{\cf1  }idx);{\cf1 \par
}{\cf1 	}{\cf4\b default}{\cf6 :}{\cf1 \par
}{\cf3 #}{\cf3 ifdef _DEBUG}{\cf3 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 unknown packet type: }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }type{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  at position }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }idx;{\cf1 \par
}{\cf1 		}{\cf4\b Logger}{\cf6 :}{\cf6 :}log(ss.str());{\cf1 \par
}{\cf3 #}{\cf3 endif}{\cf3 \par
}{\cf1 		}{\cf4\b break};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }{\cf4\b new}{\cf1  }{\cf4 Packet}(header,{\cf1  }pkt_data,{\cf1  }idx);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //Packets.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Types/Types.h"}{\cf3 \par
}{\cf1 \par
}{\cf2\i // think of this function as the sorting hat for packets\par
}{\cf2\i // this takes in a packet, figures out its type, and return it masked as a Packet*\par
}PKT{\cf1  }{\cf8 fromRaw}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx);{\cf1 \par
}{\cf1 \par
}{\cf2\i //ICMP.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../Eth/Packet.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../IP/IP.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <pcap.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <uchar.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../../GUI/Renderer.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../../Base/Data.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <type_traits>}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b ICMP}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }{\cf4 IPV4}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_ICMPtype;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_code;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_ICMPChecksum;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_indentifierBE;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_indentifierLE;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_seqNumberBE;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_seqNumberLE;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 long}{\cf1  }{\cf5 long}{\cf1  }m_ROHLength;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_typeDesc;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_restOfHeader;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4 ICMP}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx){\cf1  }{\cf6 :}{\cf1  }{\cf4 IPV4}(header,{\cf1  }pkt_data,{\cf1  }idx){\cf1  }\{{\cf1 \par
}{\cf1 		}m_ICMPtype{\cf1  }{\cf6 =}{\cf1  }parseChar();{\cf1 \par
}{\cf1 		}m_code{\cf1  }{\cf6 =}{\cf1  }parseChar();{\cf1 \par
}{\cf1 		}m_ICMPChecksum{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort();{\cf1 \par
}{\cf1 		}m_indentifierBE{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort();{\cf1 \par
}{\cf1 		}m_indentifierLE{\cf1  }{\cf6 =}{\cf1  }htons(m_indentifierBE);{\cf1 \par
}{\cf1 		}m_seqNumberBE{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort();{\cf1 \par
}{\cf1 		}m_seqNumberLE{\cf1  }{\cf6 =}{\cf1  }htons(m_seqNumberBE);{\cf1 \par
}{\cf1 		}m_ROHLength{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_len{\cf1  }{\cf6 -}{\cf1  }getPos();{\cf1 \par
}{\cf1 		}m_restOfHeader{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parse(m_ROHLength);{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_strType{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 ICMP (}{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_strType{\cf1  }{\cf6 +}{\cf1  }{\cf15 "}{\cf15 )}{\cf15 "};{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(m_ICMPtype{\cf1  }{\cf6 <}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}icmpTypes.size()){\cf1  }\{{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}icmpTypes.at(m_ICMPtype);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Uknown code }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_ICMPtype{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  (Possibly Reserved)}{\cf15 "};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_typeDesc{\cf1  }{\cf6 =}{\cf1  }ss.str();{\cf1 \par
}{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 , len = }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_ROHLength{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 , ttl = }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }({\cf5 int}){\cf4 IPV4}{\cf6 :}{\cf6 :}m_ttl;{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_description{\cf1  }{\cf6 =}{\cf1  }ss.str();{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 ICMP Title}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 		}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 ICMP Data}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 proto}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 icmp}{\cf15 "}{\cf1  }\});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }toString(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 ICMPV4 packet at }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 time}{\cf15 "}]{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  of type }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_ICMPtype{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  of code }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_code{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  (with checksum }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_ICMPChecksum{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  and rest of header is }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_restOfHeader{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 )}{\cf17\b \\n}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }ss.str();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}json{\cf1  }jsonify(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }j{\cf1  }{\cf6 =}{\cf1  }jsonify();{\cf1 \par
}{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 ICMP}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 start}{\cf15 "};{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Type}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_ICMPtype;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Code}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_code;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 ICMP Checksum}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_ICMPChecksum;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Indentifier BE}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_indentifierBE;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Indentifier LE}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_indentifierLE;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Sequence Number BE}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_seqNumberBE;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Sequence Number LE}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_seqNumberLE;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 ROH Length}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_ROHLength;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 The Rest of the Header}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_restOfHeader;{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }j;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 void}{\cf1  }render(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}render({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 void}{\cf1  }renderExpanded(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}renderExpanded({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }getTexts(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4 Packet}{\cf6 :}{\cf6 :}m_texts.empty()){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4 IPV4}{\cf6 :}{\cf6 :}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 ICMPType}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Type: \{\} (\{\})}{\cf15 "},{\cf1  }m_ICMPtype,{\cf1  }m_typeDesc);{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 ICMPCode}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Code: \{\}}{\cf15 "},{\cf1  }m_code);{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 ICMPChecksum}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Checksum: 0x\{:x\}}{\cf15 "},{\cf1  }m_ICMPChecksum);{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 IDBE}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Identifier (BE): \{\} (0x\{:x\})}{\cf15 "},{\cf1  }m_indentifierBE,{\cf1  }m_indentifierBE);{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 IDLE}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Identifier (LE): \{\} (0x\{:x\})}{\cf15 "},{\cf1  }m_indentifierLE,{\cf1  }m_indentifierLE);{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 SNBE}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Sequence Number (BE): \{\} (0x\{:x\})}{\cf15 "},{\cf1  }m_seqNumberBE,{\cf1  }m_seqNumberBE);{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 SNLE}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Sequence Number (LE): \{\} (0x\{:x\})}{\cf15 "},{\cf1  }m_seqNumberLE,{\cf1  }m_seqNumberLE);{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 ICMPDataHeader}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15    Data (\{\} bytes)}{\cf15 "},{\cf1  }m_ROHLength);{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 ICMPData}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15 Data: \{\}}{\cf15 "},{\cf1  }m_restOfHeader);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //ICMPV6.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../Eth/Packet.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../IP/IP.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <pcap.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <uchar.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../../GUI/Renderer.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <type_traits>}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "ICMPV6Types/ICMPV6Types.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b ICMPV6}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }{\cf4 IPV6}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}ICMPV6Type{\cf6 *}{\cf1  }m_ICMPV6Type;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_ICMPV6Checksum;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 long}{\cf1  }{\cf5 long}{\cf1  }m_messageLength;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_messageBody;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4 ICMPV6}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx){\cf1  }{\cf6 :}{\cf1  }{\cf4 IPV6}(header,{\cf1  }pkt_data,{\cf1  }idx){\cf1  }\{{\cf1 \par
}{\cf1 		}m_ICMPV6Type{\cf1  }{\cf6 =}{\cf1  }{\cf4\b new}{\cf1  }ICMPV6Type({\cf4\b this});{\cf1 \par
}{\cf1 		}m_ICMPV6Checksum{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort();{\cf1 \par
}{\cf1 		}m_messageLength{\cf1  }{\cf6 =}{\cf1  }{\cf4 IPV6}{\cf6 :}{\cf6 :}m_payloadLength{\cf1  }{\cf6 -}{\cf1  }{\cf6 4};{\cf1 \par
}{\cf1 		}m_messageBody{\cf1  }{\cf6 =}{\cf1  }parse(m_messageLength);{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_strType{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 ICMPV6}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_description{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 \{\} of code = \{\} len = \{\} hop limit = \{\}}{\cf15 "},{\cf1  }m_ICMPV6Type{\cf6 -}{\cf6 >}m_typeStr,{\cf1  }m_ICMPV6Type{\cf6 -}{\cf6 >}m_codeStr,{\cf1  }m_messageLength,{\cf1  }({\cf5 int}){\cf4 IPV6}{\cf6 :}{\cf6 :}m_hopLimit);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 ICMPV6 Title}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 proto}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 icmpv6}{\cf15 "}{\cf1  }\});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }toString(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 ICMPV4 packet at }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 time}{\cf15 "}]{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  of type }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }({\cf5 int})m_ICMPV6Type{\cf6 -}{\cf6 >}m_type{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  of code }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }({\cf5 int})m_ICMPV6Type{\cf6 -}{\cf6 >}m_code{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  (with checksum }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_ICMPV6Checksum{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 )}{\cf17\b \\n}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }ss.str();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}json{\cf1  }jsonify(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }j{\cf1  }{\cf6 =}{\cf1  }{\cf4 IPV6}{\cf6 :}{\cf6 :}jsonify();{\cf1 \par
}{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 ICMP}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 start}{\cf15 "};{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Type}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }({\cf5 int})m_ICMPV6Type{\cf6 -}{\cf6 >}m_type;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Code}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }({\cf5 int})m_ICMPV6Type{\cf6 -}{\cf6 >}m_code;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 ICMP Checksum}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_ICMPV6Checksum;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 length of message}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_messageLength;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 message}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_messageBody;{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }j;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 void}{\cf1  }render(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}render({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 void}{\cf1  }renderExpanded(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}renderExpanded({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }getTexts(){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(m_texts.empty()){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4 IPV6}{\cf6 :}{\cf6 :}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 ICMPV6Type}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Type: \{\} (\{\})}{\cf15 "},{\cf1  }m_ICMPV6Type{\cf6 -}{\cf6 >}m_typeStr,{\cf1  }m_ICMPV6Type{\cf6 -}{\cf6 >}m_type);{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 ICMPV6Code}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Code: \{\} (\{\})}{\cf15 "},{\cf1  }m_ICMPV6Type{\cf6 -}{\cf6 >}m_codeStr,{\cf1  }m_ICMPV6Type{\cf6 -}{\cf6 >}m_code);{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 ICMPV6Checksum}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Checksum: \{:x\}}{\cf15 "},{\cf1  }m_ICMPV6Checksum);{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 ICMPV6Length}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Length of the Message: \{\}}{\cf15 "},{\cf1  }m_messageLength);{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 ICMPV6Message}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 The Message: \{\}}{\cf15 "},{\cf1  }m_messageBody);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //ICMPV6Type.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "ICMPV6Type.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../Eth/Packet.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../../../Base/Data.h"}{\cf3 \par
}{\cf1 \par
}ICMPV6Type{\cf6 :}{\cf6 :}ICMPV6Type({\cf4 Packet}{\cf6 *}{\cf1  }packet){\cf1  }\{{\cf1 \par
}{\cf1 	}m_type{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseChar();{\cf1 \par
}{\cf1 	}m_code{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseChar();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_typeStr{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}icmpv6Types[m_type];{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b switch}{\cf1  }(({\cf5 int})m_type){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 1}:{\cf1 \par
}{\cf1 		}m_codeStr{\cf1  }{\cf6 =}{\cf1  }resolveDestUnreach(m_code);{\cf1 \par
}{\cf1 		}{\cf4\b break};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 3}:{\cf1 \par
}{\cf1 		}m_codeStr{\cf1  }{\cf6 =}{\cf1  }resolveTimeExceeded(m_code);{\cf1 \par
}{\cf1 		}{\cf4\b break};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 4}:{\cf1 \par
}{\cf1 		}m_codeStr{\cf1  }{\cf6 =}{\cf1  }resolveParameterProblem(m_code);{\cf1 \par
}{\cf1 		}{\cf4\b break};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 138}:{\cf1 \par
}{\cf1 		}m_codeStr{\cf1  }{\cf6 =}{\cf1  }resolveRouterRenumbering(m_code);{\cf1 \par
}{\cf1 		}{\cf4\b break};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 139}:{\cf1 \par
}{\cf1 		}m_codeStr{\cf1  }{\cf6 =}{\cf1  }resolveNodeQuery(m_code);{\cf1 \par
}{\cf1 		}{\cf4\b break};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 140}:{\cf1 \par
}{\cf1 		}m_codeStr{\cf1  }{\cf6 =}{\cf1  }resolveNodeInfo(m_code);{\cf1 \par
}{\cf1 		}{\cf4\b break};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 157}:{\cf1 \par
}{\cf1 		}m_codeStr{\cf1  }{\cf6 =}{\cf1  }resolveDupeAddrReq(m_code);{\cf1 \par
}{\cf1 		}{\cf4\b break};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 158}:{\cf1 \par
}{\cf1 		}m_codeStr{\cf1  }{\cf6 =}{\cf1  }resolveDupeAddrCon(m_code);{\cf1 \par
}{\cf1 		}{\cf4\b break};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 160}:{\cf1 \par
}{\cf1 		}m_codeStr{\cf1  }{\cf6 =}{\cf1  }resolveExtendedEchoReq(m_code);{\cf1 \par
}{\cf1 		}{\cf4\b break};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 161}:{\cf1 \par
}{\cf1 		}m_codeStr{\cf1  }{\cf6 =}{\cf1  }resolveExtendedEchoRep(m_code);{\cf1 \par
}{\cf1 		}{\cf4\b break};{\cf1 \par
}{\cf1 	}{\cf4\b default}{\cf6 :}{\cf1 \par
}{\cf1 		}m_codeStr{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}to_string(m_code);{\cf1 \par
}{\cf1 		}{\cf4\b break};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }ICMPV6Type{\cf6 :}{\cf6 :}resolveDestUnreach({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b switch}{\cf1  }(({\cf5 int})code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 0}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 no route to destination}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 1}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 communication with destination administratively prohibited}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 2}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 beyond scope of source address}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 3}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 address unreachable}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 4}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 port unreachable}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 5}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 source address failed ingress/egress policy}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 6}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 reject route to destination}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 7}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 Error in Source Routing Header}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 8}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 Headers too long}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }ICMPV6Type{\cf6 :}{\cf6 :}resolveTimeExceeded({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(({\cf5 int})code{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 hop limit exceeded in transit}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 fragment reassembly time exceeded}{\cf15 "};{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }ICMPV6Type{\cf6 :}{\cf6 :}resolveParameterProblem({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b switch}{\cf1  }(({\cf5 int})code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 0}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 erroneous header field encountered}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 1}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 unrecognized Next Header type encountered}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 2}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 unrecognized IPv6 option encountered}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 3}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 IPv6 First Fragment has incomplete IPv6 Header Chain}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 4}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 SR Upper-layer Header Error}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 5}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 Unrecognized Next Header type encountered by intermediate node}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 6}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 Extension header too big}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 7}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 Extension header chain too long}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 8}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 Too many extension headers}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 9}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 Too many options in extension header}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 10}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 Option too big}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }ICMPV6Type{\cf6 :}{\cf6 :}resolveRouterRenumbering({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b switch}{\cf1  }(({\cf5 int})code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 0}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 Router Renumbering Command}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 1}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 Router Renumbering Result}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 255}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 Sequence Number Reset}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }ICMPV6Type{\cf6 :}{\cf6 :}resolveNodeQuery({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b switch}{\cf1  }(({\cf5 int})code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 0}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 The Data field contains an IPv6 address which is the Subject of this Query.}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 1}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 The Data field contains a name which is the Subject of this Query, or is empty, as in the case of a NOOP.}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 2}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 The Data field contains an IPv4 address which is the Subject of this Query.}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }ICMPV6Type{\cf6 :}{\cf6 :}resolveNodeInfo({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b switch}{\cf1  }(({\cf5 int})code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 0}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 A successful reply. The Reply Data field may or may not be empty.}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 1}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 The Responder refuses to supply the answer. The Reply Data field will be empty.}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 2}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 The Qtype of the Query is unknown to the Responder. The Reply Data field will be empty.}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }ICMPV6Type{\cf6 :}{\cf6 :}resolveDupeAddrReq({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(({\cf5 int})code{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 DAR message}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 EDAR message with \{\}-bit ROVR field}{\cf15 "},{\cf1  }{\cf6 64}{\cf1  }{\cf6 *}{\cf1  }({\cf5 int})code);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }ICMPV6Type{\cf6 :}{\cf6 :}resolveDupeAddrCon({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(({\cf5 int})code{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 DAC message}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 EDAC message with \{\}-bit ROVR field}{\cf15 "},{\cf1  }{\cf6 64}{\cf1  }{\cf6 *}{\cf1  }({\cf5 int})code);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }ICMPV6Type{\cf6 :}{\cf6 :}resolveExtendedEchoReq({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 No Error}{\cf15 "};{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }ICMPV6Type{\cf6 :}{\cf6 :}resolveExtendedEchoRep({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b switch}{\cf1  }(({\cf5 int})code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 0}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 No Error}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 1}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 Malformed Query}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 2}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 No Such Interface}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 3}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 No Such Table Entry}{\cf15 "};{\cf1 \par
}{\cf1 	}{\cf4\b case}{\cf1  }{\cf6 4}:{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 Multiple Interfaces Satisfy Query}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //ICMPV6Type.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string>}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b Packet};{\cf1 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b ICMPV6Type}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }m_type;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }m_code;{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_typeStr;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_codeStr;{\cf1 \par
}{\cf1 \par
}{\cf1 	}ICMPV6Type({\cf4 Packet}{\cf6 *}{\cf1  }packet);{\cf1 \par
}{\cf1 \par
}{\cf4\b private}{\cf6 :}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }resolveDestUnreach({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code);{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 resolveTimeExceeded}({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code);{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 resolveParameterProblem}({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code);{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 resolveRouterRenumbering}({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code);{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 resolveNodeQuery}({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code);{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 resolveNodeInfo}({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code);{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 resolveDupeAddrReq}({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code);{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 resolveDupeAddrCon}({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code);{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 resolveExtendedEchoReq}({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code);{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 resolveExtendedEchoRep}({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code);{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //ICMPV6Types.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "ICMPV6Type.h"}{\cf3 \par
}{\cf1 \par
}{\cf2\i //IGMP.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../IP/IP.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../../GUI/Renderer.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <pcap.h>}{\cf3 \par
}{\cf1 \par
}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }report{\cf1  }{\cf6 =}{\cf1  }{\cf6 0x16};{\cf1 \par
}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }leave{\cf1  }{\cf6 =}{\cf1  }{\cf6 0x17};{\cf1 \par
}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }query{\cf1  }{\cf6 =}{\cf1  }{\cf6 0x11};{\cf1 \par
}{\cf1 \par
}{\cf4\b template}{\cf1  }{\cf6 <}{\cf4\b typename}{\cf1  }{\cf8\b IPVersion}{\cf6 >}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b IGMP}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }IPVersion{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 char}{\cf1  }m_groupType;{\cf1 \par
}{\cf1 	}{\cf5 char}{\cf1  }m_maxResp;{\cf1 \par
}{\cf1 	}{\cf5 short}{\cf1  }m_checksum;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_multicastAddr;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4 IGMP}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx){\cf1  }{\cf6 :}{\cf1  }IPVersion(header,{\cf1  }pkt_data,{\cf1  }idx){\cf1  }\{{\cf1 \par
}{\cf1 		}m_groupType{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseChar();{\cf1 \par
}{\cf1 		}m_maxResp{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseChar();{\cf1 \par
}{\cf1 		}m_checksum{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort();{\cf1 \par
}{\cf1 		}m_multicastAddr{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseIPV4();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_strType{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 IGMP (}{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_strType{\cf1  }{\cf6 +}{\cf1  }{\cf15 "}{\cf15 )}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}{\cf4\b switch}{\cf1  }(({\cf5 int})m_groupType){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b case}{\cf1  }({\cf11 report}):{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Membership Report Group }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_multicastAddr;{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}{\cf4\b case}{\cf1  }({\cf11 leave}):{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Leave Group }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_multicastAddr;{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}{\cf4\b case}{\cf1  }({\cf11 query}):{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Membership Query, general}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}{\cf4\b default}{\cf6 :}{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 IGMP Packet}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_description{\cf1  }{\cf6 =}{\cf1  }ss.str();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 IGMP Title}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 proto}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 igmp}{\cf15 "}{\cf1  }\});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }toString(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 IGMP of group type }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_groupType{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  max resp time is }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_maxResp{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  for multicast addr: }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_multicastAddr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf17\b \\n}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }ss.str();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}json{\cf1  }jsonify(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }j{\cf1  }{\cf6 =}{\cf1  }IPVersion{\cf6 :}{\cf6 :}jsonify();{\cf1 \par
}{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 IGMP}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 start}{\cf15 "};{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Group Type}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_groupType;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Max Response Time}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_maxResp;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 IGMP Checksum}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_checksum;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Multicast Address}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_multicastAddr;{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }j;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 void}{\cf1  }render(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}render({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 void}{\cf1  }renderExpanded(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}renderExpanded({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }getTexts(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4 Packet}{\cf6 :}{\cf6 :}m_texts.empty()){\cf1  }\{{\cf1 \par
}{\cf1 			}IPVersion{\cf6 :}{\cf6 :}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 			}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 			}{\cf4\b switch}{\cf1  }(({\cf5 int})m_groupType){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b case}{\cf1  }({\cf11 report}):{\cf1 \par
}{\cf1 				}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 groupType}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Membership Report}{\cf15 "};{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}{\cf4\b case}{\cf1  }({\cf11 leave}):{\cf1 \par
}{\cf1 				}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 groupType}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Leave Group}{\cf15 "};{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}{\cf4\b case}{\cf1  }({\cf11 query}):{\cf1 \par
}{\cf1 				}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 groupType}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Membership Query}{\cf15 "};{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}{\cf4\b default}{\cf6 :}{\cf1 \par
}{\cf1 				}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 groupType}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Unknown}{\cf15 "};{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 IGMPType}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Type: \{\} (0x\{:x\})}{\cf15 "},{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 groupType}{\cf15 "}],{\cf1  }m_groupType);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 respTime}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Max Resp Time: \{\} sec (0x\{:x\})}{\cf15 "},{\cf1  }m_maxResp{\cf1  }{\cf6 /}{\cf1  }{\cf6 10},{\cf1  }m_maxResp);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 IGMPChecksum}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Checksum: 0x\{:x\}}{\cf15 "},{\cf1  }m_checksum);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 multicastAddr}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Multicast Address: \{\}}{\cf15 "},{\cf1  }m_multicastAddr);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //TCP.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPOptions/TCPOptions.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../Eth/Packet.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../IP/IP.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../../Win/SDK.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../../GUI/Renderer.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../.././../Base/Data.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../.././../Base/Logger.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../../Networks/capture.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <iostream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <bitset>}{\cf3 \par
}{\cf1 \par
}{\cf4\b template}{\cf1  }{\cf6 <}{\cf4\b typename}{\cf1  }{\cf8\b IPVersion}{\cf6 >}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b TCP}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }IPVersion{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_srcPort;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_destPort;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }m_seqNum;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }m_ackNum;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }m_TCPLength;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_TCPflags;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_window;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_TCPchecksum;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_urgentPtr;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_optSize;{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}vector{\cf6 <}TCPOption{\cf6 *}{\cf6 >}{\cf1  }m_options;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 long}{\cf1  }m_payloadLength;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_payload;{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_process;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4 TCP}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx){\cf1  }{\cf6 :}{\cf1  }IPVersion(header,{\cf1  }pkt_data,{\cf1  }idx){\cf1  }\{{\cf1 \par
}{\cf1 		}m_srcPort{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_destPort{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_seqNum{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseInt();{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_ackNum{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseInt();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }len{\cf1  }{\cf6 =}{\cf1  }({\cf5 unsigned}{\cf1  }{\cf5 char}){\cf4 Packet}{\cf6 :}{\cf6 :}parseChar();{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }flags{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseChar();{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_TCPLength{\cf1  }{\cf6 =}{\cf1  }(len{\cf1  }{\cf6 >}{\cf6 >}{\cf1  }{\cf6 4}){\cf1  }{\cf6 *}{\cf1  }{\cf6 4};{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_TCPflags{\cf1  }{\cf6 =}{\cf1  }(len{\cf1  }{\cf6 &}{\cf1  }{\cf6 0x1111}){\cf1  }{\cf6 |}{\cf1  }flags;{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_window{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_TCPchecksum{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_urgentPtr{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }ETHLEN{\cf1  }{\cf6 =}{\cf1  }{\cf6 14};{\cf1 \par
}{\cf1 		}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }NOP{\cf1  }{\cf6 =}{\cf1  }{\cf6 1};{\cf1 \par
}{\cf1 		}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }MSS{\cf1  }{\cf6 =}{\cf1  }{\cf6 2};{\cf1 \par
}{\cf1 		}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }WSCALE{\cf1  }{\cf6 =}{\cf1  }{\cf6 3};{\cf1 \par
}{\cf1 		}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }SACKPERM{\cf1  }{\cf6 =}{\cf1  }{\cf6 4};{\cf1 \par
}{\cf1 		}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }SACK{\cf1  }{\cf6 =}{\cf1  }{\cf6 5};{\cf1 \par
}{\cf1 		}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }TIMESTAMPS{\cf1  }{\cf6 =}{\cf1  }{\cf6 8};{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf5 int}{\cf1  }total{\cf1  }{\cf6 =}{\cf1  }m_TCPLength{\cf1  }{\cf6 +}{\cf1  }ETHLEN{\cf1  }{\cf6 +}{\cf1  }IPVersion{\cf6 :}{\cf6 :}m_headerLength;{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_optSize{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b while}{\cf1  }(total{\cf1  }{\cf6 -}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}getPos(){\cf1  }{\cf6 >}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }code{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseChar();{\cf1 \par
}{\cf1 \par
}{\cf1 			}TCPOption{\cf6 *}{\cf1  }opt;{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b switch}{\cf1  }(({\cf5 int})code){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b case}{\cf1  }{\cf11 NOP}:{\cf1 \par
}{\cf1 				}opt{\cf1  }{\cf6 =}{\cf1  }{\cf4\b new}{\cf1  }TCPNOP();{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}{\cf4\b case}{\cf1  }{\cf11 MSS}:{\cf1 \par
}{\cf1 				}opt{\cf1  }{\cf6 =}{\cf1  }{\cf4\b new}{\cf1  }TCPMSS({\cf4\b this});{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}{\cf4\b case}{\cf1  }{\cf11 WSCALE}:{\cf1 \par
}{\cf1 				}opt{\cf1  }{\cf6 =}{\cf1  }{\cf4\b new}{\cf1  }TCPWScale({\cf4\b this});{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}{\cf4\b case}{\cf1  }{\cf11 SACKPERM}:{\cf1 \par
}{\cf1 				}opt{\cf1  }{\cf6 =}{\cf1  }{\cf4\b new}{\cf1  }TCPSACKPerm({\cf4\b this});{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}{\cf4\b case}{\cf1  }{\cf11 SACK}:{\cf1 \par
}{\cf1 				}opt{\cf1  }{\cf6 =}{\cf1  }{\cf4\b new}{\cf1  }TCPSACK({\cf4\b this});{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}{\cf4\b default}{\cf6 :}{\cf1 \par
}{\cf1 				}{\cf2\i // this gets compiled out anyway, but i felt i should keep it in\par
}{\cf1 				}{\cf2\i // like a battle scar ;)\par
}{\cf3 #}{\cf3 ifdef _DEBUG}{\cf3 \par
}{\cf1 				}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 				}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 bad tcp option of code }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }code{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  at packet index }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }idx;{\cf1 \par
}{\cf1 				}{\cf4\b Logger}{\cf6 :}{\cf6 :}log(ss.str());{\cf1 \par
}{\cf3 #}{\cf3 endif}{\cf3 \par
}{\cf1 				}{\cf4\b continue};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_optSize{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }opt{\cf6 -}{\cf6 >}m_size;{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_options.push_back(opt);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4 Packet}{\cf6 :}{\cf6 :}m_len{\cf1  }{\cf6 >}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}getPos()){\cf1  }\{{\cf1 \par
}{\cf1 			}m_payloadLength{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_len{\cf1  }{\cf6 -}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}getPos();{\cf1 \par
}{\cf1 			}m_payload{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parse(m_payloadLength);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_process{\cf1  }{\cf6 =}{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}getProcFromPort(m_srcPort);{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(m_process.at({\cf6 0}){\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf15 '}{\cf15 <}{\cf15 '}{\cf1  }{\cf6 &}{\cf6 &}{\cf1  }m_process.at(m_process.size(){\cf1  }{\cf6 -}{\cf1  }{\cf6 1}){\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf15 '}{\cf15 >}{\cf15 '}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf2\i // bad process try again\par
}{\cf1 			}m_process{\cf1  }{\cf6 =}{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}getProcFromPort(m_destPort);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_strType{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 TCP (}{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_strType{\cf1  }{\cf6 +}{\cf1  }{\cf15 "}{\cf15 )}{\cf15 "};{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 (}{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_process{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 ) }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_srcPort{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  -> }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_destPort{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  payload length = }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_payloadLength;{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_description{\cf1  }{\cf6 =}{\cf1  }ss.str();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 TCP Title}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 TCP Flags}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 TCP Options}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 proto}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 tcp}{\cf15 "}{\cf1  }\});{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 sport}{\cf15 "},{\cf1  }std{\cf6 :}{\cf6 :}to_string(m_srcPort){\cf1  }\});{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 dport}{\cf15 "},{\cf1  }std{\cf6 :}{\cf6 :}to_string(m_destPort){\cf1  }\});{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 proc}{\cf15 "},{\cf1  }m_process.c_str(){\cf1  }\});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }toString(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 TCPV4 Packet at }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 time}{\cf15 "}]{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  from }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }IPVersion{\cf6 :}{\cf6 :}m_srcAddr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  at port }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_srcPort{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  to }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }IPVersion{\cf6 :}{\cf6 :}m_destAddr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  at port }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_destPort;{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(m_options.size(){\cf1  }{\cf6 >}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  with options : (}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b for}{\cf1  }({\cf4\b auto}{\cf1  }o{\cf1  }{\cf6 :}{\cf1  }m_options){\cf1  }\{{\cf1 \par
}{\cf1 				}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }o{\cf6 -}{\cf6 >}toString(){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 , }{\cf15 "};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 )}{\cf15 "};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 . Proccess = }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_process{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 .}{\cf17\b \\n}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }ss.str();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}json{\cf1  }jsonify(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }j{\cf1  }{\cf6 =}{\cf1  }IPVersion{\cf6 :}{\cf6 :}jsonify();{\cf1 \par
}{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 TCP}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 start}{\cf15 "};{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Source Port}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_srcPort;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Destination Port}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_destPort;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Sequence Number}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_seqNum;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Acknoledgement Number}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_ackNum;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 TCP Header Length}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_TCPLength;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 TCP Flags}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_TCPflags;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Window}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_window;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 TCP Checksum}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_TCPchecksum;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Urgent Pointer}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_urgentPtr;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Number of Options}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_options.size();{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}{\cf4\b for}{\cf1  }({\cf4\b auto}{\cf1  }o{\cf1  }{\cf6 :}{\cf1  }m_options){\cf1  }\{{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }o{\cf6 -}{\cf6 >}toString(){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 , }{\cf15 "};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 TCP Options}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }ss.str();{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Payload Length}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_payloadLength;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Payload}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_payload;{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }j;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 void}{\cf1  }render(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}render({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 void}{\cf1  }renderExpanded(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}renderExpanded({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }getTexts(){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4 Packet}{\cf6 :}{\cf6 :}m_texts.empty()){\cf1  }\{{\cf1 \par
}{\cf1 			}IPVersion{\cf6 :}{\cf6 :}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 TCP Title}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Transmission Control Protocol, Src Port: \{\}, Dst Port: \{\}, Seq: \{\}, Len: \{\}}{\cf15 "},{\cf1  }m_srcPort,{\cf1  }m_destPort,{\cf1  }m_seqNum,{\cf1  }m_payloadLength);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 SPort}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Source Port: \{\}}{\cf15 "},{\cf1  }m_srcPort);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 DPort}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Destination Port: \{\}}{\cf15 "},{\cf1  }m_destPort);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 SeqNum}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Sequence Number: \{\}}{\cf15 "},{\cf1  }m_seqNum);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 AckNum}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Acknowledgement Number: \{\}}{\cf15 "},{\cf1  }m_ackNum);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 HeaderLen}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 \{\}  . . . . = Header Length: \{\} bytes (\{\})}{\cf15 "},{\cf1  }std{\cf6 :}{\cf6 :}bitset{\cf6 <}{\cf6 4}{\cf6 >}(m_TCPLength).to_string(),{\cf1  }({\cf5 int})m_TCPLength,{\cf1  }(({\cf5 int})m_TCPLength{\cf1  }{\cf6 /}{\cf1  }{\cf6 4}));{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b auto}{\cf1  }flagBits{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}bitset{\cf6 <}{\cf6 12}{\cf6 >}(m_TCPflags).to_string();{\cf1 \par
}{\cf1 			}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}array{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }{\cf6 9}{\cf6 >}{\cf1  }flagNames{\cf1  }{\cf6 =}{\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf15 "}{\cf15 Accurate ECN}{\cf15 "},{\cf1 \par
}{\cf1 				}{\cf15 "}{\cf15 Congestion Window Reduced}{\cf15 "},{\cf1 \par
}{\cf1 				}{\cf15 "}{\cf15 ECN-Echo}{\cf15 "},{\cf1 \par
}{\cf1 				}{\cf15 "}{\cf15 Urgent}{\cf15 "},{\cf1 \par
}{\cf1 				}{\cf15 "}{\cf15 Acknowledgement}{\cf15 "},{\cf1 \par
}{\cf1 				}{\cf15 "}{\cf15 Push}{\cf15 "},{\cf1 \par
}{\cf1 				}{\cf15 "}{\cf15 Reset}{\cf15 "},{\cf1 \par
}{\cf1 				}{\cf15 "}{\cf15 Syn}{\cf15 "},{\cf1 \par
}{\cf1 				}{\cf15 "}{\cf15 Fin}{\cf15 "},{\cf1 \par
}{\cf1 			}\};{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }{\cf6 9};{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 				}std{\cf6 :}{\cf6 :}string{\cf1  }base{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 . . . .  . . . .  . . . .}{\cf15 "};{\cf1 \par
}{\cf1 				}{\cf4\b if}{\cf1  }(flagBits[i{\cf1  }{\cf6 +}{\cf1  }{\cf6 3}]{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf15 '}{\cf15 1}{\cf15 '}){\cf1  }\{{\cf1 \par
}{\cf1 					}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}TCPFlags[i{\cf1  }{\cf6 +}{\cf1  }{\cf6 1}]{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 , }{\cf15 "};{\cf1 \par
}{\cf1 				}\}{\cf1 \par
}{\cf1 \par
}{\cf1 				}{\cf4\b auto}{\cf1  }idx{\cf1  }{\cf6 =}{\cf1  }i{\cf1  }{\cf6 +}{\cf1  }{\cf6 3};{\cf1 \par
}{\cf1 				}{\cf4\b auto}{\cf1  }group{\cf1  }{\cf6 =}{\cf1  }(idx{\cf1  }{\cf6 /}{\cf1  }{\cf6 4});{\cf1 \par
}{\cf1 \par
}{\cf1 				}base[idx{\cf1  }{\cf6 *}{\cf1  }{\cf6 2}{\cf1  }{\cf6 +}{\cf1  }group]{\cf1  }{\cf6 =}{\cf1  }flagBits[i{\cf1  }{\cf6 +}{\cf1  }{\cf6 3}];{\cf1 \par
}{\cf1 \par
}{\cf1 				}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf4\b Data}{\cf6 :}{\cf6 :}TCPFlags[i{\cf1  }{\cf6 +}{\cf1  }{\cf6 1}]]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15 \{\} = \{\}: \{\}}{\cf15 "},{\cf1  }base,{\cf1  }flagNames[i],{\cf1  }flagBits[idx]{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf15 '}{\cf15 1}{\cf15 '}{\cf1  }{\cf6 ?}{\cf1  }{\cf15 "}{\cf15 Set}{\cf15 "}{\cf1  }{\cf6 :}{\cf1  }{\cf15 "}{\cf15 Not Set}{\cf15 "});{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 RES}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15 \{\} .  . . . .  . . . . = Reserved: \{\}}{\cf15 "},{\cf1  }flagBits.substr({\cf6 0},{\cf1  }{\cf6 3}),{\cf1  }flagBits.starts_with({\cf15 "}{\cf15 000}{\cf15 "}){\cf1  }{\cf6 ?}{\cf1  }{\cf15 "}{\cf15 Not Set}{\cf15 "}{\cf1  }{\cf6 :}{\cf1  }{\cf15 "}{\cf15 Set}{\cf15 "});{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 TCPFlags}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15    Flags: 0x\{:03x\} (\{\})}{\cf15 "},{\cf1  }m_TCPflags,{\cf1  }ss.str());{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 TCPWindow}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Window: \{\}}{\cf15 "},{\cf1  }m_window);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 TCPChecksum}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Checksum: 0x\{:x\}}{\cf15 "},{\cf1  }m_TCPchecksum);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 UrgentPtr}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Urgent Pointer: \{\}}{\cf15 "},{\cf1  }m_urgentPtr);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 OptionTitle}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15    Options: (\{\} bytes)}{\cf15 "},{\cf1  }m_optSize);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //TCPMSS.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPMSS.h"}{\cf3 \par
}{\cf1 \par
}TCPMSS{\cf6 :}{\cf6 :}TCPMSS({\cf4 Packet}{\cf6 *}{\cf1  }packet){\cf1  }{\cf6 :}{\cf1  }TCPOption({\cf6 2}){\cf1  }\{{\cf1 \par
}{\cf1 	}m_len{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseChar();{\cf1 \par
}{\cf1 	}m_value{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseShort();{\cf1 \par
}{\cf1 	}m_size{\cf1  }{\cf6 =}{\cf1  }m_len;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf4\b const}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }TCPMSS{\cf6 :}{\cf6 :}toString(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Maximum Segment Size: \{\} bytes}{\cf15 "},{\cf1  }m_value);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //TCPMSS.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPOption.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b Packet};{\cf1 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b TCPMSS}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }TCPOption{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_len;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_value;{\cf1 \par
}{\cf1 \par
}{\cf1 	}TCPMSS({\cf4 Packet}{\cf6 *}{\cf1  }packet);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b const}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 toString}(){\cf1  }{\cf4\b override};{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //TCPNOP.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPNOP.h"}{\cf3 \par
}{\cf1 \par
}TCPNOP{\cf6 :}{\cf6 :}TCPNOP(){\cf1  }{\cf6 :}{\cf1  }TCPOption({\cf6 1}){\cf1  }\{{\cf1 \par
}{\cf1 	}m_size{\cf1  }{\cf6 =}{\cf1  }{\cf6 1};{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf4\b const}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }TCPNOP{\cf6 :}{\cf6 :}toString(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 No Operation (NOP)}{\cf15 "};{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //TCPNOP.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPOption.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b TCPNOP}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }TCPOption{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}TCPNOP();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b const}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 toString}(){\cf1  }{\cf4\b override};{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //TCPOption.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPOption.h"}{\cf3 \par
}{\cf1 \par
}TCPOption{\cf6 :}{\cf6 :}TCPOption({\cf5 int}{\cf1  }code){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b this}{\cf6 -}{\cf6 >}m_kind{\cf1  }{\cf6 =}{\cf1  }code;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf4\b const}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }TCPOption{\cf6 :}{\cf6 :}toString(){\cf1  }\{{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 	}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Anonymous Option of code }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_kind;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }ss.str();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //TCPOption.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <WinSock2.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <pcap.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <sstream>}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../Eth/Packet.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b TCPOption}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }m_kind;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }m_size;{\cf1 \par
}{\cf1 \par
}{\cf1 	}TCPOption({\cf5 int}{\cf1  }code);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b const}{\cf1  }{\cf4\b virtual}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 toString}();{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //TCPOptions.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPMSS.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPNOP.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPSACK.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPSACKPerm.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPOption.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPWScale.h"}{\cf3 \par
}{\cf1 \par
}{\cf2\i //TCPSACK.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPSACK.h"}{\cf3 \par
}{\cf1 \par
}TCPSACK{\cf6 :}{\cf6 :}TCPSACK({\cf4 Packet}{\cf6 *}{\cf1  }packet){\cf1  }{\cf6 :}{\cf1  }TCPOption({\cf6 5}){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }start{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}getPos(){\cf1  }{\cf6 -}{\cf1  }{\cf6 1};{\cf1 \par
}{\cf1 	}m_len{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseChar();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_edges{\cf1  }{\cf6 =}{\cf1  }(m_len{\cf1  }{\cf6 -}{\cf1  }{\cf6 2}){\cf1  }{\cf6 /}{\cf1  }{\cf6 8};{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_LEdges{\cf1  }{\cf6 =}{\cf1  }{\cf4\b new}{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}[m_edges];{\cf1 \par
}{\cf1 	}m_REdges{\cf1  }{\cf6 =}{\cf1  }{\cf4\b new}{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}[m_edges];{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }m_edges;{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 		}m_LEdges[i]{\cf1  }{\cf6 =}{\cf1  }({\cf5 unsigned}{\cf1  }{\cf5 int})packet{\cf6 -}{\cf6 >}parseInt();{\cf1 \par
}{\cf1 		}m_REdges[i]{\cf1  }{\cf6 =}{\cf1  }({\cf5 unsigned}{\cf1  }{\cf5 int})packet{\cf6 -}{\cf6 >}parseInt();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_size{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}getPos(){\cf1  }{\cf6 -}{\cf1  }start;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf4\b const}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }TCPSACK{\cf6 :}{\cf6 :}toString(){\cf1  }\{{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 	}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 SACK }{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }m_edges;{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_LEdges[i]{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 -}{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_REdges[i]{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  }{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }ss.str();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //TCPSACK.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPOption.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b Packet};{\cf1 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b TCPSACK}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }TCPOption{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }m_len;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf6 *}{\cf1  }m_REdges;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf6 *}{\cf1  }m_LEdges;{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }m_edges;{\cf1 \par
}{\cf1 \par
}{\cf1 	}TCPSACK({\cf4 Packet}{\cf6 *}{\cf1  }packet);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b const}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 toString}(){\cf1  }{\cf4\b override};{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //TCPSACKPerm.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPSACKPerm.h"}{\cf3 \par
}{\cf1 \par
}TCPSACKPerm{\cf6 :}{\cf6 :}TCPSACKPerm({\cf4 Packet}{\cf6 *}{\cf1  }packet){\cf1  }{\cf6 :}{\cf1  }TCPOption({\cf6 3}){\cf1  }\{{\cf1 \par
}{\cf1 	}m_len{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseChar();{\cf1 \par
}{\cf1 	}m_size{\cf1  }{\cf6 =}{\cf1  }m_len;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf4\b const}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }TCPSACKPerm{\cf6 :}{\cf6 :}toString(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 SACK Permitted}{\cf15 "};{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //TCPSACKPerm.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPOption.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b Packet};{\cf1 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b TCPSACKPerm}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }TCPOption{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_len;{\cf1 \par
}{\cf1 \par
}{\cf1 	}TCPSACKPerm({\cf4 Packet}{\cf6 *}{\cf1  }packet);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b const}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 toString}(){\cf1  }{\cf4\b override};{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //TCPWScale.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPWScale.h"}{\cf3 \par
}{\cf1 \par
}TCPWScale{\cf6 :}{\cf6 :}TCPWScale({\cf4 Packet}{\cf6 *}{\cf1  }packet){\cf1  }{\cf6 :}{\cf1  }TCPOption({\cf6 3}){\cf1  }\{{\cf1 \par
}{\cf1 	}m_len{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseChar();{\cf1 \par
}{\cf1 	}m_shift{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseChar();{\cf1 \par
}{\cf1 	}m_size{\cf1  }{\cf6 =}{\cf1  }m_len;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf4\b const}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }TCPWScale{\cf6 :}{\cf6 :}toString(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Window Sacle: \{\} (multiply by \{\})}{\cf15 "},{\cf1  }m_shift,{\cf1  }{\cf6 2}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }(m_shift{\cf1  }{\cf6 -}{\cf1  }{\cf6 1}));{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //TCPWScale.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "TCPOption.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b Packet};{\cf1 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b TCPWScale}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }TCPOption{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_len;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_shift;{\cf1 \par
}{\cf1 \par
}{\cf1 	}TCPWScale({\cf4 Packet}{\cf6 *}{\cf1  }packet);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b const}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 toString}(){\cf1  }{\cf4\b override};{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //UDP.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../Eth/Packet.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../IP/IP.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../src/Win/SDK.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../../GUI/Renderer.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b template}{\cf1  }{\cf6 <}{\cf4\b typename}{\cf1  }{\cf8\b IPVersion}{\cf6 >}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b UDP}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }IPVersion{\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b static_assert}(std{\cf6 :}{\cf6 :}is_base_of_v{\cf6 <}{\cf4 Packet},{\cf1  }IPVersion{\cf6 >},{\cf1 \par
}{\cf1 		}{\cf15 "}{\cf15 IPVersion must inherit from Packet}{\cf15 "});{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_srcPort;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_destPort;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_length;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_UDPChecksum;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }m_payloadLength;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_payload;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_process;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4 UDP}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx){\cf1  }{\cf6 :}{\cf1  }IPVersion(header,{\cf1  }pkt_data,{\cf1  }idx){\cf1  }\{{\cf1 \par
}{\cf1 		}m_srcPort{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_destPort{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_length{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_UDPChecksum{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_payloadLength{\cf1  }{\cf6 =}{\cf1  }m_length{\cf1  }{\cf6 -}{\cf1  }{\cf6 8};{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_payload{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parse(m_payloadLength);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_process{\cf1  }{\cf6 =}{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}getProcFromPort(m_srcPort);{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(m_process.at({\cf6 0}){\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf15 '}{\cf15 <}{\cf15 '}{\cf1  }{\cf6 &}{\cf6 &}{\cf1  }m_process.at(m_process.size(){\cf1  }{\cf6 -}{\cf1  }{\cf6 1}){\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf15 '}{\cf15 >}{\cf15 '}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf2\i // bad process try again\par
}{\cf1 			}m_process{\cf1  }{\cf6 =}{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}getProcFromPort(m_destPort);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_strType{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 UDP (}{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_strType{\cf1  }{\cf6 +}{\cf1  }{\cf15 "}{\cf15 )}{\cf15 "};{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 (}{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_process{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 ) }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_srcPort{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  -> }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_destPort{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  payload length = }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_payloadLength;{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_description{\cf1  }{\cf6 =}{\cf1  }ss.str();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 UDP Title}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 proto}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 udp}{\cf15 "}{\cf1  }\});{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 sport}{\cf15 "},{\cf1  }std{\cf6 :}{\cf6 :}to_string(m_srcPort){\cf1  }\});{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 dport}{\cf15 "},{\cf1  }std{\cf6 :}{\cf6 :}to_string(m_destPort){\cf1  }\});{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 proc}{\cf15 "},{\cf1  }m_process{\cf1  }\});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }toString(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 UDPV4 Packet at }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 time}{\cf15 "}]{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  from }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }IPVersion{\cf6 :}{\cf6 :}m_srcAddr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  at port }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_srcPort{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  to }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }IPVersion{\cf6 :}{\cf6 :}m_destAddr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  at port }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_destPort;{\cf1 \par
}{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 . Proccess = }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_process{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf17\b \\n}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }ss.str();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}json{\cf1  }jsonify(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }j{\cf1  }{\cf6 =}{\cf1  }IPVersion{\cf6 :}{\cf6 :}jsonify();{\cf1 \par
}{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 UDP}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 start}{\cf15 "};{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Source Port}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_srcPort;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Destination Port}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_destPort;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 UDP Length}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_length;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 UDP Checksum}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_UDPChecksum;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Payload Length}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_payloadLength;{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 Payload}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_payload;{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }j;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 void}{\cf1  }render(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}render({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 void}{\cf1  }renderExpanded(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}renderExpanded({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }getTexts(){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4 Packet}{\cf6 :}{\cf6 :}m_texts.empty()){\cf1  }\{{\cf1 \par
}{\cf1 			}IPVersion{\cf6 :}{\cf6 :}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 UDP Title}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 User Datagram Protocol, Src Port: \{\}, Dst Port: \{\}}{\cf15 "},{\cf1  }m_srcPort,{\cf1  }m_destPort);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 UDP SPort}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Source Port: \{\}}{\cf15 "},{\cf1  }m_srcPort);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 UDP DPort}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Destination Port: \{\}}{\cf15 "},{\cf1  }m_destPort);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 UDP Length}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Length: \{\}}{\cf15 "},{\cf1  }m_length);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 UDP Checksum}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Checksum: \{:x\}}{\cf15 "},{\cf1  }m_UDPChecksum);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 UDP Payload Length}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 UDP Payload Length: \{\}}{\cf15 "},{\cf1  }m_payloadLength);{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts[{\cf15 "}{\cf15 UDP Payload}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 UDP Payload: \{\}}{\cf15 "},{\cf1  }m_payload);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_texts;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //ARP.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "ARP.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <sstream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../GUI/Renderer.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../Base/Data.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <iostream>}{\cf3 \par
}{\cf1 \par
}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }ETHERTYPE_IPV4{\cf1  }{\cf6 =}{\cf1  }{\cf6 0x0800};{\cf1 \par
}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }ETHERTYPE_IPV6{\cf1  }{\cf6 =}{\cf1  }{\cf6 0x86DD};{\cf1 \par
}{\cf1 \par
}{\cf4 ARP}{\cf6 :}{\cf6 :}{\cf4 ARP}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx){\cf1  }{\cf6 :}{\cf1  }{\cf4 Packet}(header,{\cf1  }pkt_data,{\cf1  }idx){\cf1  }\{{\cf1 \par
}{\cf1 	}m_hardType{\cf1  }{\cf6 =}{\cf1  }parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_protoType{\cf1  }{\cf6 =}{\cf1  }parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_hardSize{\cf1  }{\cf6 =}{\cf1  }parseChar();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_protoSize{\cf1  }{\cf6 =}{\cf1  }parseChar();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_opcode{\cf1  }{\cf6 =}{\cf1  }parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_sendMAC{\cf1  }{\cf6 =}{\cf1  }parseMAC();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_sendAddr{\cf1  }{\cf6 =}{\cf1  }parseIPV4();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_targetMAC{\cf1  }{\cf6 =}{\cf1  }parseMAC();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_targetAddr{\cf1  }{\cf6 =}{\cf1  }parseIPV4();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4 Packet}{\cf6 :}{\cf6 :}m_strType{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 ARP}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(m_opcode{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 1}){\cf1  }\{{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 who is }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_targetAddr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 ? Tell }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_sendAddr;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }(m_opcode{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 2}){\cf1  }\{{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_sendAddr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  is at physical address }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_sendMAC;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 unknown opcode }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_opcode;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf17\b \\n}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_description{\cf1  }{\cf6 =}{\cf1  }ss.str();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 ARP Title}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 ip}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 arp}{\cf15 "}{\cf1  }\});{\cf1 \par
}{\cf1 	}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 saddr}{\cf15 "},{\cf1  }m_sendMAC{\cf1  }\});{\cf1 \par
}{\cf1 	}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 daddr}{\cf15 "},{\cf1  }m_targetMAC{\cf1  }\});{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4 ARP}{\cf6 :}{\cf6 :}toString(){\cf1  }\{{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 	}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 ARP Packet at }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_texts[{\cf15 "}{\cf15 time}{\cf15 "}];{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(m_opcode{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 1}){\cf1  }\{{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  who is }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_targetAddr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 ? Tell }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_sendAddr;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }(m_opcode{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 2}){\cf1  }\{{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_sendAddr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  is at physical address }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_sendMAC;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  unknown opcode }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_opcode;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf17\b \\n}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }ss.str();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}json{\cf1  }{\cf4 ARP}{\cf6 :}{\cf6 :}jsonify(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }j{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}jsonify();{\cf1 \par
}{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 ARP}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 start}{\cf15 "};{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 hardware type}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_hardType;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 protocol type}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_protoType;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 hardware size}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_hardSize;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 protocol size}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_protoSize;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 operation code}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_opcode;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 sender MAC Address}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_sendMAC;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 sender IP Address}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_sendAddr;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 target MAC Address}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_targetMAC;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 target IP Address}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_targetAddr;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }j;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4 ARP}{\cf6 :}{\cf6 :}getTexts(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(m_texts.empty()){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(m_opcode{\cf1  }{\cf6 <}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}arpCodes.size()){\cf1  }\{{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 opcode}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}arpCodes.at(m_opcode);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 opcode}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 unknown}{\cf15 "};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 arpTitle}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Address Resolution Protocol (\{\})}{\cf15 "},{\cf1  }m_texts[{\cf15 "}{\cf15 opcode}{\cf15 "}]);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 hardType}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Ethernet (\{\})}{\cf15 "},{\cf1  }std{\cf6 :}{\cf6 :}to_string(m_hardType));{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(m_hardType{\cf1  }{\cf6 <}{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}arpHard.size()){\cf1  }\{{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 hardType}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 \{\} (\{\})}{\cf15 "},{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}arpHard.at(m_hardType),{\cf1  }std{\cf6 :}{\cf6 :}to_string(m_hardType));{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }(m_hardType{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 256}){\cf1  }\{{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 hardType}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 HW_EXP2 (256)}{\cf15 "};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }(m_hardType{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 257}){\cf1  }\{{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 hardType}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 AEthernet (257)}{\cf15 "};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 hardType}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Unknown \{\}}{\cf15 "},{\cf1  }m_hardType);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b switch}{\cf1  }(m_protoType){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b case}{\cf1  }({\cf11 ETHERTYPE_IPV4}):{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 protoType}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 IPV4 (0x0800)}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}{\cf4\b case}{\cf1  }({\cf11 ETHERTYPE_IPV6}):{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 protoType}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 IPV6 (0x86DD)}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}{\cf4\b default}{\cf6 :}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 protoType}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Unknown}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 code}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 \{\} (\{\})}{\cf15 "},{\cf1  }m_texts[{\cf15 "}{\cf15 opcode}{\cf15 "}],{\cf1  }m_opcode);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }m_texts;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //ARP.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Packet.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b ARP}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }{\cf4 Packet}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_hardType;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_protoType;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_hardSize;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_protoSize;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_opcode;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_sendMAC;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_sendAddr;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_targetMAC;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_targetAddr;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4 ARP}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx);{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 toString}(){\cf1  }{\cf4\b override};{\cf1 \par
}{\cf1 	}json{\cf1  }{\cf8 jsonify}(){\cf1  }{\cf4\b override};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 void}{\cf1  }{\cf8 render}(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}render({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 void}{\cf1  }{\cf8 renderExpanded}(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}renderExpanded({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }getTexts(){\cf1  }{\cf4\b override};{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //Packet.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Packet.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <iostream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <sstream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <memory>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <json.hpp>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <pcap.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <iostream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <sstream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <ctime>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <WinSock2.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <regex>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <format>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <chrono>}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../Win/SDK.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../Base/Data.h"}{\cf3 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }{\cf5 bool}{\cf6 >}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}m_expands;{\cf1 \par
}{\cf1 \par
}{\cf4 Packet}{\cf6 :}{\cf6 :}{\cf4 Packet}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b this}{\cf6 -}{\cf6 >}m_idx{\cf1  }{\cf6 =}{\cf1  }idx;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // table indices are 1 indexed\par
}{\cf1 	}m_idxStr{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}to_string(idx{\cf1  }{\cf6 +}{\cf1  }{\cf6 1});{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_len{\cf1  }{\cf6 =}{\cf1  }header{\cf6 -}{\cf6 >}caplen;{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_pktData{\cf1  }{\cf6 =}{\cf1  }{\cf4\b new}{\cf1  }u_char[m_len];{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // we need a copy of the packet data for the hex data view (and need to do this like this because pkt_data isn't really _ours_)\par
}{\cf1 	}std{\cf6 :}{\cf6 :}copy(pkt_data,{\cf1  }pkt_data{\cf1  }{\cf6 +}{\cf1  }m_len,{\cf1  }m_pktData);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // same with the header, we just borrow them for a hot sec\par
}{\cf1 	}m_header{\cf1  }{\cf6 =}{\cf1  }{\cf4\b new}{\cf1  }pcap_pkthdr({\cf6 *}header);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf6 !}{\cf4\b Data}{\cf6 :}{\cf6 :}fileAdapter){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }now{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}chrono{\cf6 :}{\cf6 :}system_clock{\cf6 :}{\cf6 :}now();{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }duration{\cf1  }{\cf6 =}{\cf1  }now.time_since_epoch();{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }nanoseconds{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}chrono{\cf6 :}{\cf6 :}duration_cast{\cf6 <}std{\cf6 :}{\cf6 :}chrono{\cf6 :}{\cf6 :}nanoseconds{\cf6 >}(duration);{\cf1 \par
}{\cf1 		}m_epoch{\cf1  }{\cf6 =}{\cf1  }({\cf5 long}{\cf1  }{\cf5 double})nanoseconds.count(){\cf1  }{\cf6 /}{\cf1  }{\cf6 1e9};{\cf1 \par
}{\cf1 \par
}{\cf1 		}header{\cf6 -}{\cf6 >}ts.tv_sec{\cf1  }{\cf6 =}{\cf1  }({\cf5 int})m_epoch;{\cf1 \par
}{\cf1 		}header{\cf6 -}{\cf6 >}ts.tv_usec{\cf1  }{\cf6 =}{\cf1  }({\cf5 long})(m_epoch{\cf1  }{\cf6 -}{\cf1  }(({\cf5 int})m_epoch)){\cf1  }{\cf6 *}{\cf1  }{\cf6 1e6};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 		}m_epoch{\cf1  }{\cf6 =}{\cf1  }(({\cf5 double})header{\cf6 -}{\cf6 >}ts.tv_sec{\cf1  }{\cf6 +}{\cf1  }({\cf5 double})header{\cf6 -}{\cf6 >}ts.tv_usec{\cf1  }{\cf6 /}{\cf1  }{\cf6 1e6});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_phyDst{\cf1  }{\cf6 =}{\cf1  }parseMAC();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_phySrc{\cf1  }{\cf6 =}{\cf1  }parseMAC();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_type{\cf1  }{\cf6 =}{\cf1  }parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_description{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 base packet}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 Packet Title}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 len}{\cf15 "},{\cf1  }std{\cf6 :}{\cf6 :}to_string(m_len){\cf1  }\});{\cf1 \par
}{\cf1 	}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 num}{\cf15 "},{\cf1  }m_idxStr{\cf1  }\});{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf4 Packet}{\cf6 :}{\cf6 :}{\cf6 ~}{\cf4 Packet}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b delete}[]{\cf1  }m_pktData;{\cf1 \par
}{\cf1 	}{\cf4\b delete}{\cf1  }m_header;{\cf1 \par
}{\cf1 	}m_properties.clear();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}toString(){\cf1  }\{{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 	}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Base Packet at }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_texts[{\cf15 "}{\cf15 time}{\cf15 "}]{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  of len }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_len{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  type: }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_type{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  from }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_phySrc{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  to }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_phyDst{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf17\b \\n}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }ss.str();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}json{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}jsonify(){\cf1  }\{{\cf1 \par
}{\cf1 	}json{\cf1  }j{\cf1  }{\cf6 =}{\cf1  }\{{\cf1 \par
}{\cf1 		}\{{\cf15 "}{\cf15 header}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 start}{\cf15 "}\},{\cf1 \par
}{\cf1 		}\{{\cf15 "}{\cf15 time}{\cf15 "},{\cf1  }m_texts[{\cf15 "}{\cf15 time}{\cf15 "}]\},{\cf1 \par
}{\cf1 		}\{{\cf15 "}{\cf15 epoch}{\cf15 "},{\cf1  }m_epoch\},{\cf1 \par
}{\cf1 		}\{{\cf15 "}{\cf15 len}{\cf15 "},{\cf1  }m_len\},{\cf1 \par
}{\cf1 		}\{{\cf15 "}{\cf15 base packet}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 start}{\cf15 "}\},{\cf1 \par
}{\cf1 		}\{{\cf15 "}{\cf15 physical destination}{\cf15 "},{\cf1  }m_phyDst\},{\cf1 \par
}{\cf1 		}\{{\cf15 "}{\cf15 physical source}{\cf15 "},{\cf1  }m_phySrc\},{\cf1 \par
}{\cf1 		}\{{\cf15 "}{\cf15 packet type}{\cf15 "},{\cf1  }m_type\},{\cf1 \par
}{\cf1 	}\};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }j;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}padDate({\cf5 int}{\cf1  }t){\cf1  }\{{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 	}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }t;{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }s{\cf1  }{\cf6 =}{\cf1  }ss.str();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(s.length(){\cf1  }{\cf6 <}{\cf1  }{\cf6 2}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 0}{\cf15 "}{\cf1  }{\cf6 +}{\cf1  }s;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }s;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseMAC(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }size{\cf1  }{\cf6 =}{\cf1  }{\cf6 6};{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }mac;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }m_pos{\cf1  }{\cf6 +}{\cf1  }size;{\cf1  }m_pos{\cf1  }{\cf6 <}{\cf1  }i;{\cf1  }m_pos{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}setfill({\cf15 '}{\cf15 0}{\cf15 '}){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}setw({\cf6 2}){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}hex{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }({\cf5 int})m_pktData[m_pos]{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 :}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}mac{\cf1  }{\cf6 =}{\cf1  }ss.str();{\cf1 \par
}{\cf1 	}mac.pop_back();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }mac;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseIPV4(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }size{\cf1  }{\cf6 =}{\cf1  }{\cf6 4};{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }ip;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }m_pos{\cf1  }{\cf6 +}{\cf1  }size;{\cf1  }m_pos{\cf1  }{\cf6 <}{\cf1  }i;{\cf1  }m_pos{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }({\cf5 int})m_pktData[m_pos]{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 .}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}ip{\cf1  }{\cf6 =}{\cf1  }ss.str();{\cf1 \par
}{\cf1 	}ip.pop_back();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }ip;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseIPV6(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }size{\cf1  }{\cf6 =}{\cf1  }{\cf6 16};{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }ip;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }m_pos{\cf1  }{\cf6 +}{\cf1  }size;{\cf1  }m_pos{\cf1  }{\cf6 <}{\cf1  }i;{\cf1  }m_pos{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }{\cf6 2}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(({\cf5 int})m_pktData[m_pos]{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 0}{\cf1  }{\cf6 &}{\cf6 &}{\cf1  }({\cf5 int})m_pktData[m_pos{\cf1  }{\cf6 +}{\cf1  }{\cf6 1}]{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 :}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b continue};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}setfill({\cf15 '}{\cf15 0}{\cf15 '}){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}setw({\cf6 2}){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}hex{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }({\cf5 int})m_pktData[m_pos]{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}setfill({\cf15 '}{\cf15 0}{\cf15 '}){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}setw({\cf6 2}){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}hex{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }({\cf5 int})m_pktData[m_pos{\cf1  }{\cf6 +}{\cf1  }{\cf6 1}]{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 :}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}ip{\cf1  }{\cf6 =}{\cf1  }ss.str();{\cf1 \par
}{\cf1 	}ip.pop_back();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }ip;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parse({\cf5 unsigned}{\cf1  }{\cf5 long}{\cf1  }{\cf5 long}{\cf1  }size){\cf1  }\{{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }result;{\cf1 \par
}{\cf1 	}result.reserve(size{\cf1  }{\cf6 *}{\cf1  }{\cf6 2});{\cf1  }{\cf2\i // each byte is 2 hex\par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }end{\cf1  }{\cf6 =}{\cf1  }m_pos{\cf1  }{\cf6 +}{\cf1  }size;{\cf1  }m_pos{\cf1  }{\cf6 <}{\cf1  }end;{\cf1  }m_pos{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf5 char}{\cf1  }buf[{\cf6 3}];{\cf1 \par
}{\cf1 		}sprintf_s(buf,{\cf1  }{\cf15 "}{\cf15 %02x}{\cf15 "},{\cf1  }({\cf5 int})m_pktData[m_pos]);{\cf1  }{\cf2\i // fun isn't it\par
}{\cf1 		}result.append(buf);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }result;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}uint64_t{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}htonll(uint64_t{\cf1  }x){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(htonl({\cf6 1}){\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 1}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf2\i // the system is already in network byte order\par
}{\cf1 		}{\cf4\b return}{\cf1  }x;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf2\i // swap the bytes\par
}{\cf1 		}{\cf4\b return}{\cf1  }((uint64_t)htonl(x{\cf1  }{\cf6 &}{\cf1  }{\cf6 0xFFFFFFFF}){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf6 32}){\cf1  }{\cf6 |}{\cf1  }htonl(x{\cf1  }{\cf6 >}{\cf6 >}{\cf1  }{\cf6 32});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 int}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}htoni({\cf5 int}{\cf1  }x){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(htons({\cf6 1}){\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 1}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf2\i // the system is already in network byte order\par
}{\cf1 		}{\cf4\b return}{\cf1  }x;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf2\i // swap the bytes\par
}{\cf1 		}{\cf4\b return}{\cf1  }(({\cf5 int})htons(x{\cf1  }{\cf6 &}{\cf1  }{\cf6 0xFFFFFFFF}){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf6 16}){\cf1  }{\cf6 |}{\cf1  }htons(x{\cf1  }{\cf6 >}{\cf6 >}{\cf1  }{\cf6 16});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 long}{\cf1  }{\cf5 long}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseLongLong(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf5 long}{\cf1  }{\cf5 long}{\cf1  }out;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }len{\cf1  }{\cf6 =}{\cf1  }{\cf6 8};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // using memcpy and converting the network host byte order headache is just faster than using bitshifts\par
}{\cf1 	}std{\cf6 :}{\cf6 :}memcpy({\cf6 &}out,{\cf1  }m_pktData{\cf1  }{\cf6 +}{\cf1  }m_pos,{\cf1  }len);{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_pos{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }len;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }htonll(out);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 long}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseLong(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf5 long}{\cf1  }out;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }len{\cf1  }{\cf6 =}{\cf1  }{\cf6 4};{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}memcpy({\cf6 &}out,{\cf1  }m_pktData{\cf1  }{\cf6 +}{\cf1  }m_pos,{\cf1  }len);{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_pos{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }len;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }htonl(out);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 int}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseInt(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }out;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }len{\cf1  }{\cf6 =}{\cf1  }{\cf6 4};{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}memcpy({\cf6 &}out,{\cf1  }m_pktData{\cf1  }{\cf6 +}{\cf1  }m_pos,{\cf1  }len);{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_pos{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }len;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }htoni(out);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 short}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseShort(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf5 short}{\cf1  }out;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }len{\cf1  }{\cf6 =}{\cf1  }{\cf6 2};{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}memcpy({\cf6 &}out,{\cf1  }m_pktData{\cf1  }{\cf6 +}{\cf1  }m_pos,{\cf1  }len);{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_pos{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }len;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }htons(out);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 char}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}parseChar(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf5 char}{\cf1  }out;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }len{\cf1  }{\cf6 =}{\cf1  }{\cf6 1};{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}memcpy({\cf6 &}out,{\cf1  }m_pktData{\cf1  }{\cf6 +}{\cf1  }m_pos,{\cf1  }len);{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_pos{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }len;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }out;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}getTexts(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(m_texts.empty()){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b struct}{\cf1  }{\cf8\b tm}{\cf1  }timeinfo;{\cf1 \par
}{\cf1 		}time_t{\cf1  }epoch_t{\cf1  }{\cf6 =}{\cf1  }{\cf4\b static_cast}{\cf6 <}time_t{\cf6 >}(m_epoch);{\cf1 \par
}{\cf1 		}localtime_s({\cf6 &}timeinfo,{\cf1  }{\cf6 &}epoch_t);{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}{\cf5 int}{\cf1  }year{\cf1  }{\cf6 =}{\cf1  }{\cf6 1900}{\cf1  }{\cf6 +}{\cf1  }timeinfo.tm_year;{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }month{\cf1  }{\cf6 =}{\cf1  }padDate({\cf6 1}{\cf1  }{\cf6 +}{\cf1  }timeinfo.tm_mon);{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }day{\cf1  }{\cf6 =}{\cf1  }padDate(timeinfo.tm_mday);{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }hour{\cf1  }{\cf6 =}{\cf1  }padDate(timeinfo.tm_hour);{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }min{\cf1  }{\cf6 =}{\cf1  }padDate(timeinfo.tm_min);{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }sec{\cf1  }{\cf6 =}{\cf1  }padDate(timeinfo.tm_sec);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 time}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 \{\}/\{\}/\{\} \{\}:\{\}:\{\}}{\cf15 "},{\cf1  }year,{\cf1  }month,{\cf1  }day,{\cf1  }hour,{\cf1  }min,{\cf1  }sec);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 title}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Frame \{\}: \{\} bytes on wire (\{\} bits)}{\cf15 "},{\cf1  }m_idx{\cf1  }{\cf6 +}{\cf1  }{\cf6 1},{\cf1  }m_len,{\cf1  }(m_len{\cf1  }{\cf6 *}{\cf1  }{\cf6 8}));{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}string{\cf1  }result;{\cf1 \par
}{\cf1 		}result.reserve(m_len{\cf1  }{\cf6 *}{\cf1  }{\cf6 2});{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }m_len;{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf5 char}{\cf1  }buf[{\cf6 3}];{\cf1 \par
}{\cf1 			}sprintf_s(buf,{\cf1  }{\cf15 "}{\cf15 %02x}{\cf15 "},{\cf1  }({\cf5 int})m_pktData[i]);{\cf1 \par
}{\cf1 			}result.append(buf);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 hexData}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }result;{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }src1{\cf1  }{\cf6 =}{\cf1  }m_phySrc.substr({\cf6 0},{\cf1  }{\cf6 8});{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }src2{\cf1  }{\cf6 =}{\cf1  }m_phySrc.substr({\cf6 9},{\cf1  }{\cf6 8});{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 macSrc}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Source: \{\}\{\} (\{\})}{\cf15 "},{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}lookupMAC(src1),{\cf1  }src2,{\cf1  }m_phySrc);{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }dst1{\cf1  }{\cf6 =}{\cf1  }m_phyDst.substr({\cf6 0},{\cf1  }{\cf6 8});{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }dst2{\cf1  }{\cf6 =}{\cf1  }m_phyDst.substr({\cf6 9},{\cf1  }{\cf6 8});{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 macDest}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Destination: \{\}\{\} (\{\})}{\cf15 "},{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}lookupMAC(dst1),{\cf1  }dst2,{\cf1  }m_phyDst);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }m_texts;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}formatBitSet(std{\cf6 :}{\cf6 :}string{\cf1  }bits){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf2\i // this regex just divides the bits to groups of four\par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}regex{\cf1  }r({\cf15 "}{\cf15 (.\{4\})}{\cf15 "});{\cf1 \par
}{\cf1 	}{\cf2\i // and then we put a space between them\par
}{\cf1 	}{\cf4\b return}{\cf1  }std{\cf6 :}{\cf6 :}regex_replace(bits,{\cf1  }r,{\cf1  }{\cf15 "}{\cf15 $1 }{\cf15 "});{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //Packet.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <ctime>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <WinSock2.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <pcap.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <json.hpp>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <imgui.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <GLFW/glfw3.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <map>}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../GUI/Renderer.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b using}{\cf1  }json{\cf1  }{\cf6 =}{\cf1  }nlohmann{\cf6 :}{\cf6 :}ordered_json;{\cf1 \par
}{\cf1 \par
}{\cf4\b enum}{\cf1  }{\cf4\b class}{\cf1  }{\cf8\b FilterFlag}{\cf1  }\{{\cf1 \par
}{\cf1 	}Unfiltered,{\cf1 \par
}{\cf1 	}Passed,{\cf1 \par
}{\cf1 	}Failed{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i // *slaps roof of class* this bad boy can fit so many members in it\par
}{\cf4\b class}{\cf1  }{\cf8\b Packet}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }m_idx;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_idxStr;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_description;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }{\cf5 bool}{\cf6 >}{\cf1  }m_expands;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // header stuff\par
}{\cf1 	}{\cf5 long}{\cf1  }{\cf5 double}{\cf1  }m_epoch;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }m_len;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // ether stuff\par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_phyDst;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_phySrc;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_type;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_strType;{\cf1 \par
}{\cf1 	}u_char{\cf6 *}{\cf1  }m_pktData;{\cf1 \par
}{\cf1 	}pcap_pkthdr{\cf6 *}{\cf1  }m_header;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }m_properties;{\cf1 \par
}{\cf1 \par
}{\cf1 	}FilterFlag{\cf1  }m_flag{\cf1  }{\cf6 =}{\cf1  }FilterFlag{\cf6 :}{\cf6 :}Unfiltered;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4 Packet}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx);{\cf1 \par
}{\cf1 	}{\cf4\b virtual}{\cf1  }{\cf6 ~}{\cf4 Packet}();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b virtual}{\cf1  }{\cf5 void}{\cf1  }{\cf8 render}(){\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}render({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b virtual}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}(){\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}renderExpanded({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // these aren't really used for anything other than debugging and hopefully compiled out :)\par
}{\cf1 	}{\cf4\b virtual}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 toString}();{\cf1 \par
}{\cf1 	}{\cf4\b virtual}{\cf1  }json{\cf1  }{\cf8 jsonify}();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // this is used to generate the texts needed for renderExpanded when they are needed, not when the packet is created\par
}{\cf1 	}{\cf2\i // this saves A LOT of time when processing packets\par
}{\cf1 	}{\cf4\b virtual}{\cf1  }std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // functions to hopefully both optimize and obfuscate the way data is parsed from the packet data\par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 parseMAC}();{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 parseIPV4}();{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 parseIPV6}();{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 parse}({\cf5 unsigned}{\cf1  }{\cf5 long}{\cf1  }{\cf5 long}{\cf1  }size);{\cf1 \par
}{\cf1 	}{\cf5 long}{\cf1  }{\cf5 long}{\cf1  }{\cf8 parseLongLong}();{\cf1 \par
}{\cf1 	}{\cf5 long}{\cf1  }{\cf8 parseLong}();{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }{\cf8 parseInt}();{\cf1 \par
}{\cf1 	}{\cf5 short}{\cf1  }{\cf8 parseShort}();{\cf1 \par
}{\cf1 	}{\cf5 char}{\cf1  }{\cf8 parseChar}();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // helper function to seperate the bits in a more nice looking way (groups of 4)\par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 formatBitSet}(std{\cf6 :}{\cf6 :}string{\cf1  }bits);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }{\cf8 getPos}(){\cf1  }{\cf4\b const}{\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }m_pos;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf4\b protected}{\cf6 :}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }m_texts;{\cf1 \par
}{\cf1 \par
}{\cf4\b private}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }m_pos{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // packet-only helper functions\par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 padDate}({\cf5 int}{\cf1  }t);{\cf1 \par
}{\cf1 	}uint64_t{\cf1  }{\cf8 htonll}(uint64_t{\cf1  }x);{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }{\cf8 htoni}({\cf5 int}{\cf1  }x);{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //IP.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf2\i // easier include for the data packets :)\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "IPV4.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "IPV6.h"}{\cf3 \par
}{\cf1 \par
}{\cf2\i //IPV4.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "IPV4.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <sstream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <vector>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../Base/Logger.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../Capture.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <iostream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <bitset>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <ws2def.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../Base/Data.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../Win/SDK.h"}{\cf3 \par
}{\cf1 \par
}{\cf4 IPV4}{\cf6 :}{\cf6 :}{\cf4 IPV4}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx){\cf1  }{\cf6 :}{\cf1  }{\cf4 Packet}(header,{\cf1  }pkt_data,{\cf1  }idx){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }start{\cf1  }{\cf6 =}{\cf1  }getPos();{\cf1 \par
}{\cf1 	}m_headerLength{\cf1  }{\cf6 =}{\cf1  }(parseChar(){\cf1  }{\cf6 &}{\cf1  }{\cf6 0x0000FFFF}){\cf1  }{\cf6 *}{\cf1  }{\cf6 4};{\cf1 \par
}{\cf1 	}m_differServ{\cf1  }{\cf6 =}{\cf1  }parseChar();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_totalLength{\cf1  }{\cf6 =}{\cf1  }parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_identification{\cf1  }{\cf6 =}{\cf1  }parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_flags{\cf1  }{\cf6 =}{\cf1  }(pkt_data[getPos()]{\cf1  }{\cf6 &}{\cf1  }{\cf6 224});{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_fragmentationOffset{\cf1  }{\cf6 =}{\cf1  }parseShort(){\cf1  }{\cf6 &}{\cf1  }{\cf6 8191};{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_ttl{\cf1  }{\cf6 =}{\cf1  }parseChar();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_proto{\cf1  }{\cf6 =}{\cf1  }parseChar();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_headerChecksum{\cf1  }{\cf6 =}{\cf1  }parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_srcAddr{\cf1  }{\cf6 =}{\cf1  }parseIPV4();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_destAddr{\cf1  }{\cf6 =}{\cf1  }parseIPV4();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }diff{\cf1  }{\cf6 =}{\cf1  }(m_headerLength{\cf1  }{\cf6 +}{\cf1  }start){\cf1  }{\cf6 -}{\cf1  }getPos();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_IPoptionsCount{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b while}{\cf1  }(diff{\cf1  }{\cf6 >}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 		}m_IPoptionsCount{\cf6 +}{\cf6 +};{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }temp{\cf1  }{\cf6 =}{\cf1  }getPos();{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf5 int}{\cf1  }code{\cf1  }{\cf6 =}{\cf1  }pkt_data[getPos()]{\cf1  }{\cf6 &}{\cf1  }{\cf6 31};{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b constexpr}{\cf1  }{\cf4\b auto}{\cf1  }routerAlert{\cf1  }{\cf6 =}{\cf1  }{\cf6 20};{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b switch}{\cf1  }(code){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b case}{\cf1  }{\cf11 routerAlert}:{\cf1 \par
}{\cf1 			}m_opts.push_back({\cf4\b new}{\cf1  }RouterAlert({\cf4\b this}));{\cf1 \par
}{\cf1 			}m_optSize{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }m_opts.at(m_opts.size(){\cf1  }{\cf6 -}{\cf1  }{\cf6 1}){\cf6 -}{\cf6 >}m_length;{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}{\cf4\b default}{\cf6 :}{\cf1 \par
}{\cf3 #}{\cf3 ifdef _DEBUG}{\cf3 \par
}{\cf1 			}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 bad ip option of packet data: }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }code;{\cf1 \par
}{\cf1 			}{\cf4\b Logger}{\cf6 :}{\cf6 :}log(ss.str());{\cf1 \par
}{\cf1 			}parse(diff);{\cf1 \par
}{\cf1 			}diff{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf3 #}{\cf3 endif}{\cf3 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}diff{\cf1  }{\cf6 -}{\cf6 =}{\cf1  }(getPos(){\cf1  }{\cf6 -}{\cf1  }temp);{\cf1 \par
}{\cf1 		}m_expands.insert(\{{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 option %d}{\cf15 "},{\cf1  }m_IPoptionsCount{\cf1  }{\cf6 -}{\cf1  }{\cf6 1}),{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4 Packet}{\cf6 :}{\cf6 :}m_strType{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 IPV4}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 IPV4 Title}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 	}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 DifferServ}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 	}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 Flags}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 	}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 Options General}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 ip}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 v4}{\cf15 "}{\cf1  }\});{\cf1 \par
}{\cf1 	}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 saddr}{\cf15 "},{\cf1  }m_srcAddr{\cf1  }\});{\cf1 \par
}{\cf1 	}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 daddr}{\cf15 "},{\cf1  }m_destAddr{\cf1  }\});{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4 IPV4}{\cf6 :}{\cf6 :}toString(){\cf1  }\{{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 	}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 IPV4 Packet at }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_texts[{\cf15 "}{\cf15 time}{\cf15 "}]{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  of length }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_totalLength{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  from }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_srcAddr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  to }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_destAddr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  transfer protocol is }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_proto{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  with options: }{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }m_IPoptionsCount;{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_opts.at(i){\cf6 -}{\cf6 >}toString(){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 , }{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf17\b \\n}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }ss.str();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}json{\cf1  }{\cf4 IPV4}{\cf6 :}{\cf6 :}jsonify(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }j{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}jsonify();{\cf1 \par
}{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 IPV4}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 start}{\cf15 "};{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 IPV4 Header Length}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_headerLength;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Differentiated Services}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_differServ;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Total Length}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_totalLength;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Identification}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_identification;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Flags}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_flags;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Fragmentation Offset}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_fragmentationOffset;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Time to Live}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_ttl;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 protocol}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_proto;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 IPV4 Checksum}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_headerChecksum;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Source Address}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_srcAddr;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Destination Address}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_destAddr;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 IP Options Count}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_IPoptionsCount;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(m_IPoptionsCount{\cf1  }{\cf6 >}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 		}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }m_IPoptionsCount;{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_opts.at(i){\cf6 -}{\cf6 >}toString(){\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 , }{\cf15 "};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}j[{\cf15 "}{\cf15 IP Options}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }ss.str();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }j;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4 IPV4}{\cf6 :}{\cf6 :}getTexts(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(m_texts.empty()){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 IPTitle}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Internet Protocol Version 4, Src: \{\}, Dst: \{\}}{\cf15 "},{\cf1  }m_srcAddr,{\cf1  }m_destAddr);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 headerLen}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 . . . . \{\} = Header Length: \{\} bytes (\{\})}{\cf15 "},{\cf1  }std{\cf6 :}{\cf6 :}bitset{\cf6 <}{\cf6 4}{\cf6 >}(m_headerLength).to_string(),{\cf1  }({\cf5 int})m_headerLength,{\cf1  }(m_headerLength{\cf1  }{\cf6 /}{\cf1  }{\cf6 4}));{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }dscp{\cf1  }{\cf6 =}{\cf1  }m_differServ{\cf1  }{\cf6 &}{\cf1  }{\cf6 0xFFFFFF00};{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }ecn{\cf1  }{\cf6 =}{\cf1  }m_differServ{\cf1  }{\cf6 &}{\cf1  }{\cf6 0x000000FF};{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 differServ}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15    Differentiated Services Field: \{\}, (DSCP: \{\}, ECN: \{\})}{\cf15 "},{\cf1  }m_differServ,{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}dscpMap[dscp],{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}ecnMap[ecn]);{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}bitset{\cf6 <}{\cf6 6}{\cf6 >}{\cf1  }dscpBits;{\cf1 \par
}{\cf1 		}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }{\cf6 6};{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 			}dscpBits[i]{\cf1  }{\cf6 =}{\cf1  }(m_differServ{\cf1  }{\cf6 >}{\cf6 >}{\cf1  }i){\cf1  }{\cf6 &}{\cf1  }{\cf6 1};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}bitset{\cf6 <}{\cf6 2}{\cf6 >}{\cf1  }ecnBits;{\cf1 \par
}{\cf1 		}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }{\cf6 2};{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 			}ecnBits[i]{\cf1  }{\cf6 =}{\cf1  }(m_differServ{\cf1  }{\cf6 >}{\cf6 >}{\cf1  }({\cf6 6}{\cf1  }{\cf6 +}{\cf1  }i)){\cf1  }{\cf6 &}{\cf1  }{\cf6 1};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 DSCP}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15 \{\} . . = Differentiated Services Codepoint: \{\} (\{\})}{\cf15 "},{\cf1  }formatBitSet(dscpBits.to_string()),{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}dscpMap[dscp],{\cf1  }dscp);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 ECN}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15 . . . .  . . \{\} = Explicit Congestion Notification: \{\} (\{\})}{\cf15 "},{\cf1  }ecnBits.to_string(),{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}ecnMap[ecn],{\cf1  }ecn);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 ID}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Identification: 0x\{:x\} (\{\})}{\cf15 "},{\cf1  }m_identification,{\cf1  }m_identification);{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}bitset{\cf6 <}{\cf6 3}{\cf6 >}{\cf1  }flagBits;{\cf1 \par
}{\cf1 		}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }{\cf6 3};{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 			}flagBits[i]{\cf1  }{\cf6 =}{\cf1  }(m_flags{\cf1  }{\cf6 >}{\cf6 >}{\cf1  }({\cf6 5}{\cf1  }{\cf6 +}{\cf1  }i)){\cf1  }{\cf6 &}{\cf1  }{\cf6 1};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 IPFlags}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15    \{\} .  . . . . = Flags: 0x\{:x\}}{\cf15 "},{\cf1  }flagBits.to_string(),{\cf1  }flagBits.to_ulong());{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 resBits}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15    \{\} . . .  . . . . = Reserved bit: \{\}}{\cf15 "},{\cf1  }({\cf5 int})flagBits[{\cf6 0}],{\cf1  }({\cf5 int})flagBits[{\cf6 0}]{\cf1  }{\cf6 ?}{\cf1  }{\cf15 "}{\cf15 Set}{\cf15 "}{\cf1  }{\cf6 :}{\cf1  }{\cf15 "}{\cf15 Not Set}{\cf15 "});{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 dfBits}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15    . \{\} . .  . . . . = Don't Fragment: \{\}}{\cf15 "},{\cf1  }({\cf5 int})flagBits[{\cf6 1}],{\cf1  }({\cf5 int})flagBits[{\cf6 1}]{\cf1  }{\cf6 ?}{\cf1  }{\cf15 "}{\cf15 Set}{\cf15 "}{\cf1  }{\cf6 :}{\cf1  }{\cf15 "}{\cf15 Not Set}{\cf15 "});{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 mfBits}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15    . . \{\} .   . . . . = More Fragments: \{\}}{\cf15 "},{\cf1  }({\cf5 int})flagBits[{\cf6 2}],{\cf1  }({\cf5 int})flagBits[{\cf6 2}]{\cf1  }{\cf6 ?}{\cf1  }{\cf15 "}{\cf15 Set}{\cf15 "}{\cf1  }{\cf6 :}{\cf1  }{\cf15 "}{\cf15 Not Set}{\cf15 "});{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}bitset{\cf6 <}{\cf6 13}{\cf6 >}{\cf1  }fragBits;{\cf1 \par
}{\cf1 		}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }{\cf6 13};{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 			}fragBits[i]{\cf1  }{\cf6 =}{\cf1  }(m_fragmentationOffset{\cf1  }{\cf6 >}{\cf6 >}{\cf1  }i){\cf1  }{\cf6 &}{\cf1  }{\cf6 1};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 offset}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 . . . \{\}  \{\} = Fragmentation Offset: \{\}}{\cf15 "},{\cf1  }fragBits.to_string().at({\cf6 0}),{\cf1  }formatBitSet(fragBits.to_string().substr({\cf6 1},{\cf1  }{\cf6 12})),{\cf1  }m_fragmentationOffset);{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}string{\cf1  }prot{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Unknown}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b switch}{\cf1  }(m_proto){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_TCP}:{\cf1 \par
}{\cf1 			}prot{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 TCP}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_UDP}:{\cf1 \par
}{\cf1 			}prot{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 UDP}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_IGMP}:{\cf1 \par
}{\cf1 			}prot{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 IGMP}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_ICMP}:{\cf1 \par
}{\cf1 			}prot{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 ICMP}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 proto}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Protocol: \{\} (\{\})}{\cf15 "},{\cf1  }prot,{\cf1  }m_proto);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 IPChecksum}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Header Checksum: 0x\{:x\}}{\cf15 "},{\cf1  }m_headerChecksum);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 src}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Source Address: \{\}}{\cf15 "},{\cf1  }m_srcAddr);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 dest}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Destination Address: \{\}}{\cf15 "},{\cf1  }m_destAddr);{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(m_IPoptionsCount{\cf1  }{\cf6 >}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 			}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 			}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15    Options: (}{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_optSize{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  bytes): }{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }m_IPoptionsCount;{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 				}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_opts.at(i){\cf6 -}{\cf6 >}m_name{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 , }{\cf15 "};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 optStr}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }ss.str();{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }m_IPoptionsCount;{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b auto}{\cf1  }o{\cf1  }{\cf6 =}{\cf1  }m_opts.at(i);{\cf1 \par
}{\cf1 			}m_ipOptTexts.push_back(std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15    IP Option - \{\} (\{\} bytes): \{\}}{\cf15 "},{\cf1  }o{\cf6 -}{\cf6 >}m_name,{\cf1  }o{\cf6 -}{\cf6 >}m_length,{\cf1  }o{\cf6 -}{\cf6 >}m_value));{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }m_texts;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i // used for the hop map\par
}{\cf2\i // just gets the packet address that isn't the user's ip\par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4 IPV4}{\cf6 :}{\cf6 :}getAlienAddr(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(m_srcAddr{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}ipAddress){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }m_destAddr;{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }m_srcAddr;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //IPV4.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../Eth/Packet.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "IPV4Options/IPV4Options.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b IPV4}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }{\cf4 Packet}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }m_version{\cf1  }{\cf6 =}{\cf1  }{\cf6 4};{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }m_headerLength;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }m_differServ;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_totalLength;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_identification;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }m_flags;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }m_fragmentationOffset;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }m_ttl;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }m_proto;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_headerChecksum;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_srcAddr;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_destAddr;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }m_IPoptionsCount;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}vector{\cf6 <}IPV4Option{\cf6 *}{\cf6 >}{\cf1  }m_opts;{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}vector{\cf6 <}std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }m_ipOptTexts;{\cf1 \par
}{\cf1 	}{\cf5 long}{\cf1  }m_optSize;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4 IPV4}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx);{\cf1 \par
}{\cf1 	}{\cf6 ~}{\cf4 IPV4}(){\cf1  }{\cf4\b override}{\cf1  }{\cf6 =}{\cf1  }{\cf4\b default};{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 toString}(){\cf1  }{\cf4\b override};{\cf1 \par
}{\cf1 	}json{\cf1  }{\cf8 jsonify}(){\cf1  }{\cf4\b override};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b virtual}{\cf1  }{\cf5 void}{\cf1  }{\cf8 render}(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}render({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b virtual}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}renderExpanded({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b virtual}{\cf1  }std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }getTexts(){\cf1  }{\cf4\b override};{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 getAlienAddr}();{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //IPV4Option.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "IPV4Option.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <sstream>}{\cf3 \par
}{\cf1 \par
}IPV4Option{\cf6 :}{\cf6 :}IPV4Option({\cf5 int}{\cf1  }code,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }name){\cf1  }\{{\cf1 \par
}{\cf1 	}m_opCode{\cf1  }{\cf6 =}{\cf1  }code;{\cf1 \par
}{\cf1 	}m_name{\cf1  }{\cf6 =}{\cf1  }name;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }IPV4Option{\cf6 :}{\cf6 :}toString(){\cf1  }\{{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 	}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Unknown option of code }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_opCode;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }ss.str();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //IPV4Option.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <pcap.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <vector>}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b IPV4Option}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }m_opCode;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_name;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_value;{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }m_length;{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}vector{\cf6 <}std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }data;{\cf1 \par
}{\cf1 \par
}{\cf1 	}IPV4Option({\cf5 int}{\cf1  }code,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }name);{\cf1 \par
}{\cf1 	}{\cf4\b virtual}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 toString}();{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf1 \par
}{\cf2\i //IPV4Options.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "IPV4Option.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "RouterAlert.h"}{\cf3 \par
}{\cf1 \par
}{\cf2\i //RouterAlert.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "RouterAlert.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <sstream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <format>}{\cf3 \par
}{\cf1 \par
}RouterAlert{\cf6 :}{\cf6 :}RouterAlert({\cf4 Packet}{\cf6 *}{\cf1  }packet){\cf1  }{\cf6 :}{\cf1  }IPV4Option({\cf6 20},{\cf1  }{\cf15 "}{\cf15 Router Alert}{\cf15 "}){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }d{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseChar();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_copyOnFrag{\cf1  }{\cf6 =}{\cf1  }d{\cf1  }{\cf6 &}{\cf1  }{\cf6 128};{\cf1 \par
}{\cf1 	}m_clsType{\cf1  }{\cf6 =}{\cf1  }d{\cf1  }{\cf6 &}{\cf1  }{\cf6 96};{\cf1 \par
}{\cf1 	}m_code{\cf1  }{\cf6 =}{\cf1  }d{\cf1  }{\cf6 &}{\cf1  }{\cf6 31};{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_length{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseChar();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_extra{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(m_extra{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 		}m_value{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Router Shall examine Packet (0)}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }(m_extra{\cf1  }{\cf6 >}{\cf1  }{\cf6 0}{\cf1  }{\cf6 &}{\cf6 &}{\cf1  }m_extra{\cf1  }{\cf6 <}{\cf1  }{\cf6 33}){\cf1  }\{{\cf1 \par
}{\cf1 		}m_value{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Aggregated Reservation Nesting Level \{\} (\{\})}{\cf15 "},{\cf1  }m_extra,{\cf1  }m_extra);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }(m_extra{\cf1  }{\cf6 >}{\cf1  }{\cf6 32}{\cf1  }{\cf6 &}{\cf6 &}{\cf1  }m_extra{\cf1  }{\cf6 <}{\cf1  }{\cf6 65}){\cf1  }\{{\cf1 \par
}{\cf1 		}m_value{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Aggregated Reservation Nesting Level \{\} (\{\})}{\cf15 "},{\cf1  }m_extra{\cf1  }{\cf6 -}{\cf1  }{\cf6 33},{\cf1  }m_extra);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b else}{\cf1  }{\cf4\b if}{\cf1  }(m_extra{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 65}){\cf1  }\{{\cf1 \par
}{\cf1 		}m_value{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 NSIS NATFW NSLP (65)}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 		}m_value{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Bad Router Alert Code \{\}}{\cf15 "},{\cf1  }m_extra);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}data.push_back(std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf17\b \\t}{\cf15 Copy on fragmentation: \{\}}{\cf15 "},{\cf1  }m_copyOnFrag{\cf1  }{\cf6 ?}{\cf1  }{\cf15 "}{\cf15 Yes}{\cf15 "}{\cf1  }{\cf6 :}{\cf1  }{\cf15 "}{\cf15 No}{\cf15 "}));{\cf1 \par
}{\cf1 	}data.push_back(std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf17\b \\t}{\cf15 Class Type Code: \{\} (\{\})}{\cf15 "},{\cf1  }m_clsType{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 0}{\cf1  }{\cf6 ?}{\cf1  }{\cf15 "}{\cf15 Control}{\cf15 "}{\cf1  }{\cf6 :}{\cf1  }{\cf15 "}{\cf15 Debugging and measurement}{\cf15 "},{\cf1  }m_clsType));{\cf1 \par
}{\cf1 	}data.push_back({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf17\b \\t}{\cf15 Number: Router Alert (20)}{\cf15 "});{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }RouterAlert{\cf6 :}{\cf6 :}toString(){\cf1  }\{{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 	}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Route Alert Option of length }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_length;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }ss.str();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //RouterAlert.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "IPV4Option.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../Eth/Packet.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string>}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b Packet};{\cf1 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b RouterAlert}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }IPV4Option{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 bool}{\cf1  }m_copyOnFrag;{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }m_clsType;{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }m_code;{\cf1 \par
}{\cf1 	}{\cf5 short}{\cf1  }m_extra;{\cf1 \par
}{\cf1 \par
}{\cf1 	}RouterAlert({\cf4 Packet}{\cf6 *}{\cf1  }packet);{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 toString}(){\cf1  }{\cf4\b override};{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //IPV6.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "IPV6.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <sstream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../GUI/Renderer.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <bitset>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../../Base/Data.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <format>}{\cf3 \par
}{\cf1 \par
}{\cf4 IPV6}{\cf6 :}{\cf6 :}{\cf4 IPV6}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx){\cf1  }{\cf6 :}{\cf1  }{\cf4 Packet}(header,{\cf1  }pkt_data,{\cf1  }idx){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }thingy{\cf1  }{\cf6 =}{\cf1  }parseLong();{\cf1 \par
}{\cf1 	}m_trafficCls{\cf1  }{\cf6 =}{\cf1  }(({\cf5 short})(thingy{\cf1  }{\cf6 >}{\cf6 >}{\cf1  }{\cf6 30}){\cf1  }{\cf6 &}{\cf1  }{\cf6 4080});{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_flowLabel{\cf1  }{\cf6 =}{\cf1  }thingy{\cf1  }{\cf6 &}{\cf1  }{\cf6 1048575};{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_payloadLength{\cf1  }{\cf6 =}{\cf1  }parseShort();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_nextHeader{\cf1  }{\cf6 =}{\cf1  }parseChar();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_hopLimit{\cf1  }{\cf6 =}{\cf1  }parseChar();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_srcAddr{\cf1  }{\cf6 =}{\cf1  }parseIPV6();{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_destAddr{\cf1  }{\cf6 =}{\cf1  }parseIPV6();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(m_nextHeader{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }IPPROTO_HOPOPTS){\cf1  }\{{\cf1 \par
}{\cf1 		}m_options.push_back({\cf4\b new}{\cf1  }HopByHop({\cf4\b this}));{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 IPV6 Title}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 	}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 Traffic Class}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4 Packet}{\cf6 :}{\cf6 :}m_strType{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 IPV6}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 	}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 ip}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 v6}{\cf15 "}{\cf1  }\});{\cf1 \par
}{\cf1 	}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 saddr}{\cf15 "},{\cf1  }m_srcAddr{\cf1  }\});{\cf1 \par
}{\cf1 	}m_properties.insert(\{{\cf1  }{\cf15 "}{\cf15 daddr}{\cf15 "},{\cf1  }m_destAddr{\cf1  }\});{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4 IPV6}{\cf6 :}{\cf6 :}toString(){\cf1  }\{{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 	}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 IPV6 Packet at }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_texts[{\cf15 "}{\cf15 time}{\cf15 "}]{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  of length }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_payloadLength{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  from }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_srcAddr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  to }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_destAddr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 of payload length: }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_payloadLength{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15  transfer protocol is }{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }m_nextHeader{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf17\b \\n}{\cf15 "};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }ss.str();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}json{\cf1  }{\cf4 IPV6}{\cf6 :}{\cf6 :}jsonify(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }j{\cf1  }{\cf6 =}{\cf1  }{\cf4 Packet}{\cf6 :}{\cf6 :}jsonify();{\cf1 \par
}{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 IPV6}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 start}{\cf15 "};{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Version}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_version;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Traffic Class}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_trafficCls;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Flow Label}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_flowLabel;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Payload Length}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_payloadLength;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Protocol}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_nextHeader;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Hop Limit}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_hopLimit;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Source Address}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_srcAddr;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Destination Address}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_destAddr;{\cf1 \par
}{\cf1 	}j[{\cf15 "}{\cf15 Header Length}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }m_headerLength;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }j;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4 IPV6}{\cf6 :}{\cf6 :}getTexts(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(m_texts.empty()){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4 Packet}{\cf6 :}{\cf6 :}getTexts();{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 IPV6 Title}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Internet Protocol Version 6, Src: \{\}, Dst: \{\}}{\cf15 "},{\cf1  }m_srcAddr,{\cf1  }m_destAddr);{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}bitset{\cf6 <}{\cf6 8}{\cf6 >}{\cf1  }trafficCls(m_trafficCls);{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}bitset{\cf6 <}{\cf6 6}{\cf6 >}{\cf1  }dscpBits(m_trafficCls);{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}bitset{\cf6 <}{\cf6 2}{\cf6 >}{\cf1  }ecnBits(m_trafficCls{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf6 6});{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 Traffic Class}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15    . . . .  \{\} . . . .  . . . .  . . . .  . . . .  . . . . = Traffic Class 0x\{:x\} (DSCP: \{\}, ECN: \{\})}{\cf15 "},{\cf1  }formatBitSet(trafficCls.to_string()),{\cf1  }m_trafficCls,{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}dscpMap[dscpBits.to_ulong()],{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}ecnMap[ecnBits.to_ulong()]);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 DSCP}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15 . . . .  \{\} . .  . . . .  . . . .  . . . .  . . . .  . . . . = Differentiated Services Codepoint: \{\} (\{\})}{\cf15 "},{\cf1  }formatBitSet(dscpBits.to_string()),{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}dscpMap[dscpBits.to_ulong()],{\cf1  }dscpBits.to_ulong());{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 ECN}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15 . . . .  . . . .  . . \{\}  . . . .  . . . .  . . . .  . . . . = Explicit Congestion Notification: \{\} (\{\})}{\cf15 "},{\cf1  }ecnBits.to_string(),{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}ecnMap[ecnBits.to_ulong()],{\cf1  }ecnBits.to_ulong());{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}bitset{\cf6 <}{\cf6 20}{\cf6 >}{\cf1  }flowBits(m_flowLabel);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 Flow Label}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 . . . .  \{\} = Flow Label: 0x\{:x\}}{\cf15 "},{\cf1  }formatBitSet(flowBits.to_string()),{\cf1  }m_flowLabel);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 Payload Length}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Payload Length: \{\}}{\cf15 "},{\cf1  }m_payloadLength);{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}string{\cf1  }nextHeader;{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b switch}{\cf1  }(({\cf5 int})m_nextHeader){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_HOPOPTS}:{\cf1 \par
}{\cf1 			}nextHeader{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 IPv6 Hop-by-Hop Option (0)}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_TCP}:{\cf1 \par
}{\cf1 			}nextHeader{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 TCP (6)}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_UDP}:{\cf1 \par
}{\cf1 			}nextHeader{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 UDP (17)}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_ICMPV6}:{\cf1 \par
}{\cf1 			}nextHeader{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 ICMPv6 (58)}{\cf15 "};{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}{\cf4\b default}{\cf6 :}{\cf1 \par
}{\cf1 			}nextHeader{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Unknown (\{\})}{\cf15 "},{\cf1  }({\cf5 int})m_nextHeader);{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 Next Header}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Next Header: \{\}}{\cf15 "},{\cf1  }nextHeader);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 Hop Limit}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Hop Limit: \{\}}{\cf15 "},{\cf1  }({\cf5 int})m_hopLimit);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 IPV6 Source}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Source Address: \{\}}{\cf15 "},{\cf1  }m_srcAddr);{\cf1 \par
}{\cf1 \par
}{\cf1 		}m_texts[{\cf15 "}{\cf15 IPV6 Destination}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf15 Destination Address: \{\}}{\cf15 "},{\cf1  }m_destAddr);{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(m_options.size(){\cf1  }{\cf6 >}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 			}m_expands.insert(\{{\cf1  }{\cf15 "}{\cf15 IPV6 Option Title}{\cf15 "},{\cf1  }{\cf4 false}{\cf1  }\});{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 IPV6 Option Title}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15    IPV6 Hop-by-Hop Option}{\cf15 "});{\cf1 \par
}{\cf1 			}{\cf4\b auto}{\cf1  }option{\cf1  }{\cf6 =}{\cf1  }(HopByHop{\cf6 *})m_options.at({\cf6 0});{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b auto}{\cf1  }nh{\cf1  }{\cf6 =}{\cf1  }option{\cf6 -}{\cf6 >}m_nextHeader;{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b switch}{\cf1  }(({\cf5 int})nh){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_TCP}:{\cf1 \par
}{\cf1 				}nextHeader{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 TCP (6)}{\cf15 "};{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_UDP}:{\cf1 \par
}{\cf1 				}nextHeader{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 UDP (17)}{\cf15 "};{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}{\cf4\b case}{\cf1  }{\cf11 IPPROTO_ICMPV6}:{\cf1 \par
}{\cf1 				}nextHeader{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 ICMPv6 (58)}{\cf15 "};{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}{\cf4\b default}{\cf6 :}{\cf1 \par
}{\cf1 				}nextHeader{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 Unknown (\{\})}{\cf15 "},{\cf1  }({\cf5 int})m_nextHeader);{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 IPV6 Option Next Header}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15 Next Header: \{\}}{\cf15 "},{\cf1  }nextHeader);{\cf1 \par
}{\cf1 			}m_texts[{\cf15 "}{\cf15 IPV6 Option Length}{\cf15 "}]{\cf1  }{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15 Length: \{\} (\{\})}{\cf15 "},{\cf1  }option{\cf6 -}{\cf6 >}m_length,{\cf1  }option{\cf6 -}{\cf6 >}m_length{\cf1  }{\cf6 +}{\cf1  }{\cf6 8});{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b for}{\cf1  }({\cf4\b auto}{\cf1  }o{\cf1  }{\cf6 :}{\cf1  }option{\cf6 -}{\cf6 >}m_options){\cf1  }\{{\cf1 \par
}{\cf1 				}m_ipOptTexts.push_back(std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf17\b \\t}{\cf17\b \\t}{\cf15 \{\} (0x\{:x\}) Length: \{\}, Data: \{\}}{\cf15 "},{\cf1  }{\cf4\b Data}{\cf6 :}{\cf6 :}hopMap[o.m_type],{\cf1  }o.m_type,{\cf1  }o.m_length,{\cf1  }o.m_data));{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }m_texts;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //IPV6.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../Eth/Packet.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "IPV6Options/IPV6Options.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <pcap.h>}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b IPV6}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }{\cf4 Packet}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }m_version{\cf1  }{\cf6 =}{\cf1  }{\cf6 6};{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_trafficCls;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 long}{\cf1  }m_flowLabel;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_payloadLength;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }m_nextHeader;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }m_hopLimit;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_srcAddr;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_destAddr;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}vector{\cf6 <}IPV6Option{\cf6 *}{\cf6 >}{\cf1  }m_options;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}vector{\cf6 <}std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }m_ipOptTexts;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }m_headerLength{\cf1  }{\cf6 =}{\cf1  }{\cf6 40};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4 IPV6}(pcap_pkthdr{\cf6 *}{\cf1  }header,{\cf1  }{\cf4\b const}{\cf1  }u_char{\cf6 *}{\cf1  }pkt_data,{\cf1  }{\cf5 unsigned}{\cf1  }{\cf5 int}{\cf1  }idx);{\cf1 \par
}{\cf1 	}{\cf6 ~}{\cf4 IPV6}(){\cf1  }{\cf4\b override}{\cf1  }{\cf6 =}{\cf1  }{\cf4\b default};{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 toString}(){\cf1  }{\cf4\b override};{\cf1 \par
}{\cf1 	}json{\cf1  }{\cf8 jsonify}(){\cf1  }{\cf4\b override};{\cf1 \par
}{\cf1 	}{\cf4\b virtual}{\cf1  }{\cf5 void}{\cf1  }{\cf8 render}(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}render({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b virtual}{\cf1  }{\cf5 void}{\cf1  }{\cf8 renderExpanded}(){\cf1  }{\cf4\b override}{\cf1  }\{{\cf1 \par
}{\cf1 		}Renderer{\cf6 :}{\cf6 :}renderExpanded({\cf4\b this});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }getTexts(){\cf1  }{\cf4\b override};{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //HopByHop.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "HopByHop.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <iostream>}{\cf3 \par
}{\cf1 \par
}HopByHop{\cf6 :}{\cf6 :}HopByHop({\cf4 Packet}{\cf6 *}{\cf1  }packet){\cf1  }{\cf6 :}{\cf1  }IPV6Option(packet){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }end{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}getPos(){\cf1  }{\cf6 +}{\cf1  }(m_length{\cf1  }{\cf6 +}{\cf1  }{\cf6 6});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }(;{\cf1  }packet{\cf6 -}{\cf6 >}getPos(){\cf1  }{\cf6 <}{\cf1  }end;){\cf1  }\{{\cf1 \par
}{\cf1 		}m_options.emplace_back(packet);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //HopByHop.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "IPV6Option.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "HopOptions/HopOption.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <vector>}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b HopByHop}{\cf1  }{\cf6 :}{\cf1  }{\cf4\b public}{\cf1  }IPV6Option{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}vector{\cf6 <}HopOption{\cf6 >}{\cf1  }m_options;{\cf1 \par
}{\cf1 \par
}{\cf1 	}HopByHop({\cf4 Packet}{\cf6 *}{\cf1  }packet);{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //HopOption.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "HopOption.h"}{\cf3 \par
}{\cf1 \par
}HopOption{\cf6 :}{\cf6 :}HopOption({\cf4 Packet}{\cf6 *}{\cf1  }packet){\cf1  }\{{\cf1 \par
}{\cf1 	}m_type{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseChar();{\cf1 \par
}{\cf1 	}m_length{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseChar();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }size{\cf1  }{\cf6 =}{\cf1  }m_length;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(size{\cf1  }{\cf6 >}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 		}m_data.reserve(size{\cf1  }{\cf6 *}{\cf1  }{\cf6 2});{\cf1  }{\cf2\i // Each byte will be represented by 2 hexadecimal characters\par
}{\cf1 \par
}{\cf1 		}{\cf4\b for}{\cf1  }({\cf5 int}{\cf1  }end{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}getPos(){\cf1  }{\cf6 +}{\cf1  }size;{\cf1  }packet{\cf6 -}{\cf6 >}getPos(){\cf1  }{\cf6 <}{\cf1  }end;){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf5 char}{\cf1  }buf[{\cf6 3}];{\cf1 \par
}{\cf1 			}sprintf_s(buf,{\cf1  }{\cf15 "}{\cf15 %02x}{\cf15 "},{\cf1  }({\cf5 int})packet{\cf6 -}{\cf6 >}parseChar());{\cf1 \par
}{\cf1 			}m_data.append(buf);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //HopOption.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <pcap.h>}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../../Eth/Packet.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b HopOption}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_type;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_length;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }m_data;{\cf1 \par
}{\cf1 \par
}{\cf1 	}HopOption({\cf4 Packet}{\cf6 *}{\cf1  }packet);{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //IPV6Option.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "IPV6Option.h"}{\cf3 \par
}{\cf1 \par
}IPV6Option{\cf6 :}{\cf6 :}IPV6Option({\cf4 Packet}{\cf6 *}{\cf1  }packet){\cf1  }\{{\cf1 \par
}{\cf1 	}m_nextHeader{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseChar();{\cf1 \par
}{\cf1 	}m_length{\cf1  }{\cf6 =}{\cf1  }packet{\cf6 -}{\cf6 >}parseChar();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //IPV6Option.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <pcap.h>}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../../Eth/Packet.h"}{\cf3 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b IPV6Option}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_nextHeader;{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 short}{\cf1  }m_length;{\cf1 \par
}{\cf1 \par
}{\cf1 	}IPV6Option({\cf4 Packet}{\cf6 *}{\cf1  }packet);{\cf1 \par
}\};{\cf1 \par
}{\cf1 \par
}{\cf2\i //IPV6Options.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "IPV6Option.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "HopByHop.h"}{\cf3 \par
}{\cf1 \par
}{\cf2\i //Types.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf2\i // easier to type\par
}{\cf2\i // easier to include\par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Eth/Packet.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Eth/ARP.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "IP/IP.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Data/ICMP/ICMP.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Data/ICMP/ICMPV6.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Data/IGMP/IGMP.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Data/TCP/TCP.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "Data/UDP/UDP.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 define PKT             Packet*}{\cf3 \par
}{\cf3 #}{\cf3 define ARP_PKT         ARP*}{\cf3 \par
}{\cf3 #}{\cf3 define IPV4_PKT        IPV4*}{\cf3 \par
}{\cf3 #}{\cf3 define TCPV4_PKT       TCP<IPV4>*}{\cf3 \par
}{\cf3 #}{\cf3 define UDPV4_PKT       UDP<IPV4>*}{\cf3 \par
}{\cf3 #}{\cf3 define IGMPV4_PKT      IGMP<IPV4>*}{\cf3 \par
}{\cf3 #}{\cf3 define ICMPV4_PKT      ICMP*}{\cf3 \par
}{\cf3 #}{\cf3 define IPV6_PKT        IPV6*}{\cf3 \par
}{\cf3 #}{\cf3 define TCPV6_PKT       TCP<IPV6>*}{\cf3 \par
}{\cf3 #}{\cf3 define UDPV6_PKT       UDP<IPV6>*}{\cf3 \par
}{\cf3 #}{\cf3 define IGMPV6_PKT      IGMP<IPV6>*}{\cf3 \par
}{\cf3 #}{\cf3 define ICMPV6_PKT      ICMPV6*}{\cf3 \par
}{\cf1 \par
}{\cf2\i //SDK.cpp\par
}{\cf1 \par
}{\cf3 #}{\cf3 define _WINSOCK_DEPRECATED_NO_WARNINGS}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "SDK.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../Base/Logger.h"}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i "../Base/Data.h"}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <array>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <memory>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <Psapi.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <vector>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <tchar.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <iostream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <memory>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <sstream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <IcmpAPI.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <fstream>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <cstring>}{\cf3 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}DWORD,{\cf1  }DWORD{\cf6 >}{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}PORT2PID;{\cf1 \par
}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}DWORD,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}PID2PROC;{\cf1 \par
}HANDLE{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}icmpHandle;{\cf1 \par
}DWORD{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}dwRetVal;{\cf1 \par
}{\cf5 char}{\cf6 *}{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}sendData;{\cf1 \par
}LPVOID{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}replyBuffer;{\cf1 \par
}DWORD{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}replySize;{\cf1 \par
}IP_OPTION_INFORMATION{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}ipOptions;{\cf1 \par
}std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}MACS;{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}ipAddress;{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 SDK::exec}({\cf4\b const}{\cf1  }{\cf5 char}{\cf6 *}{\cf1  }cmd){\cf1  }\{{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}array{\cf6 <}{\cf5 char},{\cf1  }{\cf6 128}{\cf6 >}{\cf1  }buffer\{\};{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }result;{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}unique_ptr{\cf6 <}FILE,{\cf1  }{\cf4\b decltype}({\cf6 &}_pclose){\cf6 >}{\cf1  }pipe(_popen(cmd,{\cf1  }{\cf15 "}{\cf15 rt}{\cf15 "}),{\cf1  }{\cf6 &}_pclose);{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf6 !}pipe){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b Logger}{\cf6 :}{\cf6 :}log({\cf15 "}{\cf15 popen() failed!}{\cf15 "});{\cf1 \par
}{\cf1 		}exit({\cf6 1});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b while}{\cf1  }(fgets(buffer.data(),{\cf1  }buffer.size(),{\cf1  }pipe.get()){\cf1  }{\cf6 !}{\cf6 =}{\cf1  }{\cf4\b nullptr}){\cf1  }\{{\cf1 \par
}{\cf1 		}result{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }buffer.data();{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }result;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}json{\cf1  }{\cf8 SDK::geoLocate}(std{\cf6 :}{\cf6 :}string{\cf1  }addr){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf2\i // we use curl and ask a 3rd party site to locate the address for us\par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }cmd{\cf1  }{\cf6 =}{\cf1  }{\cf15 R}{\cf15 "}{\cf15 (}{\cf15 curl -s -H "User-Agent: keycdn-tools:https://amalb.iscool.co.il/" "https://tools.keycdn.com/geo.json?host="}{\cf15 )}{\cf15 "};{\cf1 \par
}{\cf1 	}cmd{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }addr;{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }res{\cf1  }{\cf6 =}{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}exec(cmd.c_str());{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }j{\cf1  }{\cf6 =}{\cf1  }json{\cf6 :}{\cf6 :}parse(res);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }j;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 SDK::initPIDCache}(){\cf1  }\{{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }tasklist{\cf1  }{\cf6 =}{\cf1  }exec({\cf15 "}{\cf15 tasklist}{\cf15 "});{\cf1 \par
}{\cf1 	}size_t{\cf1  }pos;{\cf1 \par
}{\cf1 	}size_t{\cf1  }p;{\cf1 \par
}{\cf1 	}{\cf4\b while}{\cf1  }({\cf4 true}){\cf1  }\{{\cf1 \par
}{\cf1 		}size_t{\cf1  }ps{\cf1  }{\cf6 =}{\cf1  }tasklist.find({\cf15 "}{\cf15  Services}{\cf15 "});{\cf1 \par
}{\cf1 		}size_t{\cf1  }pc{\cf1  }{\cf6 =}{\cf1  }tasklist.find({\cf15 "}{\cf15  Console}{\cf15 "});{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}string{\cf1  }str;{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(ps{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 :}{\cf6 :}npos){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }(pc{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 :}{\cf6 :}npos){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}str{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15  Console}{\cf15 "};{\cf1 \par
}{\cf1 			}p{\cf1  }{\cf6 =}{\cf1  }pc;{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }(pc{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 :}{\cf6 :}npos){\cf1  }\{{\cf1 \par
}{\cf1 				}str{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15  Services}{\cf15 "};{\cf1 \par
}{\cf1 				}p{\cf1  }{\cf6 =}{\cf1  }ps;{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 			}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b if}{\cf1  }(pc{\cf1  }{\cf6 <}{\cf1  }ps){\cf1  }\{{\cf1 \par
}{\cf1 					}str{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15  Console}{\cf15 "};{\cf1 \par
}{\cf1 					}p{\cf1  }{\cf6 =}{\cf1  }pc;{\cf1 \par
}{\cf1 				}\}{\cf1 \par
}{\cf1 				}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 					}str{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15  Services}{\cf15 "};{\cf1 \par
}{\cf1 					}p{\cf1  }{\cf6 =}{\cf1  }ps;{\cf1 \par
}{\cf1 				}\}{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}pos{\cf1  }{\cf6 =}{\cf1  }p;{\cf1 \par
}{\cf1 		}pos{\cf1  }{\cf6 -}{\cf6 =}{\cf1  }{\cf6 1};{\cf1 \par
}{\cf1 		}DWORD{\cf1  }pid{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 		}{\cf5 int}{\cf1  }len{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 		}{\cf4\b while}{\cf1  }(isdigit(tasklist.at(pos))){\cf1  }\{{\cf1 \par
}{\cf1 			}pid{\cf1  }{\cf6 +}{\cf6 =}{\cf1  }({\cf5 int}(tasklist.at(pos)){\cf1  }{\cf6 -}{\cf1  }{\cf6 48}){\cf1  }{\cf6 *}{\cf1  }std{\cf6 :}{\cf6 :}pow({\cf6 10},{\cf1  }len{\cf6 +}{\cf6 +});{\cf1 \par
}{\cf1 			}pos{\cf6 -}{\cf6 -};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b for}{\cf1  }(;{\cf1  }tasklist.at(pos){\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf15 '}{\cf15  }{\cf15 '};{\cf1  }pos{\cf6 -}{\cf6 -});{\cf1 \par
}{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}string{\cf1  }name{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 "};{\cf1 \par
}{\cf1 		}{\cf4\b while}{\cf1  }(tasklist.at(pos){\cf1  }{\cf6 !}{\cf6 =}{\cf1  }{\cf15 '}{\cf15 \\n}{\cf15 '}){\cf1  }\{{\cf1 \par
}{\cf1 			}name{\cf1  }{\cf6 =}{\cf1  }tasklist.at(pos){\cf1  }{\cf6 +}{\cf1  }name;{\cf1 \par
}{\cf1 			}pos{\cf6 -}{\cf6 -};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf6 !}PID2PROC.contains(pid)){\cf1  }\{{\cf1 \par
}{\cf1 			}PID2PROC.try_emplace(pid,{\cf1  }name);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 \par
}{\cf1 		}tasklist.erase({\cf6 0},{\cf1  }p{\cf1  }{\cf6 +}{\cf1  }str.length());{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}PMIB_TCPTABLE_OWNER_PID{\cf1  }{\cf8 SDK::getTCPTable}(){\cf1  }\{{\cf1 \par
}{\cf1 	}DWORD{\cf1  }dwSize{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 	}PMIB_TCPTABLE_OWNER_PID{\cf1  }tcpTable{\cf1  }{\cf6 =}{\cf1  }{\cf4\b nullptr};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // get the needed size of the buffer\par
}{\cf1 	}{\cf4\b if}{\cf1  }(GetExtendedTcpTable({\cf4\b nullptr},{\cf1  }{\cf6 &}dwSize,{\cf1  }FALSE,{\cf1  }AF_INET,{\cf1  }TCP_TABLE_OWNER_PID_ALL,{\cf1  }{\cf6 0}){\cf1  }{\cf6 !}{\cf6 =}{\cf1  }ERROR_INSUFFICIENT_BUFFER){\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}cerr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Failed to get required buffer size}{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}endl;{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4\b nullptr};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // allocate memory\par
}{\cf1 	}tcpTable{\cf1  }{\cf6 =}{\cf1  }(PMIB_TCPTABLE_OWNER_PID)malloc(dwSize);{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(tcpTable{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf4\b nullptr}){\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}cerr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Failed to allocate memory for TCP table}{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}endl;{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4\b nullptr};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // actually fetch the table\par
}{\cf1 	}{\cf4\b if}{\cf1  }(GetExtendedTcpTable(tcpTable,{\cf1  }{\cf6 &}dwSize,{\cf1  }FALSE,{\cf1  }AF_INET,{\cf1  }TCP_TABLE_OWNER_PID_ALL,{\cf1  }{\cf6 0}){\cf1  }{\cf6 !}{\cf6 =}{\cf1  }NO_ERROR){\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}cerr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Failed to get TCP table}{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}endl;{\cf1 \par
}{\cf1 		}free(tcpTable);{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4\b nullptr};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }tcpTable;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 SDK::refreshTCP}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }table{\cf1  }{\cf6 =}{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}getTCPTable();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }(DWORD{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }table{\cf6 -}{\cf6 >}dwNumEntries;{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }{\cf4\b const}{\cf6 &}{\cf1  }row{\cf1  }{\cf6 =}{\cf1  }table{\cf6 -}{\cf6 >}table[i];{\cf1 \par
}{\cf1 		}u_short{\cf1  }port{\cf1  }{\cf6 =}{\cf1  }ntohs((u_short)row.dwLocalPort);{\cf1 \par
}{\cf1 		}DWORD{\cf1  }pid{\cf1  }{\cf6 =}{\cf1  }row.dwOwningPid;{\cf1 \par
}{\cf1 		}PORT2PID.insert(\{{\cf1  }port,{\cf1  }pid{\cf1  }\});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}free(table);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}PMIB_UDPTABLE_OWNER_PID{\cf1  }{\cf8 SDK::getUDPTable}(){\cf1  }\{{\cf1 \par
}{\cf1 	}DWORD{\cf1  }dwSize{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 	}PMIB_UDPTABLE_OWNER_PID{\cf1  }udpTable{\cf1  }{\cf6 =}{\cf1  }{\cf4\b nullptr};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // get the required buffer size\par
}{\cf1 	}{\cf4\b if}{\cf1  }(GetExtendedUdpTable({\cf4\b nullptr},{\cf1  }{\cf6 &}dwSize,{\cf1  }FALSE,{\cf1  }AF_INET,{\cf1  }UDP_TABLE_OWNER_PID,{\cf1  }{\cf6 0}){\cf1  }{\cf6 !}{\cf6 =}{\cf1  }ERROR_INSUFFICIENT_BUFFER){\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}cerr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Failed to get required buffer size}{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}endl;{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4\b nullptr};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // allocate memory\par
}{\cf1 	}udpTable{\cf1  }{\cf6 =}{\cf1  }(PMIB_UDPTABLE_OWNER_PID)malloc(dwSize);{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(udpTable{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf4 NULL}){\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}cerr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Failed to allocate memory for TCP table}{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}endl;{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4\b nullptr};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // get the table\par
}{\cf1 	}{\cf4\b if}{\cf1  }(GetExtendedUdpTable(udpTable,{\cf1  }{\cf6 &}dwSize,{\cf1  }FALSE,{\cf1  }AF_INET,{\cf1  }UDP_TABLE_OWNER_PID,{\cf1  }{\cf6 0}){\cf1  }{\cf6 !}{\cf6 =}{\cf1  }NO_ERROR){\cf1  }\{{\cf1 \par
}{\cf1 		}std{\cf6 :}{\cf6 :}cerr{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }{\cf15 "}{\cf15 Failed to get UDP table}{\cf15 "}{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }std{\cf6 :}{\cf6 :}endl;{\cf1 \par
}{\cf1 		}free(udpTable);{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf4\b nullptr};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }udpTable;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 SDK::refreshUDP}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }table{\cf1  }{\cf6 =}{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}getUDPTable();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }(DWORD{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }table{\cf6 -}{\cf6 >}dwNumEntries;{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf6 &}{\cf1  }row{\cf1  }{\cf6 =}{\cf1  }table{\cf6 -}{\cf6 >}table[i];{\cf1 \par
}{\cf1 		}u_short{\cf1  }port{\cf1  }{\cf6 =}{\cf1  }ntohs((u_short)row.dwLocalPort);{\cf1 \par
}{\cf1 		}DWORD{\cf1  }pid{\cf1  }{\cf6 =}{\cf1  }row.dwOwningPid;{\cf1 \par
}{\cf1 		}PORT2PID.insert(\{{\cf1  }port,{\cf1  }pid{\cf1  }\});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}free(table);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 SDK::refreshTables}(){\cf1  }\{{\cf1 \par
}{\cf1 	}refreshTCP();{\cf1 \par
}{\cf1 	}refreshUDP();{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 SDK::findIP}({\cf5 char}{\cf6 *}{\cf1  }adName){\cf1  }\{{\cf1 \par
}{\cf1 	}ULONG{\cf1  }buffer_size{\cf1  }{\cf6 =}{\cf1  }{\cf4\b sizeof}(IP_ADAPTER_INFO);{\cf1 \par
}{\cf1 	}IP_ADAPTER_INFO{\cf6 *}{\cf1  }adapter_info{\cf1  }{\cf6 =}{\cf1  }(IP_ADAPTER_INFO{\cf6 *})malloc(buffer_size);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // get adapter info\par
}{\cf1 	}{\cf4\b if}{\cf1  }(GetAdaptersInfo(adapter_info,{\cf1  }{\cf6 &}buffer_size){\cf1  }{\cf6 =}{\cf6 =}{\cf1  }ERROR_BUFFER_OVERFLOW){\cf1  }\{{\cf1 \par
}{\cf1 		}free(adapter_info);{\cf1 \par
}{\cf1 		}adapter_info{\cf1  }{\cf6 =}{\cf1  }(IP_ADAPTER_INFO{\cf6 *})malloc(buffer_size);{\cf1 \par
}{\cf1 		}GetAdaptersInfo(adapter_info,{\cf1  }{\cf6 &}buffer_size);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}stringstream{\cf1  }ss;{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }ad{\cf1  }{\cf6 =}{\cf1  }adName;{\cf1 \par
}{\cf1 	}{\cf5 int}{\cf1  }i{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }(;{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }ad.size();{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(ad.at(i){\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf15 '}{\cf15 _}{\cf15 '}){\cf1  }\{{\cf1 \par
}{\cf1 			}i{\cf6 +}{\cf6 +};{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }(;{\cf1  }i{\cf1  }{\cf6 <}{\cf1  }ad.size();{\cf1  }i{\cf6 +}{\cf6 +}){\cf1  }\{{\cf1 \par
}{\cf1 		}ss{\cf1  }{\cf6 <}{\cf6 <}{\cf1  }ad.at(i);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}ad{\cf1  }{\cf6 =}{\cf1  }ss.str();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // find the right ip address\par
}{\cf1 	}{\cf4\b for}{\cf1  }(IP_ADAPTER_INFO{\cf6 *}{\cf1  }adapter{\cf1  }{\cf6 =}{\cf1  }adapter_info;{\cf1  }adapter{\cf1  }{\cf6 !}{\cf6 =}{\cf1  }{\cf4\b nullptr};{\cf1  }adapter{\cf1  }{\cf6 =}{\cf1  }adapter{\cf6 -}{\cf6 >}Next){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }((adapter{\cf6 -}{\cf6 >}AdapterName){\cf1  }{\cf6 =}{\cf6 =}{\cf1  }ad){\cf1  }\{{\cf1 \par
}{\cf1 			}ipAddress{\cf1  }{\cf6 =}{\cf1  }adapter{\cf6 -}{\cf6 >}IpAddressList.IpAddress.String;{\cf1 \par
}{\cf1 			}{\cf4\b break};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}free(adapter_info);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 SDK::initICMP}(){\cf1  }\{{\cf1 \par
}{\cf1 	}dwRetVal{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }temp{\cf1  }{\cf6 =}{\cf1  }{\cf15 "}{\cf15 Data Buffer}{\cf15 "};{\cf1 \par
}{\cf1 	}sendData{\cf1  }{\cf6 =}{\cf1  }{\cf4\b new}{\cf1  }{\cf5 char}[temp.size(){\cf1  }{\cf6 +}{\cf1  }{\cf6 1}];{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}ranges{\cf6 :}{\cf6 :}copy(temp.begin(),{\cf1  }temp.end(),{\cf1  }sendData);{\cf1 \par
}{\cf1 	}sendData[temp.size()]{\cf1  }{\cf6 =}{\cf1  }{\cf15 '}{\cf15 \\0}{\cf15 '};{\cf1 \par
}{\cf1 	}replyBuffer{\cf1  }{\cf6 =}{\cf1  }{\cf4\b nullptr};{\cf1 \par
}{\cf1 	}replySize{\cf1  }{\cf6 =}{\cf1  }{\cf6 0};{\cf1 \par
}{\cf1 	}ipOptions{\cf1  }{\cf6 =}{\cf1  }\{{\cf1  }{\cf6 0}{\cf1  }\};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // create handle\par
}{\cf1 	}icmpHandle{\cf1  }{\cf6 =}{\cf1  }IcmpCreateFile();{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(icmpHandle{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }INVALID_HANDLE_VALUE){\cf1  }\{{\cf1 \par
}{\cf1 		}printf({\cf15 "}{\cf15 Unable to open ICMP handle}{\cf17\b \\n}{\cf15 "});{\cf1 \par
}{\cf1 		}exit({\cf6 1});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // set reply buffer size\par
}{\cf1 	}replySize{\cf1  }{\cf6 =}{\cf1  }{\cf4\b sizeof}(ICMP_ECHO_REPLY){\cf1  }{\cf6 +}{\cf1  }{\cf4\b sizeof}(sendData);{\cf1 \par
}{\cf1 	}replyBuffer{\cf1  }{\cf6 =}{\cf1  }malloc(replySize);{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(replyBuffer{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf4 NULL}){\cf1  }\{{\cf1 \par
}{\cf1 		}printf({\cf15 "}{\cf15 Unable to allocate memory for reply buffer}{\cf17\b \\n}{\cf15 "});{\cf1 \par
}{\cf1 		}exit({\cf6 1});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 SDK::init}(){\cf1  }\{{\cf1 \par
}{\cf1 	}initPIDCache();{\cf1 \par
}{\cf1 	}refreshTables();{\cf1 \par
}{\cf1 	}initICMP();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // load the manuf file into memory\par
}{\cf1 	}std{\cf6 :}{\cf6 :}ifstream{\cf1  }manuf({\cf15 "}{\cf15 deps/manuf/manuf}{\cf15 "});{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }line;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b while}{\cf1  }(getline(manuf,{\cf1  }line)){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }addr{\cf1  }{\cf6 =}{\cf1  }line.substr({\cf6 0},{\cf1  }{\cf6 8});{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }firstTab{\cf1  }{\cf6 =}{\cf1  }line.find({\cf15 "}{\cf17\b \\t}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }secondTab{\cf1  }{\cf6 =}{\cf1  }line.rfind({\cf15 "}{\cf17\b \\t}{\cf15 "});{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }name{\cf1  }{\cf6 =}{\cf1  }line.substr(firstTab{\cf1  }{\cf6 +}{\cf1  }{\cf6 1},{\cf1  }secondTab{\cf1  }{\cf6 -}{\cf1  }firstTab{\cf1  }{\cf6 -}{\cf1  }{\cf6 1});{\cf1 \par
}{\cf1 \par
}{\cf1 		}MACS.try_emplace(addr,{\cf1  }name);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}MACS.try_emplace({\cf15 "}{\cf15 33:33:00}{\cf15 "},{\cf1  }{\cf15 "}{\cf15 IPV6mcast}{\cf15 "});{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf8 SDK::release}(){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(replyBuffer{\cf1  }{\cf6 !}{\cf6 =}{\cf1  }{\cf4 NULL}){\cf1  }\{{\cf1 \par
}{\cf1 		}free(replyBuffer);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}IcmpCloseHandle(icmpHandle);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}DWORD{\cf1  }{\cf8 SDK::getPIDFromPort}(DWORD{\cf1  }port){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(PORT2PID.contains(port)){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }PORT2PID.at(port);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // if we can't find the port, refresh the tables\par
}{\cf1 	}refreshTables();{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(PORT2PID.contains(port)){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }PORT2PID.at(port);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }MAXDWORD;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 SDK::getProcFromPID}(DWORD{\cf1  }PID){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(PID{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }MAXDWORD){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf2\i // pid doesn't exist\par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 <UNKNOWN>}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(PID2PROC.contains(PID)){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf2\i // we figured out this pid already\par
}{\cf1 		}{\cf4\b return}{\cf1  }PID2PROC.at(PID);{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}TCHAR{\cf1  }procName[MAX_PATH]{\cf1  }{\cf6 =}{\cf1  }_T({\cf15 "}{\cf15 4}{\cf15 "});{\cf1 \par
}{\cf1 	}HANDLE{\cf1  }proc{\cf1  }{\cf6 =}{\cf1  }OpenProcess(PROCESS_QUERY_INFORMATION{\cf1  }{\cf6 |}{\cf1  }PROCESS_VM_READ,{\cf1  }FALSE,{\cf1  }PID);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(proc{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf4\b nullptr}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf2\i // couldn't open the process\par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 <BADPROCESS>}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf6 !}GetModuleBaseName(proc,{\cf1  }{\cf4\b nullptr},{\cf1  }procName,{\cf1  }{\cf4\b sizeof}(procName))){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf2\i // process has not name\par
}{\cf1 		}{\cf4\b return}{\cf1  }{\cf15 "}{\cf15 <NAMELESS>}{\cf15 "};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}string{\cf1  }processName;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // comvert TCHAR to std string :)\par
}{\cf1 	}{\cf5 int}{\cf1  }sizeNeeded{\cf1  }{\cf6 =}{\cf1  }WideCharToMultiByte(CP_UTF8,{\cf1  }{\cf6 0},{\cf1  }procName,{\cf1  }{\cf6 -1},{\cf1  }{\cf4\b nullptr},{\cf1  }{\cf6 0},{\cf1  }{\cf4\b nullptr},{\cf1  }{\cf4\b nullptr});{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}vector{\cf6 <}{\cf5 char}{\cf6 >}{\cf1  }buffer(sizeNeeded);{\cf1 \par
}{\cf1 	}WideCharToMultiByte(CP_UTF8,{\cf1  }{\cf6 0},{\cf1  }procName,{\cf1  }{\cf6 -1},{\cf1  }{\cf6 &}buffer[{\cf6 0}],{\cf1  }sizeNeeded,{\cf1  }{\cf4\b nullptr},{\cf1  }{\cf4\b nullptr});{\cf1 \par
}{\cf1 	}processName.assign(buffer.begin(),{\cf1  }buffer.end(){\cf1  }{\cf6 -}{\cf1  }{\cf6 1});{\cf1  }{\cf2\i // remove the null terminator\par
}{\cf1 \par
}{\cf1 	}{\cf2\i // close the handle we opened\par
}{\cf1 	}CloseHandle(proc);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // cache the results\par
}{\cf1 	}PID2PROC.try_emplace(PID,{\cf1  }processName);{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }processName;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 SDK::getProcFromPort}(DWORD{\cf1  }port){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }getProcFromPID(getPIDFromPort(port));{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}vector{\cf6 <}std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}traceRoute(std{\cf6 :}{\cf6 :}string{\cf1  }addr){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf5 unsigned}{\cf1  }{\cf5 long}{\cf1  }ipaddr{\cf1  }{\cf6 =}{\cf1  }INADDR_NONE;{\cf1 \par
}{\cf1 	}{\cf2\i // IP address string to binary\par
}{\cf1 	}ipaddr{\cf1  }{\cf6 =}{\cf1  }inet_addr(addr.c_str());{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(ipaddr{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }INADDR_NONE){\cf1  }\{{\cf1 \par
}{\cf1 		}printf({\cf15 "}{\cf15 Unable to parse IP address}{\cf17\b \\n}{\cf15 "});{\cf1 \par
}{\cf1 		}exit({\cf6 1});{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}u_char{\cf1  }ttl{\cf1  }{\cf6 =}{\cf1  }{\cf6 1};{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}vector{\cf6 <}std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }addrs;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b while}{\cf1  }(ttl{\cf1  }{\cf6 <}{\cf1  }{\cf6 60}){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}geoTerminate){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b return}{\cf1  }addrs;{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}ipOptions.Ttl{\cf1  }{\cf6 =}{\cf1  }ttl{\cf6 +}{\cf6 +};{\cf1 \par
}{\cf1 		}{\cf2\i // send ICMP echo request\par
}{\cf1 		}dwRetVal{\cf1  }{\cf6 =}{\cf1  }IcmpSendEcho(icmpHandle,{\cf1  }ipaddr,{\cf1  }sendData,{\cf1  }{\cf4\b sizeof}(sendData),{\cf1 \par
}{\cf1 			}{\cf6 &}ipOptions,{\cf1  }replyBuffer,{\cf1  }replySize,{\cf1  }{\cf6 100});{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }(dwRetVal{\cf1  }{\cf6 !}{\cf6 =}{\cf1  }{\cf6 0}){\cf1  }\{{\cf1 \par
}{\cf1 			}PICMP_ECHO_REPLY{\cf1  }echoReply{\cf1  }{\cf6 =}{\cf1  }(PICMP_ECHO_REPLY)replyBuffer;{\cf1 \par
}{\cf1 			}{\cf4\b struct}{\cf1  }{\cf8\b in_addr}{\cf1  }replyAddr;{\cf1 \par
}{\cf1 			}replyAddr.S_un.S_addr{\cf1  }{\cf6 =}{\cf1  }echoReply{\cf6 -}{\cf6 >}Address;{\cf1 \par
}{\cf1 			}addrs.emplace_back(inet_ntoa(replyAddr));{\cf1 \par
}{\cf1 \par
}{\cf1 			}{\cf4\b if}{\cf1  }(echoReply{\cf6 -}{\cf6 >}Status{\cf1  }{\cf6 =}{\cf6 =}{\cf1  }{\cf6 0}{\cf1  }{\cf6 |}{\cf6 |}{\cf1  }inet_ntoa(replyAddr){\cf1  }{\cf6 =}{\cf6 =}{\cf1  }addr){\cf1  }\{{\cf1 \par
}{\cf1 				}{\cf4\b break};{\cf1 \par
}{\cf1 			}\}{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf2\i // nothing to do if the icmp fails\par
}{\cf1 		}{\cf2\i //else \{\par
}{\cf1 		}{\cf2\i //	DWORD errorMessageID = GetLastError();\par
}{\cf1 \par
}{\cf1 		}{\cf2\i //	LPSTR messageBuffer = NULL;\par
}{\cf1 		}{\cf2\i //	size_t size = FormatMessageA(\par
}{\cf1 		}{\cf2\i //		FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,\par
}{\cf1 		}{\cf2\i //		NULL,\par
}{\cf1 		}{\cf2\i //		errorMessageID,\par
}{\cf1 		}{\cf2\i //		MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\par
}{\cf1 		}{\cf2\i //		(LPSTR)&messageBuffer,\par
}{\cf1 		}{\cf2\i //		0,\par
}{\cf1 		}{\cf2\i //		NULL\par
}{\cf1 		}{\cf2\i //	);\par
}{\cf1 		}{\cf2\i //	std::stringstream ss;\par
}{\cf1 		}{\cf2\i //	ss << "error: " << messageBuffer;\par
}{\cf1 		}{\cf2\i //	//addrs.push_back(ss.str());\par
}{\cf1 		}{\cf2\i //	LocalFree(messageBuffer);\par
}{\cf1 		}{\cf2\i //\}\par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }addrs;{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf5 void}{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}geoTrace(std{\cf6 :}{\cf6 :}string{\cf1  }addr){\cf1  }\{{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}hopAddr{\cf1  }{\cf6 =}{\cf1  }addr;{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}geoDone{\cf1  }{\cf6 =}{\cf1  }{\cf4 false};{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}geoState{\cf1  }{\cf6 =}{\cf1  }{\cf6 1};{\cf1 \par
}{\cf1 	}{\cf4\b auto}{\cf1  }vec{\cf1  }{\cf6 =}{\cf1  }traceRoute(addr);{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}geoState{\cf1  }{\cf6 =}{\cf1  }{\cf6 2};{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b for}{\cf1  }({\cf4\b const}{\cf1  }{\cf4\b auto}{\cf6 &}{\cf1  }add{\cf1  }{\cf6 :}{\cf1  }vec){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}geoTerminate){\cf1  }\{{\cf1 \par
}{\cf1 			}{\cf4\b return};{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 		}{\cf4\b auto}{\cf1  }j{\cf1  }{\cf6 =}{\cf1  }geoLocate(add);{\cf1 \par
}{\cf1 		}\{{\cf1 \par
}{\cf1 			}std{\cf6 :}{\cf6 :}scoped_lock{\cf1  }{\cf8 guard}({\cf4\b Data}{\cf6 :}{\cf6 :}geoGuard);{\cf1 \par
}{\cf1 			}{\cf4\b Data}{\cf6 :}{\cf6 :}locs.emplace_back(j);{\cf1 \par
}{\cf1 		}\}{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }({\cf4\b Data}{\cf6 :}{\cf6 :}locs.empty()){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b Data}{\cf6 :}{\cf6 :}geoState{\cf1  }{\cf6 =}{\cf1  }{\cf6 3};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b else}{\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b Data}{\cf6 :}{\cf6 :}geoState{\cf1  }{\cf6 =}{\cf1  }{\cf6 4};{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}{\cf4\b Data}{\cf6 :}{\cf6 :}geoDone{\cf1  }{\cf6 =}{\cf1  }{\cf4 true};{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}std{\cf6 :}{\cf6 :}string{\cf1  }{\cf4\b SDK}{\cf6 :}{\cf6 :}lookupMAC(std{\cf6 :}{\cf6 :}string{\cf1  }addr){\cf1  }\{{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}ranges{\cf6 :}{\cf6 :}transform(addr.begin(),{\cf1  }addr.end(),{\cf1  }addr.begin(),{\cf1 \par
}{\cf1 		}[]({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }c){\cf1  }\{{\cf1  }{\cf4\b return}{\cf1  }std{\cf6 :}{\cf6 :}toupper(c);{\cf1  }\});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b if}{\cf1  }(MACS.contains(addr)){\cf1  }\{{\cf1 \par
}{\cf1 		}{\cf4\b return}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 \{\}_}{\cf15 "},{\cf1  }MACS.at(addr));{\cf1 \par
}{\cf1 	}\}{\cf1 \par
}{\cf1 	}std{\cf6 :}{\cf6 :}ranges{\cf6 :}{\cf6 :}transform(addr.begin(),{\cf1  }addr.end(),{\cf1  }addr.begin(),{\cf1 \par
}{\cf1 		}[]({\cf5 unsigned}{\cf1  }{\cf5 char}{\cf1  }c){\cf1  }\{{\cf1  }{\cf4\b return}{\cf1  }std{\cf6 :}{\cf6 :}tolower(c);{\cf1  }\});{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b return}{\cf1  }std{\cf6 :}{\cf6 :}format({\cf15 "}{\cf15 \{\}:}{\cf15 "},{\cf1  }addr);{\cf1 \par
}\}{\cf1 \par
}{\cf1 \par
}{\cf2\i //SDK.h\par
}{\cf1 \par
}{\cf3 #}{\cf3 pragma once}{\cf3 \par
}{\cf1 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <map>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <string>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <WinSock2.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <iphlpapi.h>}{\cf3 \par
}{\cf3 #}{\cf3 include}{\cf1  }{\cf2\i <json.hpp>}{\cf3 \par
}{\cf1 \par
}{\cf4\b using}{\cf1  }json{\cf1  }{\cf6 =}{\cf1  }nlohmann{\cf6 :}{\cf6 :}ordered_json;{\cf1 \par
}{\cf1 \par
}{\cf4\b class}{\cf1  }{\cf8\b SDK}{\cf1  }\{{\cf1 \par
}{\cf4\b public}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }ipAddress;{\cf1 \par
}{\cf1 	}{\cf2\i // execute cmd in the, well, cmd (when the program is compiled it will open a cmd window for a moment)\par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 exec}({\cf4\b const}{\cf1  }{\cf5 char}{\cf6 *}{\cf1  }cmd);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 findIP}({\cf5 char}{\cf6 *}{\cf1  }adName);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 init}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 release}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }DWORD{\cf1  }{\cf8 getPIDFromPort}(DWORD{\cf1  }port);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 getProcFromPID}(DWORD{\cf1  }PID);{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 getProcFromPort}(DWORD{\cf1  }port);{\cf1 \par
}{\cf1 	}{\cf2\i // geolocate the address\par
}{\cf1 	}{\cf4\b static}{\cf1  }json{\cf1  }{\cf8 geoLocate}(std{\cf6 :}{\cf6 :}string{\cf1  }addr);{\cf1 \par
}{\cf1 	}{\cf2\i // find the addresses a packet heading to addr might take\par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}vector{\cf6 <}std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }traceRoute(std{\cf6 :}{\cf6 :}string{\cf1  }addr);{\cf1 \par
}{\cf1 	}{\cf2\i // find location data for each of the hops to an address\par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 geoTrace}(std{\cf6 :}{\cf6 :}string{\cf1  }addr);{\cf1 \par
}{\cf1 	}{\cf2\i // used to prettify the mac address\par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}string{\cf1  }{\cf8 lookupMAC}(std{\cf6 :}{\cf6 :}string{\cf1  }addr);{\cf1 \par
}{\cf1 \par
}{\cf4\b private}{\cf6 :}{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}DWORD,{\cf1  }DWORD{\cf6 >}{\cf1  }PORT2PID;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}DWORD,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }PID2PROC;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // manif but in the memory\par
}{\cf1 	}{\cf4\b static}{\cf1  }std{\cf6 :}{\cf6 :}{\cf4 map}{\cf6 <}std{\cf6 :}{\cf6 :}string,{\cf1  }std{\cf6 :}{\cf6 :}string{\cf6 >}{\cf1  }MACS;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf2\i // used for the hopping map\par
}{\cf1 	}{\cf2\i // but even the packets didn't hop as much as my sanity did when implementing this\par
}{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }HANDLE{\cf1  }icmpHandle;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }DWORD{\cf1  }dwRetVal;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 char}{\cf6 *}{\cf1  }sendData;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }LPVOID{\cf1  }replyBuffer;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }DWORD{\cf1  }replySize;{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }IP_OPTION_INFORMATION{\cf1  }ipOptions;{\cf1 \par
}{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 initPIDCache}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 initICMP}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 refreshTables}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }PMIB_TCPTABLE_OWNER_PID{\cf1  }{\cf8 getTCPTable}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 refreshTCP}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }PMIB_UDPTABLE_OWNER_PID{\cf1  }{\cf8 getUDPTable}();{\cf1 \par
}{\cf1 	}{\cf4\b static}{\cf1  }{\cf5 void}{\cf1  }{\cf8 refreshUDP}();{\cf1 \par
}\};{\cf1 \par
}}